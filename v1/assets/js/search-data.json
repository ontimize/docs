{"0": {
    "doc": "Ontimize Basics",
    "title": "Ontimize Basics",
    "content": "This section pretends to show the basic elements for the development of an application using Ontimize Boot . | Autoconfigurators | Understanding application.yml file | Complex Queries | . ",
    "url": "/docs/v1/basics/",
    
    "relUrl": "/basics/"
  },"1": {
    "doc": "Understanding application.yml",
    "title": "Introduction",
    "content": "A YAML file, with extension *.yml or .yaml , is a human readable file in which we can write data pairs in a suitable way by combinations of lists, maps and simple data. Another of the most important features of these files is the indentation. It is important to write these indented elements correctly, since if they are badly indented, they cannot be parsed correctly. ",
    "url": "/docs/v1/basics/applicationyml/#introduction",
    
    "relUrl": "/basics/applicationyml/#introduction"
  },"2": {
    "doc": "Understanding application.yml",
    "title": "Application.yml file description",
    "content": "Endpoints . They allow you to monitor and interact with your application. Integrated endpoints are available, but adding custom endpoints is also allowed. | endpoints: api: | . | Attribute | Values | Meaning | . | enabled | true, false | Active Spring Boot endpoints. | . Example . endpoints: api: enabled: true . Logging . | logging: level: | . | Attribute | Values | Meaning | . | root | String | Default server log level set to INFO level | . Example . logging: level: root: info . CORS . Mechanism that allows restricted resources to be requested between domains. | ontimize:corsfilter: | . | Attribute | Values | Meaning | . | enabled | true, false | CORS filter enabled. | . | ontimize:globalcors: | . CORS global configuration . | Attribute | Values | Meaning | . | corsConfigurations | String | Configuration for this entrypoint | . | ontimize:globalcors:corsConfigurations: | . | Attribute | Values | Meaning | . | allowedOrigins | String | Allow different origins | . | allowedHeaders | String | Allow headers | . | exposedHeaders | [“X-Auth-Token”,”Content-disposition”,”X-Requested-With”] | Exposed headers | . | allowedMethods | GET, POST, PUT, DELETE, OPTIONS | Allow HTTP methods | . Example . ontimize: corsfilter: enabled: true globalcors: corsConfigurations: \"[/**]\": allowedOrigins: \"*\" allowedHeaders: \"*\" exposedHeaders: [\"X-Auth-Token\", \"Content-disposition\", \"X-Requested-With\"] allowedMethods: - GET - POST - PUT - OPTIONS - DELETE . JDBC . | ontimize:jdbc: | . | Attribute | Values | Meaning | . | nameConvention | upper, lower, database | Convention of data columns name | . | sqlhandler | postgres, oracle, oracle12, sqlserver, hsqldb | SQL handler | . | ontimize:jdbc:sqlConditionProcessor: | . SQL handler . | Attribute | Values | Meaning | . | upperString | true, false | Use of uppercase | . | upperLike | true, false | String comparision using LIKE in uppercase | . Example . jdbc: nameConvention: upper sqlhandler: hslqdb sqlConditionProcessor: upperString: true upperLike: true . Security . | Attribute | Values | Meaning | . | mode | default | Default security mode | . | ontimize:security:roleInformationService: | . Configure columns for user roles . | Attribute | Values | Meaning | . | roleRepository | String | Repository which store the user role | . | roleNameColumn | String | Name of the column which store the role name | . | serverPermissionQueryId | String | Query ID to identify the query of server permissions | . | serverPermissionNameColumn | String | Name of the columns which contains the name of the server permission | . | clientPermissionQueryId | String | Query ID for client permissions | . | clientPermissionColumn | String | Name of the columns which contains the name of the client permission | . | ontimize:security:userInformationService: | . Information about the user . | Attribute | Values | Meaning | . | userRepository | String | Repository which stores the users of the application | . | userLoginColumn | String | Name of the column with the username | . | userPasswordColumn | String | Name of the column with the password | . | queryId | String | Query identififer for login | . | otherData | List | Other query columns | . | ontimize:security:userRoleInformationService: | . Repository information about linking users and roles . | Attribute | Values | Meaning | . | userRoleRepository | String | Repository name | . | queryId | String | Query identifier | . | roleLoginColumn | String | Column which stores the user | . | roleNameColumn | String | Column which stores the role name | . Example . security: mode: default roleInformationService: roleRepository: UserRoleDao roleNameColumn: ROLENAME serverPermissionQueryId: serverPermissions serverPermissionNameColumn: PERMISSION_NAME clientPermissionQueryId: clientPermissions clientPermissionColumn: XMLCLIENTPERMISSION userInformationService: userRepository: UserDao userLoginColumn: USER_ userPasswordColumn: PASSWORD queryId: login otherData: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN userRoleInformationService: userRoleRepository: UserRoleDao queryId: userRole roleLoginColumn: USER_ roleNameColumn: ROLENAME . Server . | ontimize:server: | . | Attribute | Values | Meaning | . | port | int | Server port | . | ontimize:server:servlet: | . | Attribute | Values | Meaning | . | context-path | String | customized servlet path | . | ontimize:server:tomcat: | . | Attribute | Values | Meaning | . | uri-encoding | String | URI encoding | . | ontimize:server:compression: | . | Attribute | Values | Meaning | . | enabled | true, false | Enable data compression | . | mime-types | String | Mime types | . Example . server: servlet: context-path: /custom/path port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml . Spring . | ontimize:spring:datasource: | . Data source (DB connection) . | Attribute | Values | Meaning | . | driver-class-name | String | JDBC driver | . | jdbcUrl | String | Connection URl | . | username | String | DB username | . | password | String | DB username password | . | initialSize | int | Initial size | . | testOnBorrow | true, false | Validation | . | ontimize:spring:main: | . | Attribute | Values | Meaning | . | banner-mode | on, off | Remove the startup banner in the console | . | ontimize:spring:session: | . | Attribute | Values | Meaning | . | store-type | String | Save the session in spring | . | ontimize:spring:resources: | . | Attribute | Values | Meaning | . | static-locations | String | Path for satic resources | . | ontimize:spring:autoconfigure: | . | Attribute | Values | Meaning | . | exclude | String | Delete Spring Boot auto-configuration files | . Example . spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbcUrl: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initialSize: 10 testOnBorrow: true main: banner-mode: \"off\" session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration . ",
    "url": "/docs/v1/basics/applicationyml/#applicationyml-file-description",
    
    "relUrl": "/basics/applicationyml/#applicationyml-file-description"
  },"3": {
    "doc": "Understanding application.yml",
    "title": "Complete Example",
    "content": "endpoints: api: enabled: true logging: level: root: info ontimize: corsfilter: enabled: true globalcors: corsConfigurations: \"[/**]\": allowedOrigins: \"*\" allowedHeaders: \"*\" exposedHeaders: [\"X-Auth-Token\", \"Content-disposition\", \"X-Requested-With\"] allowedMethods: - GET - POST - PUT - OPTIONS - DELETE jdbc: nameConvention: upper sqlhandler: hsqldb sqlConditionProcessor: upperString: true upperLike: true security: mode: default roleInformationService: roleRepository: UserRoleDao roleNameColumn: ROLENAME serverPermissionQueryId: serverPermissions serverPermissionNameColumn: PERMISSION_NAME clientPermissionQueryId: clientPermissions clientPermissionColumn: XMLCLIENTPERMISSION userInformationService: userRepository: UserDao userLoginColumn: USER_ userPasswordColumn: PASSWORD queryId: login otherData: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN userRoleInformationService: userRoleRepository: UserRoleDao queryId: userRole roleLoginColumn: USER_ roleNameColumn: ROLENAME server: port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbcUrl: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initialSize: 10 testOnBorrow: true main: banner-mode: \"off\" session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . ",
    "url": "/docs/v1/basics/applicationyml/#complete-example",
    
    "relUrl": "/basics/applicationyml/#complete-example"
  },"4": {
    "doc": "Understanding application.yml",
    "title": "Understanding application.yml",
    "content": "Table of Contents . | Introduction | Application.yml file description . | Endpoints | Logging | CORS | JDBC | Security | Server | Spring | . | Complete Example | . ",
    "url": "/docs/v1/basics/applicationyml/",
    
    "relUrl": "/basics/applicationyml/"
  },"5": {
    "doc": "Autoconfigurators",
    "title": "DMS",
    "content": ". | ontimize:dms: | . | Attribute | Values | Meaning | . | engine | odms | Indicates the engine that will be used for the DMS system. Ontimize has an implementation of an engine, whose value is odms. | . | basePath | String | The path where the DMS files will be stored | . The configuration of DMS system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: dms: engine: odms basePath: file:/C:/applications/projectwiki/dms . ",
    "url": "/docs/v1/basics/autoconfigurators/#dms",
    
    "relUrl": "/basics/autoconfigurators/#dms"
  },"6": {
    "doc": "Autoconfigurators",
    "title": "I18n",
    "content": "ontimize:i18n: . | Attribute | Values | Meaning | . | refBundleRepository | String | Name of the DAO containing information about the translation bundles | . | bundleKeyColumn | String | Column of the database table containing the translation bundle identifier | . | bundleClassNameColumn | String | Column of the database table containing the name of the translation bundle class | . | bundleDescriptionColumn | String | Column of the database table containing the description of the translation bundle | . | refBundleValueRepository | String | Name of the database table containing information about the translations of each translation bundle | . | bundleValueTextKeyColumn | String | Column of the database table containing the key of a translation | . | bundleValueKeyColumn | String | Column of the database table containing the key of a translation | . | engine | default | Property to enable the i18n system. Need to have any value, commonly, default. | . The configuration of the I18N system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: i18n: refBundleRepository: OCDatabaseBundleDao bundleKeyColumn: ID_I18N bundleClassNameColumn: CLASS_NAME bundleDescriptionColumn: I18N_DESCRIPTION refBundleValueRepository: OCDatabaseBundleValueDao bundleValueTextKeyColumn: KEY bundleValueKeyColumn: ID_I18N_VALUE engine: default . ",
    "url": "/docs/v1/basics/autoconfigurators/#i18n",
    
    "relUrl": "/basics/autoconfigurators/#i18n"
  },"7": {
    "doc": "Autoconfigurators",
    "title": "JDBC",
    "content": ". | ontimize:jdbc: | . | Attribute | Values | Meaning | . | nameConvention | upper, lower, database | Indicate the nomenclature of the columns in the DB, in lower case, upper case or as it appears in the database | . | sqlhandler | postgres, oracle, oracle12, sqlserver, hsqldb | Indicates which SQL statement handler will be used to communicate with the database | . | ontimize:jdbc:sqlConditionProcessor: | . | Attribute | Values | Meaning | . | uppperString | true, false | Use uppercase strings in WHERE conditions | . | upperLike | true, false | Use uppercase strings in LIKE conditions | . Example . ontimize: jdbc: nameConvention: upper sqlhandler: hsqldb sqlConditionProcessor: uppperString: true upperLike: true . ",
    "url": "/docs/v1/basics/autoconfigurators/#jdbc",
    
    "relUrl": "/basics/autoconfigurators/#jdbc"
  },"8": {
    "doc": "Autoconfigurators",
    "title": "LDAP",
    "content": ". | ontimize:security: | . | Attribute | Value | Meaning | . | mode | ldap | Change the system security from default to ldap | . | ldap: | . | Attribute | Values | Meaning | . | active | true, false | Enable or disable ldap security | . | host | IP | Ip host for ldap security | . | port | Number | Port of the host for ldap security | . | loginType | DN, simple | The login type indicates whether a full LDAP string with DN value or will be used or if the username will simply be provided with simple value | . | bind.dn | String | File to populate the LDAP server using a .ldif file | . | base.dn | String | List of base DNs. | . | domain | String | The domain name | . The LDAP security configuration is done through autoconfigurators. To see the settings, check this link. Example . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 loginType: simple bind.dn: base.dn: domain: yourdomain.com . ",
    "url": "/docs/v1/basics/autoconfigurators/#ldap",
    
    "relUrl": "/basics/autoconfigurators/#ldap"
  },"9": {
    "doc": "Autoconfigurators",
    "title": "Mail",
    "content": ". | ontimize:mail: | . | Attribute | Values | Meaning | . | refRepository | String | Name of the DAO containing the configuration information required for system configuration | . | filterColumnName | String | Name of the column in the database table containing the keys | . | valueColumnName | String | Name of the database table column containing the values | . | queryId | String | Name of the DAO query to be executed. By default, is default | . | filterColumnValueEncoding | String | Key name of the row in the key column containing the value for mail encoding | . | filterColumnValueHost | String | Name of the key in the row of the key column containing the value for the host in the mail service | . | filterColumnValuePort | String | Name of the key in the row of the key column containing the value for the port in the mail service | . | filterColumnValueProtocol | String | Name of the key in the row of the key column containing the value for the protocol used in the mail service | . | filterColumnValueUser | String | Name of the key in the row of the key column containing the value for the user in the mail service | . | filterColumnValuePassword | String | Name of the key in the row of the key column containing the value for the user password in the mail service | . | filterColumnValueJavaMailProperties | String | Name of the key in the row of the key column containing the value for the mail propoerties in the mail service | . | engine | String | Enable or disable mail engine. To enable, have any value int this arribute. By default, use default value | . The configuration of the mail system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: mail: refRepository: OCSettingsDao filterColumnName: SETTING_KEY valueColumnName: SETTING_VALUE queryId: default filterColumnValueEncoding: mail_encoding filterColumnValueHost: mail_host filterColumnValuePort: mail_port filterColumnValueProtocol: mail_protocol filterColumnValueUser: mail_user filterColumnValuePassword: mail_password filterColumnValueJavaMailProperties: mail_properties engine: default . ",
    "url": "/docs/v1/basics/autoconfigurators/#mail",
    
    "relUrl": "/basics/autoconfigurators/#mail"
  },"10": {
    "doc": "Autoconfigurators",
    "title": "REST",
    "content": ". | ontimize:corsfilter: | . | Attribute | Values | Meaning | . | enabled | true, false | Enable or disable CORS filter | . | ontimize:globalcors:corsConfigurations Indicates the entrypoint to be configured, with the properties for each one. In general, the entrypoint [/**] is configured entirely. | . | Attribute | Values | Meaning | . | allowedOrigins | *** | Set the origins to allow, the special value * allows all domains. By default this is not set | . | allowedHeaders | *** | Set the list of headers that a pre-flight request can list as allowed for use during an actual request. The special value * allows actual requests to send any header. A header name is not required to be listed if it is one of: Cache-Control, Content-Language, Expires, Last-Modified or Pragma). By default this is not set. | . | exposedHeaders | &#160; | Set the list of response headers other than simple headers (i.e. Cache-Control, Content-Language, Content-Type, Expires, Last-Modified or Pragma that an actual response might have and can be exposed. Note that * is not a valid exposed header value. By default this is not set. | . | allowedMethods | List | Set the HTTP methods to allow, e.g. GET, POST, PUT, etc. The special value * allows all methods. If not set, only GET and HEAD are allowed. By default this is not set. Note: CORS checks use values from &#8220;Forwarded&#8221; RFC7239, X-Forwarded-Host, X-Forwarded-Port, and X-Forwarded-Proto headers, if present, in order to reflect the client-originated address. Consider using the ForwardedHeaderFilter in order to choose from a central place whether to extract and use, or to discard such headers. See the Spring Framework reference for more on this filter. | . | maxAge | Number | Configure how long, in seconds, the response from a pre-flight request can be cached by clients. By default this is not set. | . | allowCredentials | - | Whether user credentials are supported. By default this is not set (i.e. user credentials are not supported). | . Example . ontimize: corsfilter: enabled: true globalcors: corsConfigurations: \"[/**]\": allowedOrigins: \"*\" allowedHeaders: \"*\" exposedHeaders: [\"X-Auth-Token\", \"Content-disposition\", \"X-Requested-With\"] allowedMethods: - GET - POST - PUT - OPTIONS - DELETE . ",
    "url": "/docs/v1/basics/autoconfigurators/#rest",
    
    "relUrl": "/basics/autoconfigurators/#rest"
  },"11": {
    "doc": "Autoconfigurators",
    "title": "Security",
    "content": ". | ontimize:security: | . | Attribute | Values | Meaning | . | mode | default | Use default to enable the security mode for Ontimize Boot | . | ignorePaths | String | Paths in server thant will not be securized | . | servicePath | String | Establish the service path. By default, */*** | . | ontimize:security:jwt: Not required, enabled by default | . | Attribute | Values | Meaning | . | password | String | JWT password | . | expirationTime | Long | JWT expiration time | . | refreshToken | true, false | Set true to refresh JWT, false otherwise | . | ontimize:security:user-information-service: | . | Attribute | Values | Meaning | . | queryId | String | Name of the DAO query identifier. | . | userLoginColumn | String | Database column that stores the username | . | userPasswordColumn | String | Database column that stores the password | . | userNeedCheckPassColumn | String | Database column that stores whether the password requires updating at the next use | . | userRepository | String | Name of the DAO containing information about users | . | otherData | List | Extra data to store from the user logged | . | ontimize:security:role-information-service: | . | Attribute | Values | Meaning | . | roleRepository | String | Name of the DAO containing information about users | . | roleNameColumn | String | Database column that stores the role name | . | serverPermissionQueryId | String | Name of the DAO query identifier for server permissions | . | serverPermissionNameColumn | String | Database column that stores the server permissions | . | clientPermissionQueryId | String | Name of the DAO query identifier for client permissions | . | clientPermissionColumn | List | Database column that stores the client permissions | . | ontimize:security:user-role-information-service: | . | Attribute | Values | Meaning | . | userRoleRepository | String | Name of the DAO containing relation between users and its profiles | . | queryId | String | Name of the DAO query identifier | . | roleLoginColumn | String | Database column that stores the username | . | roleNameColumn | String | Database column that stores the role name | . The configuration of the rest of the Security system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: security: mode: default ignorePaths: /news/**, /products/** userInformationService: userRepository: OCLoginProfilesDao queryId: login userLoginColumn: USER_ userPasswordColumn: PASSWORD otherData: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN userRoleInformationService: userRoleRepository: OCLoginProfilesDao queryId: userRole roleLoginColumn: USER_ roleNameColumn: ROLENAME roleInformationService: roleRepository: OCLoginProfilesDao roleNameColumn: ROLENAME serverPermissionQueryId: serverPermissions serverPermissionNameColumn: PERMISSION_NAME clientPermissionQueryId: clientPermissions clientPermissionColumn: XMLCLIENTPERMISSION . ",
    "url": "/docs/v1/basics/autoconfigurators/#security",
    
    "relUrl": "/basics/autoconfigurators/#security"
  },"12": {
    "doc": "Autoconfigurators",
    "title": "Autoconfigurators",
    "content": "Table of Contents . | DMS | I18n | JDBC | LDAP | Mail | REST | Security | . Autoconfigurators are an easy way to indicate common elements that need minimal customization in applications, such as database connection. These configurations are used within the application.yml file located inside the boot folder. ",
    "url": "/docs/v1/basics/autoconfigurators/",
    
    "relUrl": "/basics/autoconfigurators/"
  },"13": {
    "doc": "Using complex queries",
    "title": "Introduction",
    "content": "In this example the DAO *.xml files will be modified to make complex queries against other database tables. ",
    "url": "/docs/v1/basics/complexqueries/#introduction",
    
    "relUrl": "/basics/complexqueries/#introduction"
  },"14": {
    "doc": "Using complex queries",
    "title": "Database structure",
    "content": "We will update the OfferCandidatesDao DAO to add new information in the *.xml. In this case, you will try to add a new query that reflects the other tables that are used from this DAO to relate the offers, candidates, and status. As this table only contains identifiers, our new query will allow us to know all the data and not only its identifiers. ",
    "url": "/docs/v1/basics/complexqueries/#database-structure",
    
    "relUrl": "/basics/complexqueries/#database-structure"
  },"15": {
    "doc": "Using complex queries",
    "title": "Modify the DAO to add a complex query",
    "content": "In the *.xml, we will add a new &lt;Queries&gt; tag in which we will add the new queries using the &lt;Query&gt; tag. In this query, we can indicate the query to be executed through the &lt;Sentence&gt; tag. As we want to use the columns and conditions that you indicate through the request, we will use the following markers: . Query markers . | Marker | Meaning | . | #COLUMNS# | Columns to be queried | . | #WHERE# | Columns to filter the query | . | #WHERE_CONCAT# | Adds more columns to filter the query with the AND sql operator | . | #ORDER# | Column to order the queried values with the ORDER BY sql operator | . | #ORDER_CONCAT# | Adds more columns to order the queried values with a comma (,) | . | #SCHEMA# | Gets the database schema | . Example . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM #SCHEMA#.OFFER_CANDIDATES #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES WHERE ID = 200 . There are two ways to order the queries values, with the #ORDER# marker or with a &lt;OrderColumn&gt; tag . Example with #ORDER# . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY ID . Example with &lt;OrderColumn&gt; . &lt;Queries&gt; &lt;Query&gt; &lt;OrderColumns&gt; &lt;OrderColumn name=\"CANDIDATE_ID\" type=\"ASC\"/&gt; &lt;/OrderColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY CANDIDATE_ID . There are two types of OrderColumn, ASC (Ascendent) or DESC (Descendent). Ambiguous columns . The use of the &lt;AmbiguousColumn&gt; tag will indicate which are the ambiguous columns (in this case, the DESCRIPTION column of OFFER_CANDIDATE_STATUS and OFFER, using the name of DESC_STATUS for OFFER_CANDIDATE_STATUS). Otherwise in case we want to modify the query that is performed by default, the identifier of the tag would be default &lt;Query id = \"default\"&gt;. As we want to keep the query by default, we will put another identifier. Example . &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . Complete example . right_panel_open OfferCandidatesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . In the java file, we will add a new constant, which will have the same value as the name of the identifier that we have established for the query. OfferCandidatesDao.java . package com.ontimize.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferCandidatesDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidatesDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidatesDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_OFFER_ID =\"OFFER_ID\"; public static final String ATTR_CANDIDATE_ID =\"CANDIDATE_ID\"; public static final String ATTR_OFFER_CANDIDATE_STATUS =\"OFFER_CANDIDATE_STATUS\"; public static final String QUERY_OFFER_DETAILS = \"details\"; } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v1/basics/complexqueries/#modify-the-dao-to-add-a-complex-query",
    
    "relUrl": "/basics/complexqueries/#modify-the-dao-to-add-a-complex-query"
  },"16": {
    "doc": "Using complex queries",
    "title": "Modify the interface and the service to add the new method",
    "content": "We will update the IOfferService interface to add the new method that will perform the query. In case of being the default query, it would not be necessary to do any of the steps indicated below. right_panel_open IOfferService.java . public interface IOfferService { ... // OFFER CANDIDATES ... public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; ... // OFFER CANDIDATES STATUS ... } . In the service, we implement the new interface method, using the daoHelper to create the query, but adding a new parameter after the list of columns to query, which will be the identifier of the query that we have created in the DAO (and that we have associated with a constant in the corresponding java file). OfferService.java . @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { ... @Override public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList, OfferCandidatesDao.QUERY_OFFER_DETAILS); } ... } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v1/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method",
    
    "relUrl": "/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method"
  },"17": {
    "doc": "Using complex queries",
    "title": "Using complex queries",
    "content": "Table of Contents . | Introduction | Database structure | Modify the DAO to add a complex query . | Query markers | Ambiguous columns | Complete example | . | Modify the interface and the service to add the new method | . ",
    "url": "/docs/v1/basics/complexqueries/",
    
    "relUrl": "/basics/complexqueries/"
  },"18": {
    "doc": "DMS System",
    "title": "Introduction",
    "content": "A Document Management System (DMS) is a system that allows you to store files and keep track of the versions of those files. Ontimize Boot provides a DMS system that allows to store the files that are associated to the different records of a database table. ",
    "url": "/docs/v1/basics/dms/#introduction",
    
    "relUrl": "/basics/dms/#introduction"
  },"19": {
    "doc": "DMS System",
    "title": "Previous concepts",
    "content": ". | Document (or workspace): It is superentity into which several files can be grouped. | File: The file is the generic representation of a file. A file groups several versions of itself. | Version: Is the relationship to a physical file. | Category (or folder): Is a way of grouping files within the document. | . ",
    "url": "/docs/v1/basics/dms/#previous-concepts",
    
    "relUrl": "/basics/dms/#previous-concepts"
  },"20": {
    "doc": "DMS System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms-1.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms-1.x.x . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v1/basics/dms/#prerequisites",
    
    "relUrl": "/basics/dms/#prerequisites"
  },"21": {
    "doc": "DMS System",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v1/basics/dms/#steps",
    
    "relUrl": "/basics/dms/#steps"
  },"22": {
    "doc": "DMS System",
    "title": "Database",
    "content": "DMS Tables . With the database started, we create the new tables that will store the DMS information. CREATE TABLE TDMS_DOC(ID_DMS_DOC INTEGER IDENTITY NOT NULL PRIMARY KEY,UPDATE_DATE TIMESTAMP,UPDATE_BY_ID INTEGER,DOC_NAME VARCHAR(255) NOT NULL,OWNER_ID INTEGER NOT NULL,DOC_DESCRIPTION CLOB(1G),DOC_KEYWORDS VARCHAR(255)); CREATE TABLE TDMS_DOC_FILE(ID_DMS_DOC_FILE INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_NAME VARCHAR(255) NOT NULL,ID_DMS_DOC INTEGER NOT NULL,FILE_TYPE VARCHAR(255),ID_DMS_DOC_CATEGORY INTEGER); CREATE TABLE TDMS_DOC_FILE_VERSION(ID_DMS_DOC_FILE_VERSION INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_PATH VARCHAR(500),VERSION INTEGER NOT NULL,FILE_DESCRIPTION CLOB(1G),IS_ACTIVE CHARACTER(1) NOT NULL,FILE_ADDED_DATE TIMESTAMP NOT NULL,FILE_ADDED_USER_ID INTEGER NOT NULL,ID_DMS_DOC_FILE INTEGER NOT NULL,THUMBNAIL BLOB(1G),FILE_SIZE INTEGER); CREATE TABLE TDMS_DOC_PROPERTY(ID_DMS_DOC_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,DOC_PROPERTY_KEY VARCHAR(255) NOT NULL,DOC_PROPERTY_VALUE VARCHAR(255),ID_DMS_DOC INTEGER NOT NULL); CREATE TABLE TDMS_RELATED_DOC(ID_DMS_RELATED_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC_MASTER INTEGER NOT NULL,ID_DMS_DOC_CHILD INTEGER NOT NULL); CREATE TABLE TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC INTEGER NOT NULL,ID_DMS_DOC_CATEGORY_PARENT INTEGER,CATEGORY_NAME VARCHAR(255) NOT NULL); . Once the tables have been created, we add the foreign keys . ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE_VERSION ADD CONSTRAINT TDMS_DOC_FILE_VERSION_FK FOREIGN KEY(ID_DMS_DOC_FILE) REFERENCES TDMS_DOC_FILE(ID_DMS_DOC_FILE); ALTER TABLE TDMS_DOC_PROPERTY ADD CONSTRAINT TDMS_DOC_PROPERTY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC) ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK FOREIGN KEY(ID_DMS_DOC_MASTER) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK_1 FOREIGN KEY(ID_DMS_DOC_CHILD) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_CATEGORY ADD CONSTRAINT TDMS_DOC_CATEGORY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK_1 FOREIGN KEY(ID_DMS_DOC_CATEGORY) REFERENCES TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY); . Link DMS table with entity table . In this example we want each new candidate added to the application to have its own space to store documents, so we will modify the CANDIDATES table to contain a column that stores the primary key of the document (or workspace) that will be associated with it. ALTER TABLE CANDIDATE ADD ID_DMS_DOC INTEGER; . ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); . ",
    "url": "/docs/v1/basics/dms/#database",
    
    "relUrl": "/basics/dms/#database"
  },"23": {
    "doc": "DMS System",
    "title": "Server",
    "content": "Add DMS dependencies . right_panel_open model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-common&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... ws/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-rest&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add DMS DAO and modify Candidate DAO . A specific DAO will be created for each table in the DMS system, and each of them will implement a different interface. In turn, the candidate DAO will be modified to reflect the new column it contains. right_panel_open DMSCategoryDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_CATEGORY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_CATEGORY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;!-- TDMS_DOC --&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;UPDATE_DATE&lt;/Column&gt; &lt;Column&gt;UPDATE_BY_ID&lt;/Column&gt; &lt;Column&gt;DOC_NAME&lt;/Column&gt; &lt;Column&gt;OWNER_ID&lt;/Column&gt; &lt;Column&gt;DOC_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;DOC_KEYWORDS&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf JOIN ${mainschema}.TDMS_DOC AS tdd ON tddf.ID_DMS_DOC = tdd.ID_DMS_DOC LEFT JOIN ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv ON tddf.id_dms_doc_file = tddfv.id_dms_doc_file WHERE (tddfv.IS_ACTIVE = 'Y' OR tddfv.id_dms_doc_file_version IS NULL) #WHERE_CONCAT# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;Query id=\"allfiles\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileVersionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE_VERSION\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE_VERSION&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddfv\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv LEFT JOIN ${mainschema}.TDMS_DOC_FILE AS tddf ON tddfv.ID_DMS_DOC_FILE = tddf.ID_DMS_DOC_FILE #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentPropertyDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_PROPERTY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSRelatedDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_RELATED_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_RELATED_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . right_panel_open CandidateDao.java ... public class CandidateDao extends OntimizeJdbcDaoSupport { ... public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSCategoryDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSCategoryDao; @Repository(\"DMSCategoryDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSCategoryDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSCategoryDao extends OntimizeJdbcDaoSupport implements IDMSCategoryDao { public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_ID_DMS_DOC_CATEGORY_PARENT = \"ID_DMS_DOC_CATEGORY_PARENT\"; public static final String ATTR_CATEGORY_NAME = \"CATEGORY_NAME\"; } . DMSDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentDao; @Repository(\"DMSDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentDao extends OntimizeJdbcDaoSupport implements IDMSDocumentDao { public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_UPDATE_DATE = \"UPDATE_DATE\"; public static final String ATTR_UPDATE_BY_ID = \"UPDATE_BY_ID\"; public static final String ATTR_DOC_NAME = \"DOC_NAME\"; public static final String ATTR_OWNER_ID = \"OWNER_ID\"; public static final String ATTR_DOC_DESCRIPTION = \"DOC_DESCRIPTION\"; public static final String ATTR_DOC_KEYWORDS = \"DOC_KEYWORDS\"; } . DMSDocumentFileDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileDao; @Repository(\"DMSDocumentFileDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileDao{ public static final String ATTR_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATTR_FILE_NAME = \"FILE_NAME\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_FILE_TYPE = \"FILE_TYPE\"; public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; } . DMSDocumentFileVersionDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileVersionDao; @Repository(\"DMSDocumentFileVersionDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileVersionDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileVersionDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileVersionDao { public static final String ATT_ID_DMS_DOC_FILE_VERSION = \"ID_DMS_DOC_FILE_VERSION\"; public static final String ATT_FILE_PATH = \"FILE_PATH\"; public static final String ATT_VERSION = \"VERSION\"; public static final String ATT_FILE_DESCRIPTION = \"FILE_DESCRIPTION\"; public static final String ATT_IS_ACTIVE = \"IS_ACTIVE\"; public static final String ATT_FILE_ADDED_DATE = \"FILE_ADDED_DATE\"; public static final String ATT_FILE_ADDED_USER_ID = \"FILE_ADDED_USER_ID\"; public static final String ATT_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATT_THUMBNAIL = \"THUMBNAIL\"; public static final String ATT_FILE_SIZE = \"FILE_SIZE\"; } . DMSDocumentPropertyDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentPropertyDao; @Repository(\"DMSDocumentPropertyDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentPropertyDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentPropertyDao extends OntimizeJdbcDaoSupport implements IDMSDocumentPropertyDao { public static final String ATTR_ID_DMS_DOC_PROPERTY = \"ID_DMS_DOC_PROPERTY\"; public static final String ATTR_DOC_PROPERTY_KEY = \"DOC_PROPERTY_KEY\"; public static final String ATTR_DOC_PROPERTY_VALUE = \"DOC_PROPERTY_VALUE\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSRelatedDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSRelatedDocumentDao; @Repository(\"DMSRelatedDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSRelatedDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSRelatedDocumentDao extends OntimizeJdbcDaoSupport implements IDMSRelatedDocumentDao { public static final String ATTR_ID_DMS_RELATED_PROPERTY = \"ID_DMS_RELATED_PROPERTY\"; public static final String ATTR_ID_DMS_DOC_MASTER = \"ID_DMS_DOC_MASTER\"; public static final String ATTR_ID_DMS_DOC_CHILD = \"ID_DMS_DOC_CHILD\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify CandidateService insert method . The method of inserting new candidates will be modified so that, when inserting them, they will have a workspace to maintain the files to be uploaded associated with the inserted candidate. right_panel_open CandidateService.java ... import com.ontimize.jee.common.exceptions.DmsException; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.common.services.dms.DocumentIdentifier; import com.ontimize.jee.server.services.dms.DMSCreationHelper; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private DMSCreationHelper dmsHelper; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { try { DocumentIdentifier docId = this.dmsHelper.createDocument((String) attrMap.get(CandidateDao.ATTR_DNI)); attrMap.put(DMSNaming.DOCUMENT_ID_DMS_DOCUMENT, docId.getDocumentId()); } catch (DmsException e) { throw new OntimizeJEERuntimeException(\"ERROR_CREATING_DMS_DOC\", e); } return this.daoHelper.insert(this.candidateDao, attrMap); } ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add File Manager Rest Controller . right_panel_open DMSNameConverter.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.Arrays; import java.util.Date; import java.util.List; import java.util.Map; import org.springframework.stereotype.Service; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.server.dms.model.OFile; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @Service(\"DMSNameConverter\") public class DMSNameConverter implements IDMSNameConverter { @Override public Object getFileIdColumn() { return DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE; } @Override public Object getFileNameColumn() { return DMSNaming.DOCUMENT_FILE_NAME; } @Override public Object getFileSizeColumn() { return DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE; } @Override public Object getCategoryIdColumn() { return DMSNaming.CATEGORY_ID_CATEGORY; } @Override public Object getCategoryNameColumn() { return DMSNaming.CATEGORY_CATEGORY_NAME; } @Override public OFile createOFile(Map&lt;?, ?&gt; params) { OFile file = new OFile(); file.setId((Integer) params.get(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE)); file.setName((String) params.get(DMSNaming.DOCUMENT_FILE_NAME)); file.setType((String) params.get(DMSNaming.DOCUMENT_FILE_TYPE)); file.setSize((Integer) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE)); file.setCreationDate(((Date) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE)).getTime()); file.setDirectory(false); return file; } @Override public List&lt;?&gt; getFileColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE, DMSNaming.DOCUMENT_FILE_NAME, DMSNaming.DOCUMENT_FILE_TYPE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE); } @Override public List&lt;?&gt; getCategoryColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.CATEGORY_ID_CATEGORY, DMSNaming.CATEGORY_CATEGORY_NAME, DMSNaming.CATEGORY_ID_CATEGORY_PARENT); } } . FileManagerRestController.java . package com.ontimize.projectwiki.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.ontimize.jee.common.services.dms.IDMSService; import com.ontimize.jee.server.dms.rest.DMSRestController; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @RestController @RequestMapping(\"/filemanager\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.dms.IDMSService.class, com.ontimize.jee.server.dms.rest.IDMSNameConverter.class }) public class FileManagerRestController extends DMSRestController&lt;IDMSService, IDMSNameConverter&gt; { @Autowired private IDMSService dmsService; @Override public IDMSService getService() { return this.dmsService; } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to indicate the path where the dms files will be stored and the engine it will use. In this link you have information about the configuration of the DMS system in the application.yml file. The path specified in the basePath variable must exist before the server is started. right_panel_open application.yml . ontimize: dms: engine: odms basePath: file:/C:/applications/projectwiki/dms . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add permissions . It is necessary to add the permissions required for the role associated with the user to be able to execute REST requests, which are secured. For the example, we will add all the methods and give access to the demo user role. INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContentOfVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperty'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileRecoverPreviousVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDeleteProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetAllFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/setRelatedDocuments'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentAddProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/getRelatedDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryGetForDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/moveFilesToCategory'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileVersionQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetVersions'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContent'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileQuery'); . Add all permissions to the user role demo. INSERT INTO PUBLIC.PUBLIC.TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . ",
    "url": "/docs/v1/basics/dms/#server",
    
    "relUrl": "/basics/dms/#server"
  },"24": {
    "doc": "DMS System",
    "title": "DMS System",
    "content": "Table of Contents . | Introduction | Previous concepts | Prerequisites | Steps . | Database . | DMS Tables | Link DMS table with entity table | . | Server . | Add DMS dependencies | Add DMS DAO and modify Candidate DAO | Modify CandidateService insert method | Add File Manager Rest Controller | Modify application.yml | Add permissions | . | . | . ",
    "url": "/docs/v1/basics/dms/",
    
    "relUrl": "/basics/dms/"
  },"25": {
    "doc": "I18N System",
    "title": "Introduction",
    "content": "Ontimize Boot&#8217;s remote internationalization service (i18n) allows you to manage the translations of the different languages of the application without having to modify the programs translation files, by storing the translations in the database. The interfaces implemented by the service is com.ontimize.jee.common.services.i18n.II18nService. ",
    "url": "/docs/v1/basics/i18n/#introduction",
    
    "relUrl": "/basics/i18n/#introduction"
  },"26": {
    "doc": "I18N System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n-1.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n-1.x.x . ",
    "url": "/docs/v1/basics/i18n/#prerequisites",
    
    "relUrl": "/basics/i18n/#prerequisites"
  },"27": {
    "doc": "I18N System",
    "title": "Configuring internationalization service in Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. DB configuration . If the configuration table does not exist in the DB, the database tables necessary for the operation of the service are created, one in which the names of the translation bundles shall be stored, and another in which the translations and the bundle to which they belong shall be stored: . SQL (HSQL) Statement . CREATE TABLE TI18N(ID_I18N INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,CLASS_NAME VARCHAR(150),I18N_DESCRIPTION VARCHAR(250)); CREATE TABLE TI18N_VALUE(ID_I18N_VALUE INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,ID_I18N INTEGER NOT NULL,\"KEY\" VARCHAR(250),ES_ES LONGVARCHAR,EN_US LONGVARCHAR,ES_ES_GL LONGVARCHAR); . In the first table (the one named TI18N) we will add a bundle to link all resources of the TI18N_VALUE table. SQL (HSQL) Statement . INSERT INTO TI18N (ID_I18N, CLASS_NAME, I18N_DESCRIPTION) VALUES(0, 'i18n.bundle', 'Resource bundle in database'); . In the case of the second table (the one named TI18N_VALUE) it will contain a column with the name of each Locale accepted by the application. SQL (HSQL) Statement . INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'ID','Id. Candidato','Candidate id','Id. Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHOTO','Foto','Photo','Foto'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'NAME','Nombre','Name','Nome'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'SURNAME','Apellido','Surname','Apelido'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'BIRTHDAY','Fecha de Nacimiento','Birthday','Data de nacemento'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'DNI','DNI Candidato','Candidate DNI','DNI Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHONE','Telefono','Phone','Telefono'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'EMAIL','Correo electronico','E-mail','Correo electronico'); . Add Permissions . The com.ontimize.jee.server.services.i18n.I18nServiceImpl service has several methods that we will have to add to the permissions to be able to execute the methods. SQL (HSQL) Statement . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/getAllResourceBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/getBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/getBundle'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/getAvailableBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/getAvailableLocales'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/updateBundleValues'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.i18n.I18nServiceImpl/deleteBundleValues'); . Add all permissions to the user role demo. SQL (HSQL) Statement . INSERT INTO TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . Server configuration . To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: i18n: refBundleRepository: OCDatabaseBundleDao bundleKeyColumn: ID_I18N bundleClassNameColumn: CLASS_NAME bundleDescriptionColumn: I18N_DESCRIPTION refBundleValueRepository: OCDatabaseBundleValueDao bundleValueTextKeyColumn: KEY bundleValueKeyColumn: ID_I18N_VALUE engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the refBundleRepository: OCDatabaseBundleDao attribute. Creation of DAO files . It is necessary to create the DAOs that reflect the new DB tables we have created. right_panel_open First we will create the *.xml files. OCDatabaseBundleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OCDatabaseBundleValueDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N_VALUE\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N_VALUE&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java files we indicate that it is a repository whose name will be OCDatabaseBundleDao and OCDatabaseBundleValueDao respectively, using the @Repository annotation. With the @Lazy annotation, we indicate that the loading is delayed until it is completely necessary, and the @ConfigurationFile annotation allows us to configure this DAO using the XML file and an additional file where some features common to several DAOs can be stored, such as the schema they belong to. OCDatabaseBundleDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleDao() { super(); } } . OCDatabaseBundleValueDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleValueDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleValueDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleValueDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleValueDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add I18n Rest Controller . right_panel_open I18nRestController.java . As two implementations of the interface are needed, we use the @Qualifier annotation to specify which is the correct bean so that it can be launched correctly. With the tag @RequestMapping we indicate the route through which the rest service will receive the requests. With the tag @RequestBody we receive the data that were sent in the rest request. In this class we create a method that retrieves the translations of a bundle that we have specified in the language that we have indicated. package com.ontimize.projectwiki.ws.core.rest; import java.util.Enumeration; import java.util.Hashtable; import java.util.Locale; import java.util.Map; import java.util.ResourceBundle; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.ComponentScan; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import com.ontimize.db.EntityResult; import com.ontimize.jee.common.services.i18n.II18nService; import com.ontimize.jee.server.rest.InsertParameter; @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; @RequestMapping(value = \"/bundle\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; getBundle(@RequestBody InsertParameter parameter) { Map&lt;Object, Object&gt; data = parameter.getData(); ResourceBundle resource = iI18nService.getBundle(String.valueOf(data.get(\"bundle\")), new Locale(String.valueOf(data.get(\"lang\")), String.valueOf(data.get(\"country\")))); return new ResponseEntity&lt;EntityResult&gt;(bundleToEntityResult(resource), HttpStatus.OK); } private EntityResult bundleToEntityResult(ResourceBundle resource) { Hashtable&lt;String, String&gt; table = new Hashtable&lt;&gt;(); Enumeration&lt;String&gt; keys = resource.getKeys(); EntityResult eR = new EntityResult(); while (keys.hasMoreElements()) { String key = keys.nextElement(); table.put(\"key\", key); table.put(\"value\", resource.getString(key)); eR.addRecord(table); table = new Hashtable&lt;&gt;(); } return eR; } } . | ontimize-examples . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . | . ",
    "url": "/docs/v1/basics/i18n/#configuring-internationalization-service-in-ontimize-boot",
    
    "relUrl": "/basics/i18n/#configuring-internationalization-service-in-ontimize-boot"
  },"28": {
    "doc": "I18N System",
    "title": "Testing the i18n services",
    "content": "To test the i18n service we will use REST requests. For this, the following query will be executed: localhost:33333/i18n/bundle . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle | Indicates the request mapping class | . The request types can only be POST and the request body has to have the following structure: . | Element | Meaning | . | bundle | Indicates the class name of the bundle specified in the database | . | lang | Indicates the language of the bundle. It needs to be lowercase. | . | country | Indicates the country of the language. It needs to be uppercase. | . | Request type | Query | URL | Service method | Body request | . | POST | query | localhost:33333/i18n/bundle | getBundle | Example below | . Body request: . { \"data\": { \"bundle\": \"i18n.bundle\", \"lang\": \"en\", \"country\": \"US\" } } . The authorization used for these requests is authorization of the type BASIC. In this case, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v1/basics/i18n/#testing-the-i18n-services",
    
    "relUrl": "/basics/i18n/#testing-the-i18n-services"
  },"29": {
    "doc": "I18N System",
    "title": "Uses of I18n Rest Controller",
    "content": "The i18n interface has a few methods for managing bundles or translations. Next in this example, we will test the bundle values CRUD(Create, Read, Update, Delete) methods. To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. Query bundle values . To query the bundle values we create a method that receieves the bundle class, the language to query and the country of this language. The code to query the values of a bundle is in the previous section. Update bundle values . To update the bundle values we create a method that receieves the translations to modify of a bundle that we have specified. Code . right_panel_open I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; import java.util.Hashtable; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.UpdateParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/update\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE) public void updateBundleValues(@RequestBody UpdateParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getData().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); ArrayList e = (ArrayList) parameter.getData().get(\"bundleValues\"); Hashtable&lt;String, Object&gt; translationValues = new Hashtable&lt;&gt;(); for (int i = 0; i &lt; e.size(); i++) { Map&lt;String,Object&gt; map = (Map&lt;String, Object&gt;) e.get(i); translationValues.put(String.valueOf(map.get(\"language\")), map.get(\"value\")); } values.addBundleValue(key, bundleClass, translationValues); iI18nService.updateBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . REST request . The request to execute is the following: localhost:33333/i18n/bundle/update . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/update | Indicates the request mapping class | . The request types can only be PUT and the request body has to have the following structure: . | Element | Meaning | . | key | Indicates the key of the value to be translated. | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | bundleValues | Indicates the values of the translation to be modified. | . Body request: . { \"filter\":{ \"key\": \"EMAIL\" }, \"data\": { \"bundleClass\": \"i18n.bundle\", \"bundleValues\": [ { \"language\":\"es_ES\", \"value\":\"ejemplo@ejemplo.com\" }, { \"language\":\"en_US\", \"value\":\"example@example.com\" }, { \"language\":\"gl_ES\", \"value\":\"exemplo@exemplo.com\" } ] } } . Insert bundle values . The method to update the bundle values explained in the previous point also allows creating a new value in the case of the specified value does not exist in the database. DatabaseI18nEngine.java . Object key = this.getBundleValueKey(filter); if (key != null) { // update filter.put(this.bundleValuesKeyColumn, key); this.daoBundleValues.update(hValues, filter); } else { // insert hValues.putAll(filter); this.daoBundleValues.insert(hValues); } . Delete bundle values . To delete the bundle values we create a method that receives the bundle class and the key of the bundle values. right_panel_open I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.DeleteParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/delete\", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE) public void deleteBundleValues(@RequestBody DeleteParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getFilter().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); values.addBundleValue(key, bundleClass, null); iI18nService.deleteBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . The request to execute is the following: localhost:33333/i18n/bundle/delete . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/delete | Indicates the request mapping class | . The request types can only be DELETE and the request body has to have the following structure: . | Element | Meaning | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | key | Indicates the key of the value to be translated. | . Body Request . { \"filter\":{ \"bundleClass\": \"i18n.bundle\", \"key\": \"EMAIL\" } } . ",
    "url": "/docs/v1/basics/i18n/#uses-of-i18n-rest-controller",
    
    "relUrl": "/basics/i18n/#uses-of-i18n-rest-controller"
  },"30": {
    "doc": "I18N System",
    "title": "I18N System",
    "content": "Table of Contents . | Introduction | Prerequisites | Configuring internationalization service in Ontimize Boot . | DB configuration | Add Permissions | Server configuration | Creation of DAO files | Add I18n Rest Controller | . | Testing the i18n services | Uses of I18n Rest Controller . | Query bundle values | Update bundle values | Insert bundle values | Delete bundle values | . | . ",
    "url": "/docs/v1/basics/i18n/",
    
    "relUrl": "/basics/i18n/"
  },"31": {
    "doc": "LDAP Security",
    "title": "Introduction",
    "content": "The Lightweight Directory Access Protocol (LDAP) is an open protocol for accessing a company&#8217;s information services. Typically, this protocol is used to provide all company users with an easy way to use all services that require access credentials with a single username and password. ",
    "url": "/docs/v1/basics/ldap/#introduction",
    
    "relUrl": "/basics/ldap/#introduction"
  },"32": {
    "doc": "LDAP Security",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-ldap-login-1.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-ldap-login-1.x.x . ",
    "url": "/docs/v1/basics/ldap/#prerequisites",
    
    "relUrl": "/basics/ldap/#prerequisites"
  },"33": {
    "doc": "LDAP Security",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v1/basics/ldap/#steps",
    
    "relUrl": "/basics/ldap/#steps"
  },"34": {
    "doc": "LDAP Security",
    "title": "Database",
    "content": "Add a new user . With the database started, we create a new user with the same username that we have registered in the domain. When we try to login we need to use the password of the domain, not the password that inserts into the database. Then, we need to bind this new user with an existing role. INSERT INTO TUSER (USER_, PASSWORD, NAME, SURNAME, EMAIL, NIF, USERBLOCKED, LASTPASSWORDUPDATE, FIRSTLOGIN) VALUES('domain.username', 'somepassword', 'Name', 'Surname', 'Email', 'Nif', NULL, NULL, NULL) . INSERT INTO TUSER_ROLE (ID_ROLENAME,USER_) VALUES (0,'domain.username'); . ",
    "url": "/docs/v1/basics/ldap/#database",
    
    "relUrl": "/basics/ldap/#database"
  },"35": {
    "doc": "LDAP Security",
    "title": "Autoconfigurators",
    "content": "Add LDAP autoconfigurators . right_panel_open LdapError.java . package com.ontimize.projectwiki.security; public interface LdapError { public static final String NO_LDAP_CONNECTION = \"NO_CONNECT_TO_LDAP\"; public static final String ERROR_SEARCHING_IN_LDAP = \"ERROR_SEARCHING_IN_LDAP\"; public static final String ERROR_LOGIN_LDAP = \"LOGINEXCEPTION_WITH_LDAP\"; public static final String ERROR_IO_LDAP = \"IOEXCEPTION_WITH_LDAP\"; public static final String EMPTY_LDAP_HOST = \"HOST_CANNOT_BE_EMPTY\"; public static final String EMPTY_LDAP_USER = \"USER_CANNOT_BE_EMPTY\"; public static final String EMPTY_LDAP_PASSWORD = \"PASSWORD_CANNOT_BE_EMPTY\";; public static final String LDAP_AUTH_USER_PASS_NOT_VALID = \"LDAP_CREDENTIALS_NOT_VALID\"; } . LdapAuthenticationMechanism.java . package com.ontimize.projectwiki.security; import java.io.IOException; import java.io.UnsupportedEncodingException; import java.util.Hashtable; import java.util.StringTokenizer; import javax.naming.Context; import javax.naming.NamingException; import javax.naming.directory.DirContext; import javax.naming.directory.InitialDirContext; import javax.security.auth.login.LoginException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import com.ontimize.jee.server.security.authentication.ldap.LdapError; import org.aspectj.weaver.Utils; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.codec.Base64; import org.springframework.stereotype.Component; import com.ontimize.jee.server.security.authentication.AuthenticationResult; import com.ontimize.jee.server.security.authentication.IAuthenticationMechanism; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationProvider; @Component public class LdapAuthenticationMechanism implements IAuthenticationMechanism { private static final Logger LOGGER = LoggerFactory.getLogger(LdapAuthenticationMechanism.class); private String credentialsCharset = \"UTF-8\"; @Value(\"${ldap.host}\") private String ldapHost; @Value(\"${ldap.port}\") private int ldapPort; @Value(\"${ldap.loginType}\") private String loginType; @Value(\"${ldap.bind.dn}\") private String ldapBindDn; @Value(\"${ldap.domain}\") private String ldapDomain; @Value(\"${ldap.base.dn}\") private String ldapBaseDn; @Override public AuthenticationResult authenticate(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationManager authenticationManager, final UserDetailsService userDetailsService) { try { final String header = request.getHeader(\"Authorization\"); if ((header == null) || !header.startsWith(\"Basic \")) { return null; } final String[] tokens = this.extractAndDecodeHeader(header, request); assert tokens.length == 2; final String username = tokens[0]; final String password = tokens[1]; LdapAuthenticationMechanism.LOGGER.trace(\"Validating access for user : '{}'\", username); DirContext dirContext = null; if (loginType.equals(\"DN\")) { String userDn = \"uid=\" + username + \",\" + ldapBindDn; dirContext = connect(userDn, password, ldapHost, ldapPort, null, false); } else if (loginType.equals(\"simple\")) { dirContext = connect(username, password, ldapHost, ldapPort, ldapDomain, false); } if (dirContext != null) { return new AuthenticationResult(true, new UsernamePasswordAuthenticationToken(username, OntimizeAuthenticationProvider.NO_AUTHENTICATION_TOKEN)); } else { LOGGER.error(\"System authentication failed: no connect to LDAP\"); throw new BadCredentialsException(LdapError.NO_LDAP_CONNECTION.toString()); } } catch (NamingException e) { LOGGER.error(\"System authentication failed: NamingException searching into server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_SEARCHING_IN_LDAP.toString()); } catch (LoginException e) { LOGGER.error(\"System authentication failed: LoginException with server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_LOGIN_LDAP.toString()); } catch (IOException e) { LOGGER.error(\"System authentication failed: IOException with server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_IO_LDAP.toString()); } } public static synchronized DirContext connect(final String user, final String password, final String hosts, final int port, final String adddomain, boolean ssl) throws NamingException, java.io.IOException, LoginException { if ((hosts == null) || (hosts.length() == 0)) { LOGGER.error(\"LDAP host cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_HOST.toString()); } StringTokenizer st = new StringTokenizer(hosts, \";\"); while (st.hasMoreTokens()) { String host = st.nextToken(); return _connect(user, password, host, port, adddomain, ssl); } return null; } private static synchronized DirContext _connect(final String user, final String password, final String host, final int port, final String adddomain, boolean ssl) throws NamingException, java.io.IOException, LoginException { Hashtable&lt;String, String&gt; props = new Hashtable&lt;&gt;(); if ((user == null) || (user.length() == 0)) { LOGGER.error(\"user cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_USER.toString()); } if ((password == null) || (password.length() == 0)) { LOGGER.error(\"password cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_PASSWORD.toString()); } props.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\"); props.put(Context.PROVIDER_URL, \"ldap://\" + host + \":\" + port); props.put(Context.SECURITY_AUTHENTICATION, \"simple\"); if (adddomain != null) { props.put(Context.SECURITY_PRINCIPAL, user + \"@\" + adddomain); } else { props.put(Context.SECURITY_PRINCIPAL, user); } props.put(Context.SECURITY_CREDENTIALS, password); if (ssl) { props.put(Context.SECURITY_PROTOCOL, \"ssl\"); } props.put(Context.REFERRAL, \"follow\"); DirContext ctx = null; try { ctx = new InitialDirContext(props); LOGGER.info(\"Authentication sucessfully in LDAP\"); } catch (Exception e) { LOGGER.error(\"System authentication failed: wrong user and/or pass in LDAP\"); throw new BadCredentialsException(LdapError.LDAP_AUTH_USER_PASS_NOT_VALID.toString()); } return ctx; } private String[] extractAndDecodeHeader(final String header, final HttpServletRequest request) { try { final byte[] base64Token = header.substring(6).getBytes(\"UTF-8\"); byte[] decoded; decoded = Base64.decode(base64Token); final String token = new String(decoded, this.getCredentialsCharset(request)); final int delim = token.indexOf(':'); if (delim == -1) { throw new BadCredentialsException(\"Invalid basic authentication token\"); } return new String[] { token.substring(0, delim), token.substring(delim + 1) }; } catch (IllegalArgumentException | UnsupportedEncodingException error) { throw new BadCredentialsException(\"Failed to decode basic authentication token\", error); } } protected String getCredentialsCharset(final HttpServletRequest httpRequest) { return this.credentialsCharset; } } . CustomSecurityAutoConfiguration.java . package com.ontimize.projectwiki.security; import java.util.ArrayList; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import com.ontimize.boot.autoconfigure.security.DefaultSecurityAutoConfiguration; import com.ontimize.jee.server.security.authentication.IAuthenticationMechanism; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationFilter; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationSuccessHandler; @Configuration @EnableWebSecurity @EnableAutoConfiguration @ConditionalOnProperty(name = \"ontimize.security.mode\", havingValue = \"ldap\", matchIfMissing = false) public class CustomSecurityAutoConfiguration extends DefaultSecurityAutoConfiguration { @Value(\"${ontimize.security.servicePath:/**}\") private String servicePath; @Value(\"${ontimize.security.ignorePaths:}\") private String[] ignorePaths; @Override public OntimizeAuthenticationFilter preAuthFilterOntimize() throws Exception { OntimizeAuthenticationFilter filter = new OntimizeAuthenticationFilter(this.servicePath); filter.setUserDetailsService(this.userDetailsService()); filter.setUserCache(this.userCache()); filter.setTokenGenerator(this.tokenGenerator()); filter.setGenerateJwtHeader(true); filter.setAuthenticationManager(this.authenticationManager()); filter.setAuthenticationEntryPoint(this.authenticationEntryPoint()); filter.setAuthenticationMechanismList(new ArrayList&lt;&gt;()); filter.getAuthenticationMechanismList().add(this.jwtAuthenticator()); filter.getAuthenticationMechanismList().add(this.ldapAuthenticator()); filter.setAuthenticationSuccessHandler(new OntimizeAuthenticationSuccessHandler()); filter.afterPropertiesSet(); return filter; } @Bean public IAuthenticationMechanism ldapAuthenticator() { return new LdapAuthenticationMechanism(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | security . | CustomSecurityAutoConfiguration.java | LdapAuthenticationMechanism.java | LdapError.java | . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v1/basics/ldap/#autoconfigurators",
    
    "relUrl": "/basics/ldap/#autoconfigurators"
  },"36": {
    "doc": "LDAP Security",
    "title": "Modify application.yml",
    "content": "Add LDAP properties . In the application.yml we need to change the ontimize security mode to ldap and add the following properties (More information in this link): . right_panel_open application.yml . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 login-type: simple bind.dn: base.dn: domain: yourdomain.com . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | security . | CustomSecurityAutoConfiguration.java | LdapAuthenticationMechanism.java | LdapError.java | . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v1/basics/ldap/#modify-applicationyml",
    
    "relUrl": "/basics/ldap/#modify-applicationyml"
  },"37": {
    "doc": "LDAP Security",
    "title": "LDAP Security",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Database . | Add a new user | . | Autoconfigurators . | Add LDAP autoconfigurators | . | Modify application.yml . | Add LDAP properties | . | . | . ",
    "url": "/docs/v1/basics/ldap/",
    
    "relUrl": "/basics/ldap/"
  },"38": {
    "doc": "Mail System",
    "title": "Introduction",
    "content": "Ontimize Boot is a framework that allows you to simplify the configuration of a project made with Ontimize EE, in a fast and efficient way. The email system allows you to send mail from the server with a simple configuration. ",
    "url": "/docs/v1/basics/mail/#introduction",
    
    "relUrl": "/basics/mail/#introduction"
  },"39": {
    "doc": "Mail System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail-1.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail-1.x.x . ",
    "url": "/docs/v1/basics/mail/#prerequisites",
    
    "relUrl": "/basics/mail/#prerequisites"
  },"40": {
    "doc": "Mail System",
    "title": "Configuring email service with Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. At the end of the tutorial, we will even be testing that our mailing system is fully operational and functional. DB configuration . If the configuration table does not exist in the DB, it can be created with the following command: . Sentencia SQL (HSQL) . CREATE TABLE TSETTING(ID_SETTING INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,SETTING_KEY LONGVARCHAR,SETTING_VALUE LONGVARCHAR,SETTING_COMMENTLONGVARCHAR); . We fill in this table with the data that applies to each specific mail server, in this example, we will use the following: . | SETTING_KEY | SETTING_VALUE | SETTING_COMMENT | . | mail_host | localhost | Server host | . | mail_port | 2525 | Email server port | . | mail_protocol | smtp | Mailing protocol | . | mail_user | my.mail@example.com | User for sending | . | mail_password | my_password | Mail server password | . | mail-encoding | UTF-8 | Encoding of mails | . | mail_properties | mail.smtp.auth:true; mail.smtp.starttls.enable:true; | Mail properties | . Sentencia SQL (HSQL) . INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_host', 'localhost', 'Server host'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_port', '2525', 'Email server port'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_protocol', 'smtp', 'Mailing protocol'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_user', 'my.mail@example.com', 'User for sending'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_password', 'my_password', 'Mail server password'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_encoding', 'UTF-8', 'Encoding of mails'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_properties', 'mail.smtp.auth:true;mail.smtp.starttls.enable:true;', 'Mail properties'); . The implementation interface contains multiple methods, to which we must give permissions, if our application has permissions: . Sentencia SQL (HSQL) . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.mail.MailService/sendMail'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.mail.MailService/sendMailWithoutAttach'); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.common.services.mail.IMailService/sendMail')); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.common.services.mail.IMailService/sendMailWithoutAttach')); . Adding dependencies . Now we need to add the correct dependency in the correct pom.xml: . right_panel_open ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Server Configuration . To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: mail: ref-repository: OCSettingsDao filter-column-name: SETTING_KEY value-column-name: SETTING_VALUE query-id: default filter-column-value-encoding: mail_encoding filter-column-value-host: mail_host filter-column-value-port: mail_port filter-column-value-protocol: mail_protocol filter-column-value-user: mail_user filter-column-value-password: mail_password filter-column-value-java-mail-properties: mail_properties engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the refRepository: OCSettingsDao attribute (in this case, OCSettingsDao), which can be seen in the table TSETTING attribute (for this example, TSETTING) of the *.xml configuration file of the bean (OCSettingsDao.xml). The keys would be stored in the SETTING_KEY column, the values in the SETTING_VALUE column and the rest of the attributes map the keys that exist in the database. In addition, the packet that will be scanned to look for the implementation of the email service is indicated. Creation of DAO files . Let&#8217;s create a DAO (Data Access Object) in the projectwiki-model module to use as a model of this database table. The DAO is composed by 2 files, a file with extension *.xml and a *.java file. right_panel_open In our *.xml file we will indicate the database table for which DAO belongs, the data source from which we collect the information (e.g. the database connection that contains this table) and the schema to which the table belongs. OCSettingsDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSETTING\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_SETTING&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java file we indicate that it is a repository whose name will be OCSettingsDao, through the annotation @Repository. With the annotation @Lazy, we will indicate that the load is delayed until it is completely necessary (improving in that way the performance), and the annotation @ConfigurationFile allows us to configure this DAO using the XML file and an additional file where some common characteristics to several DAOs can be stored. like the scheme to which they belong. OCSettingsDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OCSettingsDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCSettingsDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCSettingsDao extends OntimizeJdbcDaoSupport { public OCSettingsDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Implementation in an existing service . To use this service in another service (e.g. to send a mail when a new record is created), just add a variable of type com.ontimize.jee.common.services.mail.IMailService and annotate it with @Autowired. right_panel_open ... import com.ontimize.jee.common.services.mail.IMailService; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private IMailService mailService; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { EntityResult toRet = this.daoHelper.insert(this.candidateDao, attrMap); if ((toRet.getCode() != EntityResult.OPERATION_WRONG)) { Runnable runnable = () -&gt; { List&lt;String&gt; receiverList = new ArrayList&lt;String&gt;(); receiverList.add(\"receiver@example.com\"); StringBuilder builder = new StringBuilder(); builder.append(\"Created new user.\"); try { this.mailService.sendMailWithoutAttach(\"my.mail@example.com\", receiverList, \"New candidate\", builder.toString()); } catch (OntimizeJEEException e) { } }; DelegatingSecurityContextRunnable wrappedRunnable = new DelegatingSecurityContextRunnable(runnable); new Thread(wrappedRunnable).start(); } return toRet; } ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . For space reasons, the entire files are not included, only the code snippets related to the tutorial. The &#8230; in the code snippets indicate that there may be unrelated code before or after them. ",
    "url": "/docs/v1/basics/mail/#configuring-email-service-with-ontimize-boot",
    
    "relUrl": "/basics/mail/#configuring-email-service-with-ontimize-boot"
  },"41": {
    "doc": "Mail System",
    "title": "Checking the sending of mails",
    "content": "In order to check that the created service is indeed sending mails, we will use an external service called FakeSMTP, is a free Fake SMTP Server with GUI for testing emails in applications easily. To do this, we enter this link and clone the repository it indicates into the workspace where we have our project. We launch the DB and the server. Next, open a console and move to the path where FakeSMTP was downloaded: ...\\FakeSMTP&gt; mvn package-Dmaven.test.skip ...\\FakeSMTP&gt; cd target ...\\FakeSMTP\\target&gt; java -jar fakeSMTP-2.1-SNAPSHOT.jar -s -p 2525 . | Command | Meaning | 34 | . | fakeSMTP-VERSION.jar | Downloaded version. | &#160; | . | -s | Launch the server. | &#160; | . | - p 2525 | Launch the application on the port indicated. | &#160; | . Now we can use an application like Postman to execute different REST requests to our project. Use REST request . The requests contains the following structure: localhost:33333/candidates/candidate . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /candidates | Indicates the service to be queried | . | /candidate | Indicates the DAO that will access that service | . The request types can only be GET, POST, PUT, DELETE. Below are examples of request for candidates (CANDIDATES). The authorization used for these requests is authorization of the type BASIC. In both cases, the access must be done with a user and password example: . User: demo Password: demouser . | Request type | Query | URL | Service method | Body request | . | POST | insert | localhost:33333/candidates/candidate | candidateInsert | Example below | . Body request: . { \"data\": { \"PHONE\": \"555-444-8888\", \"BIRTHDAY\": 788224700000, \"SURNAME\": \"Wilson\", \"EMAIL\": \"wwiilsoon@example.org\", \"SPECIALTIES\": \"C#\", \"NAME\": \"William\", \"DNI\": \"88643946Z\" }, \"sqltypes\": { \"SPECIALTIES\": 12, \"LINKEDIN\": 12, \"PHONE\": 12, \"EXPERIENCE_LEVEL\": 4, \"STATUS\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"DNI\": 12, \"ID\": 4, \"ORIGIN\": 4, \"EDUCATION\": 4, \"COMMENT\": 12, \"PROFILE\": 4, \"SURNAME\": 12, \"NAME\": 12, \"BIRTHDAY\": 91 } } . ",
    "url": "/docs/v1/basics/mail/#checking-the-sending-of-mails",
    
    "relUrl": "/basics/mail/#checking-the-sending-of-mails"
  },"42": {
    "doc": "Mail System",
    "title": "Mail System",
    "content": "Table of Contents . | Introduction | Prerequisites | Configuring email service with Ontimize Boot . | DB configuration | Adding dependencies | Server Configuration | Creation of DAO files | Implementation in an existing service | . | Checking the sending of mails . | Use REST request | . | . ",
    "url": "/docs/v1/basics/mail/",
    
    "relUrl": "/basics/mail/"
  },"43": {
    "doc": "Security System",
    "title": "Introduction",
    "content": "Ontimize security allows you to set permissions to each role that you assign to a specific user, so that different users can access (or not) the project services and methods. ",
    "url": "/docs/v1/basics/security/#introduction",
    
    "relUrl": "/basics/security/#introduction"
  },"44": {
    "doc": "Security System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security-1.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security-1.x.x . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v1/basics/security/#prerequisites",
    
    "relUrl": "/basics/security/#prerequisites"
  },"45": {
    "doc": "Security System",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v1/basics/security/#steps",
    
    "relUrl": "/basics/security/#steps"
  },"46": {
    "doc": "Security System",
    "title": "Add new profile and user",
    "content": "We will add the following elements to the database: . | New user | . INSERT INTO TUSER VALUES('candidate','candidate','candidate','candidate',NULL,'99999999R',NULL,'2020-07-03 11:50:40.665000',NULL) . | New user role | . INSERT INTO TROLE VALUES(1,'candidate','&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;security&gt;&lt;/security&gt;') . | Relationship between the new user and the new role | . INSERT INTO TUSER_ROLE VALUES(1,1,'candidate') . ",
    "url": "/docs/v1/basics/security/#add-new-profile-and-user",
    
    "relUrl": "/basics/security/#add-new-profile-and-user"
  },"47": {
    "doc": "Security System",
    "title": "Modify the service to add security",
    "content": "In the projectwiki-boot module we will add the annotation @EnableAspectJAutoProxy(proxyTargetClass = false) to the ServerApplication.java class and to each service method the @Secured({ PermissionsProviderSecured.SECURED }) annotation. right_panel_open ServerApplication.java . package com.ontimize.projectwiki; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.EnableAspectJAutoProxy; @SpringBootApplication @EnableAspectJAutoProxy(proxyTargetClass = false) public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } . CustomerService.java . package com.ontimize.projectwiki.model.core.service; . import org.springframework.security.access.annotation.Secured; . import com.ontimize.jee.common.security.PermissionsProviderSecured; . public class CandidateService implements ICandidateService { . @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.candidateDao, keyMap, attrList); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.candidateDao, attrMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.candidateDao, attrMap, keyMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.candidateDao, keyMap); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v1/basics/security/#modify-the-service-to-add-security",
    
    "relUrl": "/basics/security/#modify-the-service-to-add-security"
  },"48": {
    "doc": "Security System",
    "title": "Add permissions for methods",
    "content": "Once the methods have been noted, it is necessary to add the service and the method that we have noted to the table of the DB that stores those elements and to the table that indicates the methods for which the role has permission. INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.CandidateService/candidateQuery') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.CandidateService/candidateInsert') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.CandidateService/candidateUpdate') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.CandidateService/candidateDelete') INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,1) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,2) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,3) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,4) . If we try to make requests through Postman to the service of CandidateService, changing the authentication by the user candidate and password candidate, it will give an error, since the user candidate does not belong to the role admin which is the only role that has permissions to make these queries. ",
    "url": "/docs/v1/basics/security/#add-permissions-for-methods",
    
    "relUrl": "/basics/security/#add-permissions-for-methods"
  },"49": {
    "doc": "Security System",
    "title": "Security System",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add new profile and user | Modify the service to add security | Add permissions for methods | . | . ",
    "url": "/docs/v1/basics/security/",
    
    "relUrl": "/basics/security/"
  },"50": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": ". This page allows you to know how to start developing an application with Ontimize Boot in a simple way. This project includes an HSQLDB database already prepared to start the application. It can be replaced. ",
    "url": "/docs/v1/getting_started/#getting-started",
    
    "relUrl": "/getting_started/#getting-started"
  },"51": {
    "doc": "Getting started",
    "title": "Create application from archetype",
    "content": "Open a console and type the next command: . mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate -DgroupId=YOUR_GROUP_ID -DartifactId=YOUR_ARTIFACT_ID -Dversion=YOUR_VERSION -Dpackage=YOUR.GROUPID.ARTIFACTID -DarchetypeGroupId=com.ontimize -DarchetypeArtifactId=ontimize-boot-archetype -DarchetypeVersion=1.0.0 -DinteractiveMode=false -DarchetypeCatalog=https://artifactory.imatia.com/public-artifactory/ontimize-archetypes/archetype-catalog.xml . Command explanation . | Argument | Meaning | . | mvn | Maven CLI | . | org.apache.maven.plugins:maven-archetype-plugin:2.4:generate | Use the Maven Archetype Plugin (v2.4) for create a new project from an archetype | . | -DgroupId=YOUR_GROUP_ID | Your project groupId | . | -DartifactId=YOUR_ARTIFACT_ID | Your project artifactId | . | -Dversion=YOUR_VERSION | Your project version | . | -Dpackage=YOUR.GROUPID.ARTIFACTID | Sets the package on which the project will be based (e.g.: In our examples, this will be com.ontimize.projectwiki) | . | -DarchetypeGroupId=com.ontimize | groupId of the Ontimize Boot archetype | . | -DarchetypeArtifactId=ontimize-boot-archetype | artifactId of the Ontimize Boot archetype | . | -DarchetypeVersion=1.0.0 | version of the Ontimize Boot archetype | . | -DinteractiveMode=false | Forced to skip interactive mode and use the paramaters in the command | . | -DarchetypeCatalog=https://artifactory.imatia.com/public-artifactory/ontimize-archetypes/archetype-catalog.xml | URL where you can find the archetype catalog | . ",
    "url": "/docs/v1/getting_started/#create-application-from-archetype",
    
    "relUrl": "/getting_started/#create-application-from-archetype"
  },"52": {
    "doc": "Getting started",
    "title": "Start the project",
    "content": "right_panel_open To start the project, it is necessary to start both the database and the server. The first thing to do is to execute the mvn install command inside the project’s root folder . $ cd app /app$ mvn install . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the database . right_panel_open Next, we navigate to the model folder to start the HSQLDB database . /app$ cd model /app/model$ mvn exec:java -Prun_database . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the server . right_panel_open To start the server, open a new console in the root folder of the project, navigate to boot folder and type the following command . /app$ cd boot /app/boot$ mvn spring-boot:run . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v1/getting_started/#start-the-project",
    
    "relUrl": "/getting_started/#start-the-project"
  },"53": {
    "doc": "Getting started",
    "title": "Test the application",
    "content": "You can check if the application is working by making a request, for example, to the following address: . http://localhost:33333/users/user?columns=USER_ . Through applications such as Postman or from the browser . In both cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v1/getting_started/#test-the-application",
    
    "relUrl": "/getting_started/#test-the-application"
  },"54": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "Table of Contents . | Getting started . | Create application from archetype . | Command explanation | . | Start the project . | Start the database | Start the server | . | Test the application | . | . ",
    "url": "/docs/v1/getting_started/",
    
    "relUrl": "/getting_started/"
  },"55": {
    "doc": "Home",
    "title": "📜 Ontimize Boot",
    "content": "Ontimize Boot uses Spring Boot technology to further simplify the development of a service or microservice based server, using the API REST communication system. ",
    "url": "/docs/v1/#-ontimize-boot",
    
    "relUrl": "/#-ontimize-boot"
  },"56": {
    "doc": "Home",
    "title": "✍ Use",
    "content": "To start developing an application with Ontimize Boot is very simple, we have an archetype that generates the skeleton of an application in seconds, from which you can develop the application you want. For more information, consult the desired topics in this documentation, using the search box or the side menu. ",
    "url": "/docs/v1/#-use",
    
    "relUrl": "/#-use"
  },"57": {
    "doc": "Home",
    "title": "👁️‍🗨️ Versions and dependencies",
    "content": "All the versions and dependencies of the artifacts contained in this project can be downloaded from Imatia Artifactory, as well as knowing each of its dependencies. ",
    "url": "/docs/v1/#%EF%B8%8F%EF%B8%8F-versions-and-dependencies",
    
    "relUrl": "/#️️-versions-and-dependencies"
  },"58": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/docs/v1/",
    
    "relUrl": "/"
  },"59": {
    "doc": "Introduction",
    "title": "Welcome to the documentation of the backend development framework for building the future",
    "content": ". How to read and use this documentation. In this page you will find the necessary elements to start developing your backend application with Ontimize Boot. Below you will find links to the sections containing the information you need for a quick introduction to Ontimize Boot development. ",
    "url": "/docs/v1/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future",
    
    "relUrl": "/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future"
  },"60": {
    "doc": "Introduction",
    "title": "Sections",
    "content": "| Prerequisites | Check you meet minimum requirements to start. | . | Getting started | First contact with an Ontimize Boot app. Generate an app is easy with an archetype. | . ",
    "url": "/docs/v1/introduction/#sections",
    
    "relUrl": "/introduction/#sections"
  },"61": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/docs/v1/introduction/",
    
    "relUrl": "/introduction/"
  },"62": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": ". ",
    "url": "/docs/v1/prerequisites/#prerequisites",
    
    "relUrl": "/prerequisites/#prerequisites"
  },"63": {
    "doc": "Prerequisites",
    "title": "Java JDK 8",
    "content": "Make sure you have the JDK version of Java 8 installed. There are many different builds, but perhaps the most common is Adoptium, which you can download from the following link (add your operating system and your computer’s architecture): Adoptium JDK . NOTE: Check the option to set the JAVA_HOME variable. Following installation, make sure you have correctly installed Java JDK 8 by invoking the following commands in the command-line java -version . NOTE: On the Mac, the command-line is available via the Terminal &gt;application. On the PC, it’s available as Command Prompt. The result should look similar to . $java -version openjdk version \"1.8.0_XXX\" OpenJDK Runtime Enviroment (Temurin)(build 1.8.0_XXX-XXX) OpenJDK 64-Bit Server VM (Temurin)(build 1.8.0_XXX-XXX, mixed mode) . ",
    "url": "/docs/v1/prerequisites/#java-jdk-8",
    
    "relUrl": "/prerequisites/#java-jdk-8"
  },"64": {
    "doc": "Prerequisites",
    "title": "Maven 3.6.0 or newer",
    "content": "Maven is required for downloading and using the Ontimize Boot application archetype, managing the libraries contained in the framework and even for running the application. You can download Maven from its official project page at the following link: Maven . Follow the installation steps indicated in the official web site . To check the installation, run the following command at a command prompt mvn -v. The result should look similar to: . $mvn -v Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae) Maven home: C:\\apache-maven-3.9.6 Java version: 1.8.0_392, vendor: Temurin, runtime: C:\\Program Files\\Eclipse Adoptium\\jdk-8-0-392.8-hotspot\\jre Default locale: es_ES, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\" . ",
    "url": "/docs/v1/prerequisites/#maven-360-or-newer",
    
    "relUrl": "/prerequisites/#maven-360-or-newer"
  },"65": {
    "doc": "Prerequisites",
    "title": "IDE",
    "content": "It is not absolutely necessary to use an IDE, but it is highly recommended and helps the development of the application. We recommend the use of IntelliJ (in its Community or Ultimate version), Eclipse (in its Enterprise Java and Web Developers version) or Visual Studio Code. ",
    "url": "/docs/v1/prerequisites/#ide",
    
    "relUrl": "/prerequisites/#ide"
  },"66": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": " ",
    "url": "/docs/v1/prerequisites/",
    
    "relUrl": "/prerequisites/"
  }
}
