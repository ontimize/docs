{"0": {
    "doc": "Basics",
    "title": "Basics",
    "content": "This section pretends to show the basic elements for the development of an application using Ontimize Boot . | Autoconfigurators | Charts on-demand | Complex Queries | Export data | Migration from Ontimize 1.x.x to 3.x.x | Multiple Datasources | Understanding application.yml file | . ",
    "url": "/docs/v3/basics/",
    
    "relUrl": "/basics/"
  },"1": {
    "doc": "Understanding application.yml",
    "title": "Understanding application.yml",
    "content": " ",
    "url": "/docs/v3/basics/applicationyml/#understanding-applicationyml",
    
    "relUrl": "/basics/applicationyml/#understanding-applicationyml"
  },"2": {
    "doc": "Understanding application.yml",
    "title": "Introduction",
    "content": "A YAML file, with extension *.yml or .yaml , is a human readable file in which we can write data pairs in a suitable way by combinations of lists, maps and simple data. Another of the most important features of these files is the indentation. It is important to write these indented elements correctly, since if they are badly indented, they cannot be parsed correctly. ",
    "url": "/docs/v3/basics/applicationyml/#introduction",
    
    "relUrl": "/basics/applicationyml/#introduction"
  },"3": {
    "doc": "Understanding application.yml",
    "title": "Application.yml file description",
    "content": "Endpoints . They allow you to monitor and interact with your application. Integrated endpoints are available, but adding custom endpoints is also allowed.  . | endpoints: api: . | Attribute | Values | Meaning | . | enabled | true, false | Active Spring Boot endpoints. | . Example . endpoints: api: enabled: true . | . Logging . | logging: level: . | Attribute | Values | Meaning | . | root | String | Default server log level set to INFO level | . Example . logging: level: root: info . | . CORS . Mechanism that allows restricted resources to be requested between domains. | ontimize:corsfilter: . | Attribute | Values | Meaning | . | enabled | true, false | CORS filter enabled. | . | ontimize:globalcors: . CORS global configuration . | Attribute | Values | Meaning | . | cors-configurations | String | Configuration for this entrypoint | . | ontimize:globalcors:cors-configurations: . | Attribute | Values | Meaning | . | allowed-origins | String | Allow different origins | . | allowed-headers | String | Allow headers | . | exposed-headers | [“X-Auth-Token”,”Content-disposition”,”X-Requested-With”] | Exposed headers | . | allowed-methods | GET, POST, PUT, DELETE, OPTIONS | Allow HTTP methods | . Example . ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE . | . | . JDBC . | ontimize:jdbc: . | Attribute | Values | Meaning | . | name-convention | upper, lower, database | Convention of data columns name | . | sqlhandler | postgres, mysql, oracle, oracle12, sqlserver, hsqldb | SQL handler | . | ontimize:jdbc:sql-condition-processor: . | Attribute | Values | Meaning | . | upper-string | true, false | Use of uppercase | . | upper-like | true, false | String comparision using LIKE in uppercase | . Example . jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true . | . | . Security . | ontimize:security . | Attribute | Values | Meaning | . | mode | default | Default security mode | . | ontimize:security:role-information-service: . Configure columns for user roles . | Attribute | Values | Meaning | . | role-repository | String | Repository which store the user role | . | role-name-column | String | Name of the column which store the role name | . | server-permission-query-id | String | Query ID to identify the query of server permissions | . | server-permission-name-column | String | Name of the columns which contains the name of the server permission | . | client-permission-query-id | String | Query ID for client permissions | . | client-permission-column | String | Name of the columns which contains the name of the client permission | . | ontimize:security:user-information-service: . Information about the user . | Attribute | Values | Meaning | . | user-repository | String | Repository which stores the users of the application | . | user-login-column | String | Name of the column with the username | . | user-password-column | String | Name of the column with the password | . | query-id | String | Query identififer for login | . | other-data | List | Other query columns | . | ontimize:security:user-role-information-service: . Repository information about linking users and roles . | Attribute | Values | Meaning | . | user-role-repository | String | Repository name | . | query-id | String | Query identifier | . | role-login-column | String | Column which stores the user | . | role-name-column | String | Column which stores the role name | . | . Example . security: mode: default role-information-iervice: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-ermission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME . | . Server . | ontimize:server: . | Attribute | Values | Meaning | . | port | int | Server port | . | ontimize:server:servlet: . | Attribute | Values | Meaning | . | context-path | String | customized servlet path | . | ontimize:server:tomcat: . | Attribute | Values | Meaning | . | uri-encoding | String | URI encoding | . | ontimize:server:compression: . | Attribute | Values | Meaning | . | enabled | true, false | Enable data compression | . | mime-types | String | Mime types | . | . Example . server: servlet: context-path: /custom/path port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml . | . Spring . | ontimize:spring:datasource: . Data source (DB connection) . | Attribute | Values | Meaning | . | driver-class-name | String | JDBC driver | . | jdbc-url | String | Connection URl | . | username | String | DB username | . | password | String | DB username password | . | initial-size | int | Initial size | . | test-on-borrow | true, false | Validation | . | ontimize:spring:main: . | Attribute | Values | Meaning | . | banner-mode | on, off | Remove the startup banner in the console | . | ontimize:spring:session: . | Attribute | Values | Meaning | . | store-type | String | Save the session in spring | . | ontimize:spring:resources: . | Attribute | Values | Meaning | . | static-locations | String | Path for satic resources | . | ontimize:spring:autoconfigure: . | Attribute | Values | Meaning | . | exclude | String | Delete Spring Boot auto-configuration files | . | . Example . spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration . ",
    "url": "/docs/v3/basics/applicationyml/#applicationyml-file-description",
    
    "relUrl": "/basics/applicationyml/#applicationyml-file-description"
  },"4": {
    "doc": "Understanding application.yml",
    "title": "Complete Example",
    "content": "endpoints: api: enabled: true logging: level: root: info ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true security: mode: default role-information-service: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME server: port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . ",
    "url": "/docs/v3/basics/applicationyml/#complete-example",
    
    "relUrl": "/basics/applicationyml/#complete-example"
  },"5": {
    "doc": "Understanding application.yml",
    "title": "Understanding application.yml",
    "content": "Table of Contents . | Understanding application.yml . | Introduction | Application.yml file description . | Endpoints | Logging | CORS | JDBC | Security | Server | Spring | . | Complete Example | . | . ",
    "url": "/docs/v3/basics/applicationyml/",
    
    "relUrl": "/basics/applicationyml/"
  },"6": {
    "doc": "Autoconfigurators",
    "title": "Autoconfigurators",
    "content": "Autoconfigurators are an easy way to indicate common elements that need minimal customization in applications, such as database connection. These configurations are used within the application.yml file located inside the boot folder. ",
    "url": "/docs/v3/basics/autoconfigurators/#autoconfigurators",
    
    "relUrl": "/basics/autoconfigurators/#autoconfigurators"
  },"7": {
    "doc": "Autoconfigurators",
    "title": "AsyncTask",
    "content": ". | ontimize:asynctask: | . | Attribute | Values | Meaning | . | enable | true | Module loading property | . | engine | database | Indicates the storage engine that will be used for the report system (database for database engine) | . | url | String | The URL base path where the asynchronous tasks service will be exposed | . The configuration of the decoupled tasks system is done by setting up the necessary DAO for that system and annotating the service controller method. To see the configuration, check this link. Example . ontimize: asynctask: enable: true engine: database url: /tasks . ",
    "url": "/docs/v3/basics/autoconfigurators/#asynctask",
    
    "relUrl": "/basics/autoconfigurators/#asynctask"
  },"8": {
    "doc": "Autoconfigurators",
    "title": "DMS",
    "content": ". | ontimize:dms: | . | Attribute | Values | Meaning | . | engine | odms | Indicates the engine that will be used for the DMS system. Ontimize has an implementation of an engine, whose value is odms. | . | base-path | String | The path where the DMS files will be stored | . The configuration of DMS system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: dms: engine: odms base-path: file:/C:/applications/projectwiki/dms . ",
    "url": "/docs/v3/basics/autoconfigurators/#dms",
    
    "relUrl": "/basics/autoconfigurators/#dms"
  },"9": {
    "doc": "Autoconfigurators",
    "title": "SDMS",
    "content": "This module works only for Ontimize Boot version 3.11.0 or above. Actual release version: . | ontimize:sdms: | . | Attribute | Values | Meaning | . | engine | s3 | Indicates that the implementation that handles documents via the Amazon AWS S3 service API will be used. | . The configuration of DMS system is done by setting up the application for that system. To see the configuration, check this link. Example . ontimize: dms: engine: s3 . SDMS - S3 Engine . | ontimize:sdms:s3: | . | Attribute | Values | Meaning | . | access-key | String | Indicates the access-key parameter required to authenticate to the Amazon AWS S3 service API. | . | secret-key | String | Indicates the secret-key parameter required to authenticate to the Amazon AWS S3 service API. | . | bucket | String | Indicates the bucket parameter required to establish the S3 bucket into the SDMS. | . | region | String | Indicates the region parameter required to establish the region where the S3 bucket is located. | . Example . ontimize: dms: access-key: s3 s3: access-key: ${S3_ACCESS_KEY} secret-key: ${S3_SECRET_KEY} bucket: ${S3_BUCKET} region: ${S3_REGION} . ",
    "url": "/docs/v3/basics/autoconfigurators/#sdms",
    
    "relUrl": "/basics/autoconfigurators/#sdms"
  },"10": {
    "doc": "Autoconfigurators",
    "title": "Export",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . | ontimize:export: | . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | extension | String | Specifies the file extension to use. This String will append to the url path as a additional path. | . The configuration of exporting system is done through autoconfigurators and dependencies. To see how to use and configure, check this link. Example . ontimize: export: url: /export enable: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#export",
    
    "relUrl": "/basics/autoconfigurators/#export"
  },"11": {
    "doc": "Autoconfigurators",
    "title": "I18n",
    "content": "ontimize:i18n: . | Attribute | Values | Meaning | . | ref-bundle-repository | String | Name of the DAO containing information about the translation bundles | . | bundle-key-column | String | Column of the database table containing the translation bundle identifier | . | bundle-class-name-column | String | Column of the database table containing the name of the translation bundle class | . | bundle-description-column | String | Column of the database table containing the description of the translation bundle | . | ref-bundle-value-repository | String | Name of the database table containing information about the translations of each translation bundle | . | bundle-value-text-key-column | String | Column of the database table containing the key of a translation | . | bundle-value-key-column | String | Column of the database table containing the key of a translation | . | engine | default | Property to enable the i18n system. Need to have any value, commonly, default. | . The configuration of the I18N system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: i18n: ref-bundle-repository: OCDatabaseBundleDao bundle-key-column: ID_I18N bundle-class-name-column: CLASS_NAME bundle-description-column: I18N_DESCRIPTION ref-bundle-value-repository: OCDatabaseBundleValueDao bundle-value-text-key-column: KEY bundle-value-key-column: ID_I18N_VALUE engine: default . ",
    "url": "/docs/v3/basics/autoconfigurators/#i18n",
    
    "relUrl": "/basics/autoconfigurators/#i18n"
  },"12": {
    "doc": "Autoconfigurators",
    "title": "JDBC",
    "content": ". | ontimize:jdbc: | . | Attribute | Values | Meaning | . | name-convention | upper, lower, database | Indicate the nomenclature of the columns in the DB, in lower case, upper case or as it appears in the database | . | sqlhandler | postgres, mysql, oracle, oracle12, sqlserver, hsqldb | Indicates which SQL statement handler will be used to communicate with the database | . | ontimize:jdbc:sql-condition-processor: | . | Attribute | Values | Meaning | . | upper-string | true, false | Use uppercase strings in WHERE conditions | . | upper-like | true, false | Use uppercase strings in LIKE conditions | . Example . ontimize: jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#jdbc",
    
    "relUrl": "/basics/autoconfigurators/#jdbc"
  },"13": {
    "doc": "Autoconfigurators",
    "title": "LDAP",
    "content": ". | ontimize:security: | . | Attribute | Value | Meaning | . | mode | ldap | Change the system security from default to ldap | . | ldap: | . | Attribute | Values | Meaning | . | active | true, false | Enable or disable ldap security | . | host | IP | Ip host for ldap security | . | port | Number | Port of the host for ldap security | . | login-type | DN, simple | The login type indicates whether a full LDAP string with DN value or will be used or if the username will simply be provided with simple value | . | bind.dn | String | File to populate the LDAP server using a .ldif file | . | base.dn | String | List of base DNs. | . | domain | String | The domain name | . The LDAP security configuration is done through autoconfigurators. To see the settings, check this link. Example . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 login-type: simple bind.dn: base.dn: domain: yourdomain.com . ",
    "url": "/docs/v3/basics/autoconfigurators/#ldap",
    
    "relUrl": "/basics/autoconfigurators/#ldap"
  },"14": {
    "doc": "Autoconfigurators",
    "title": "Mail",
    "content": ". | ontimize:mail: | . | Attribute | Values | Meaning | . | ref-repository | String | Name of the DAO containing the configuration information required for system configuration | . | filter-column-name | String | Name of the column in the database table containing the keys | . | value-column-name | String | Name of the database table column containing the values | . | query-id | String | Name of the DAO query to be executed. By default, is default | . | filter-column-value-encoding | String | Key name of the row in the key column containing the value for mail encoding | . | filter-column-value-host | String | Name of the key in the row of the key column containing the value for the host in the mail service | . | filter-column-value-port | String | Name of the key in the row of the key column containing the value for the port in the mail service | . | filter-column-value-protocol | String | Name of the key in the row of the key column containing the value for the protocol used in the mail service | . | filter-column-value-user | String | Name of the key in the row of the key column containing the value for the user in the mail service | . | filter-column-value-password | String | Name of the key in the row of the key column containing the value for the user password in the mail service | . | filter-column-value-java-mail-properties | String | Name of the key in the row of the key column containing the value for the mail propoerties in the mail service | . | engine | String | Enable or disable mail engine. To enable, have any value int this arribute. By default, use default value | . The configuration of the mail system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: mail: ref-repository: OCSettingsDao filter-column-name: SETTING_KEY value-column-name: SETTING_VALUE query-id: default filter-column-value-encoding: mail_encoding filter-column-value-host: mail_host filter-column-value-port: mail_port filter-column-value-protocol: mail_protocol filter-column-value-user: mail_user filter-column-value-password: mail_password filter-column-value-java-mail-properties: mail_properties engine: default . ",
    "url": "/docs/v3/basics/autoconfigurators/#mail",
    
    "relUrl": "/basics/autoconfigurators/#mail"
  },"15": {
    "doc": "Autoconfigurators",
    "title": "Report",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . | ontimize:report: | . | Attribute | Values | Meaning | . | enable | true | Module loading property | . | engine | database, file | Indicates the engine that will be used for the report system (file for file system engine or database for database engine) | . | base-path | String | The path where the report files will be stored (file system engine only) | . The configuration of the reports system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . Database . ontimize: report: enable: true engine: database . File system . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . ",
    "url": "/docs/v3/basics/autoconfigurators/#report",
    
    "relUrl": "/basics/autoconfigurators/#report"
  },"16": {
    "doc": "Autoconfigurators",
    "title": "REST",
    "content": ". | ontimize:corsfilter: | . | Attribute | Values | Meaning | . | enabled | true, false | Enable or disable CORS filter | . | ontimize:globalcors:cors-configurations Indicates the entrypoint to be configured, with the properties for each one. In general, the entrypoint [/**] is configured entirely. | . | Attribute | Values | Meaning | . | allowed-origins | * | Set the origins to allow, the special value * allows all domains. By default this is not set | . | allowed-headers | * | Set the list of headers that a pre-flight request can list as allowed for use during an actual request. The special value * allows actual requests to send any header. A header name is not required to be listed if it is one of: Cache-Control, Content-Language, Expires, Last-Modified or Pragma). By default this is not set. | . | exposed-headers | &#160; | Set the list of response headers other than simple headers (i.e. Cache-Control, Content-Language, Content-Type, Expires, Last-Modified or Pragma that an actual response might have and can be exposed. Note that * is not a valid exposed header value. By default this is not set. | . | allowed-methods | List | Set the HTTP methods to allow, e.g. GET, POST, PUT, etc. The special value * allows all methods. If not set, only GET and HEAD are allowed. By default this is not set. Note: CORS checks use values from &#8220;Forwarded&#8221; RFC7239, X-Forwarded-Host, X-Forwarded-Port, and X-Forwarded-Proto headers, if present, in order to reflect the client-originated address. Consider using the ForwardedHeaderFilter in order to choose from a central place whether to extract and use, or to discard such headers. See the Spring Framework reference for more on this filter. | . | maxAge | Number | Configure how long, in seconds, the response from a pre-flight request can be cached by clients. By default this is not set. | . | allow-credentials | - | Whether user credentials are supported. By default this is not set (i.e. user credentials are not supported). | . Example . ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-hethods: - GET - POST - PUT - OPTIONS - DELETE . ",
    "url": "/docs/v3/basics/autoconfigurators/#rest",
    
    "relUrl": "/basics/autoconfigurators/#rest"
  },"17": {
    "doc": "Autoconfigurators",
    "title": "Security",
    "content": ". | ontimize:security: | . | Attribute | Values | Meaning | . | mode | default | Use default to enable the security mode for Ontimize Boot | . | ignore-paths | String | Paths in server thant will not be securized | . | service-path | String | Establish the service path. By default, /** | . | ontimize:security:jwt: Not required, enabled by default | . | Attribute | Values | Meaning | . | password | String | JWT password | . | expiration-time | Long | JWT expiration time | . | refresh-token | true, false | Set true to refresh JWT, false otherwise | . | ontimize:security:user-information-service: | . | Attribute | Values | Meaning | . | query-id | String | Name of the DAO query identifier. | . | user-login-column | String | Database column that stores the username | . | user-password-column | String | Database column that stores the password | . | user-need-check-pass-column | String | Database column that stores whether the password requires updating at the next use | . | user-repository | String | Name of the DAO containing information about users | . | other-data | List | Extra data to store from the user logged | . | ontimize:security:role-information-service: | . | Attribute | Values | Meaning | . | role-repository | String | Name of the DAO containing information about users | . | role-name-column | String | Database column that stores the role name | . | server-permission-query-id | String | Name of the DAO query identifier for server permissions | . | server-permission-name-column | String | Database column that stores the server permissions | . | client-permission-query-id | String | Name of the DAO query identifier for client permissions | . | client-permission-column | List | Database column that stores the client permissions | . | ontimize:security:user-role-information-service: | . | Attribute | Values | Meaning | . | user-role-repository | String | Name of the DAO containing relation between users and its profiles | . | query-id | String | Name of the DAO query identifier | . | role-login-column | String | Database column that stores the username | . | role-name-column | String | Database column that stores the role name | . The configuration of the rest of the Security System is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: security: mode: default ignore-paths: /news/**, /products/** user-information-service: user-repository: OCLoginProfilesDao query-id: login user-login-column: USER_ user-password-column: PASSWORD other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: OCLoginProfilesDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME role-information-service: role-repository: OCLoginProfilesDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION . ",
    "url": "/docs/v3/basics/autoconfigurators/#security",
    
    "relUrl": "/basics/autoconfigurators/#security"
  },"18": {
    "doc": "Autoconfigurators",
    "title": "TaskExecutor",
    "content": ". | ontimize:threadpool: | . | Attribute | Values | Meaning | . | coresize | Integer | The number of threads to keep in the pool, evenif they are idle | . | maxsize | Integer | The maximum number of threads to allow in the pool | . | keepalive | Long | When the number of threads is greater than the core, the maximum time that excess idle threads will wait for new tasks before terminating (in milliseconds) | . | timeout | true, false | Allow core threads to time out | . Example . ontimize: threadpool: coresize: 1 maxsize: 2147483647 keepalive: 1000 timeout: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#taskexecutor",
    
    "relUrl": "/basics/autoconfigurators/#taskexecutor"
  },"19": {
    "doc": "Autoconfigurators",
    "title": "Preferences",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . | ontimize:save-config: | . | Attribute | Values | Meaning | . | save-config | true, false | Allows save preferences in database | . | ontimize:save-config-dao: | . | Attribute | Values | Meaning | . | save-config-dao | String | The name of the DAO for save preferences | . The configuration of the rest of the Preferences System is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: save-config: true save-config-dao: ConfigsDao . ",
    "url": "/docs/v3/basics/autoconfigurators/#preferences",
    
    "relUrl": "/basics/autoconfigurators/#preferences"
  },"20": {
    "doc": "Autoconfigurators",
    "title": "Autoconfigurators",
    "content": "Table of Contents . | Autoconfigurators . | AsyncTask | DMS | SDMS . | SDMS - S3 Engine | . | Export | I18n | JDBC | LDAP | Mail | Report | REST | Security | TaskExecutor | Preferences | . | . ",
    "url": "/docs/v3/basics/autoconfigurators/",
    
    "relUrl": "/basics/autoconfigurators/"
  },"21": {
    "doc": "Charts On Demand",
    "title": "Charts On Demand",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/charts-on-demand#charts-on-demand",
    
    "relUrl": "/basics/charts-on-demand#charts-on-demand"
  },"22": {
    "doc": "Charts On Demand",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-charts-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-charts . Note: To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/charts-on-demand#prerequisites",
    
    "relUrl": "/basics/charts-on-demand#prerequisites"
  },"23": {
    "doc": "Charts On Demand",
    "title": "Steps",
    "content": "Database . Preferences Table . With the database started, we create the new tables that will store the charts information. We&#8217;re going to need to create two different tables, one for the chart itself and one for the chart custom parameters. CREATE TABLE PREFERENCES(ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(255),DESCRIPTION VARCHAR(255),PREFERENCES VARCHAR(5000),ENTITY VARCHAR(100), TYPE BIT) . Server . Add Preferences DAOs . A specific DAO will be created for each of both tables in the system, and each of them will implement a different interface. Toggle Tree PreferencesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"PREFERENCES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . PreferencesDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.IPreferencesDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"PreferencesDao\") @ConfigurationFile(configurationFile = \"base-dao/PreferencesDao.xml\", configurationFilePlaceholder = \"base-dao/placeholders.properties\") public class PreferencesDao extends OntimizeJdbcDaoSupport implements IPreferencesDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_PREFERENCES = \"PREFERENCES\"; public static final String ATTR_TYPE = \"TYPE\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | PreferencesDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | PreferencesDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/charts-on-demand#steps",
    
    "relUrl": "/basics/charts-on-demand#steps"
  },"24": {
    "doc": "Charts On Demand",
    "title": "Testing the preferences system",
    "content": "Save preferences . Allows to save the configuration of a chart in the database to do it again quickly . | URL: http://localhost:33333/preferences/save | HTTP Method: POST | Authorization: Basic Auth with parameters User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /save | Indicates the method of the service that is going to be executed | . Body request: . { \"name\":\"chart preference\", \"entity\":\"customer\", \"service\":\"customers\" \"type\":\"CHART\", \"params\": {\"title\":\"Chart of type\", \"subtitle\":\"This is an example of a pie chart\", \"entity\":\"customer\", \"service\":\"customers\", \"selectedXAxis\":\"CUSTOMERTYPEID\", \"selectedYAxis\":\"CUSTOMERTYPEID\", \"selectedXAxisType\":4, \"selectedYAxisType\":4, \"selectedTypeChart\":4, \"selectedDataTypeChart\":3} } . Get preferences . Execute the following request: http://localhost:33333/preferences/preferences?entity=ENTITY&amp;service=SERVICE&amp;type=REPORT. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /preferences | Indicates the method of the service that is going to be executed | . | ?entity=ENTITY | ENTITY indicates the entity to filter the preferences | . | &amp;service=SERVICE | SERVICE indicates the service to filter the preferences | . | &amp;type=CHART | Indicates the type to filter the preferences | . The authorization used for these requests is authorization of the type BASIC. In all three cases cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/basics/charts-on-demand#testing-the-preferences-system",
    
    "relUrl": "/basics/charts-on-demand#testing-the-preferences-system"
  },"25": {
    "doc": "Charts On Demand",
    "title": "Charts On Demand",
    "content": "Table of Contents . | Charts On Demand . | Prerequisites | Steps . | Database . | Preferences Table | . | Server . | Add Preferences DAOs | . | . | Testing the preferences system . | Save preferences | Get preferences | . | . | . ",
    "url": "/docs/v3/basics/charts-on-demand",
    
    "relUrl": "/basics/charts-on-demand"
  },"26": {
    "doc": "Complex queries",
    "title": "Complex queries",
    "content": " ",
    "url": "/docs/v3/basics/complexqueries/#complex-queries",
    
    "relUrl": "/basics/complexqueries/#complex-queries"
  },"27": {
    "doc": "Complex queries",
    "title": "Introduction",
    "content": "In this example the DAO *.xml files will be modified to make complex queries against other database tables. ",
    "url": "/docs/v3/basics/complexqueries/#introduction",
    
    "relUrl": "/basics/complexqueries/#introduction"
  },"28": {
    "doc": "Complex queries",
    "title": "Database structure",
    "content": "We will update the OfferCandidatesDao DAO to add new information in the *.xml. In this case, you will try to add a new query that reflects the other tables that are used from this DAO to relate the offers, candidates, and status. As this table only contains identifiers, our new query will allow us to know all the data and not only its identifiers. ",
    "url": "/docs/v3/basics/complexqueries/#database-structure",
    
    "relUrl": "/basics/complexqueries/#database-structure"
  },"29": {
    "doc": "Complex queries",
    "title": "Modify the DAO to add a complex query",
    "content": "In the *.xml, we will add a new &lt;Queries&gt; tag in which we will add the new queries using the &lt;Query&gt; tag. In this query, we can indicate the query to be executed through the &lt;Sentence&gt; tag. As we want to use the columns and conditions that you indicate through the request, we will use the following markers: . Query markers . | Marker | Meaning | . | #COLUMNS# | Columns to be queried | . | #WHERE# | Columns to filter the query | . | #WHERE_CONCAT# | Adds more columns to filter the query with the AND sql operator | . | #ORDER# | Column to order the queried values with the ORDER BY sql operator | . | #ORDER_CONCAT# | Adds more columns to order the queried values with a comma (,) | . | #SCHEMA# | Gets the database schema | . Example . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM #SCHEMA#.OFFER_CANDIDATES #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES WHERE ID = 200 . There are two ways to order the queries values, with the #ORDER# marker or with a &lt;OrderColumn&gt; tag . Example with #ORDER# . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY ID . Example with &lt;OrderColumn&gt; . &lt;Queries&gt; &lt;Query&gt; &lt;OrderColumns&gt; &lt;OrderColumn name=\"CANDIDATE_ID\" type=\"ASC\"/&gt; &lt;/OrderColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY CANDIDATE_ID . There are two types of OrderColumn, ASC (Ascendent) or DESC (Descendent). Ambiguous columns . The use of the &lt;AmbiguousColumn&gt; tag will indicate which are the ambiguous columns (in this case, the DESCRIPTION column of OFFER_CANDIDATE_STATUS and OFFER, using the name of DESC_STATUS for OFFER_CANDIDATE_STATUS). Otherwise in case we want to modify the query that is performed by default, the identifier of the tag would be default &lt;Query id = \"default\"&gt;. As we want to keep the query by default, we will put another identifier. Example . &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . Complete example . Toggle Tree OfferCandidatesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . In the java file, we will add a new constant, which will have the same value as the name of the identifier that we have established for the query. OfferCandidatesDao.java . package com.ontimize.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferCandidatesDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidatesDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidatesDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_OFFER_ID =\"OFFER_ID\"; public static final String ATTR_CANDIDATE_ID =\"CANDIDATE_ID\"; public static final String ATTR_OFFER_CANDIDATE_STATUS =\"OFFER_CANDIDATE_STATUS\"; public static final String QUERY_OFFER_DETAILS = \"details\"; } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/complexqueries/#modify-the-dao-to-add-a-complex-query",
    
    "relUrl": "/basics/complexqueries/#modify-the-dao-to-add-a-complex-query"
  },"30": {
    "doc": "Complex queries",
    "title": "Modify the interface and the service to add the new method",
    "content": "We will update the IOfferService interface to add the new method that will perform the query. In case of being the default query, it would not be necessary to do any of the steps indicated below. Toggle Tree IOfferService.java . public interface IOfferService { ... // OFFER CANDIDATES ... public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; ... // OFFER CANDIDATES STATUS ... } . In the service, we implement the new interface method, using the daoHelper to create the query, but adding a new parameter after the list of columns to query, which will be the identifier of the query that we have created in the DAO (and that we have associated with a constant in the corresponding java file). OfferService.java . @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { ... @Override public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList, OfferCandidatesDao.QUERY_OFFER_DETAILS); } ... } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method",
    
    "relUrl": "/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method"
  },"31": {
    "doc": "Complex queries",
    "title": "Complex queries",
    "content": "Table of Contents . | Complex queries . | Introduction | Database structure | Modify the DAO to add a complex query . | Query markers | Ambiguous columns | Complete example | . | Modify the interface and the service to add the new method | . | . ",
    "url": "/docs/v3/basics/complexqueries/",
    
    "relUrl": "/basics/complexqueries/"
  },"32": {
    "doc": "Export data to csv",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.csv file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#introduction"
  },"33": {
    "doc": "Export data to csv",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#prerequisites"
  },"34": {
    "doc": "Export data to csv",
    "title": "Steps",
    "content": "Note: To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#steps"
  },"35": {
    "doc": "Export data to csv",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. Toggle Tree projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#add-dependencies"
  },"36": {
    "doc": "Export data to csv",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. Toggle Tree ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#add-export-url-to-applicationyml"
  },"37": {
    "doc": "Export data to csv",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/csv | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 }, \"offset\": -1, \"pageSize\": 25, }, \"service\": \"CandidateService\", \"dao\": \"candidate\", \"path\": \"/candidates\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.csv file in your editor. Postman . CSV . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#check-the-export-system"
  },"38": {
    "doc": "Export data to csv",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | &#160; | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless with advQuery: false | | &#160; | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | &#160; | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | &#160; | . | path | String | Name of the path to be queried | &#160; | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | &#160; | . | columns | JSON Object | Determines the order of the columns in the export | &#160; | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | &#160; | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#creating-the-json-for-exporting-data"
  },"39": {
    "doc": "Export data to csv",
    "title": "Export data to csv",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv",
    
    "relUrl": "/basics/exportdata/export-data-to-csv"
  },"40": {
    "doc": "Export data to xlsx",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.xlsx file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#introduction"
  },"41": {
    "doc": "Export data to xlsx",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#prerequisites"
  },"42": {
    "doc": "Export data to xlsx",
    "title": "Steps",
    "content": "To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#steps"
  },"43": {
    "doc": "Export data to xlsx",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. Toggle Tree projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#add-dependencies"
  },"44": {
    "doc": "Export data to xlsx",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. Toggle Tree ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#add-export-url-to-applicationyml"
  },"45": {
    "doc": "Export data to xlsx",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/xlsx | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 } \"offset\": -1, \"pageSize\": 25 }, \"service\": \"CandidateService\", \"dao\": \"candidate\", \"path\": \"/candidates\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" }, \"styles\": { \"greenBG\": { \"fillBackgroundColor\": \"GREEN\" }, \"redBG\": { \"fillBackgroundColor\": \"RED\" }, \"blueBG\": { \"fillBackgroundColor\": \"BLUE\" } }, \"columnStyles\": { \"NAME\": \"greenBG\" }, \"rowStyles\": { \"1\": \"blueBG\" }, \"cellStyles\": { \"7,7\": \"greenBG\", \"2,2,5,4\": \"redBG\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.xlsx file in your editor. Postman . Excel . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#check-the-export-system"
  },"46": {
    "doc": "Export data to xlsx",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless withadvQuery: false | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | . | path | String | Name of the path to be queried | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | . | columns | JSON Object | Determines the order of the columns in the export | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . | styles | JSON Object | JSON objects used to indicate the styles that the cell will have, grouped under the same name. Only the following styles are supported: | Attribute | Values | Meaning | . | dataFormatString | String | Format string for some formatter, like decimals, e.g.: #,##0.00 | . | alignment | String | These are the possible values for the horizontal alignment: GENERAL, LEFT, CENTER, RIGHT, FILL, JUSTIFY, CENTER_SELECTION, DISTRIBUTED | . | verticalAlignment | String | These are the possible values for the horizontal alignment: TOP, CENTER, BOTTOM, JUSTIFY, DISTRIBUTED | . | fillBackgroundColor | String | These are the possible values for the background colors: BLACK1, WHITE1, RED1, BRIGHT_GREEN1, BLUE1, YELLOW1, PINK1, TURQUOISE1, BLACK, WHITE, RED, BRIGHT_GREEN, BLUE, YELLOW, PINK, TURQUOISE, DARK_RED, GREEN, DARK_BLUE, DARK_YELLOW, VIOLET, TEAL, GREY_25_PERCENT, GREY_50_PERCENT, CORNFLOWER_BLUE, MAROON, LEMON_CHIFFON, LIGHT_TURQUOISE1, ORCHID, CORAL, ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE, SKY_BLUE, LIGHT_TURQUOISE, LIGHT_GREEN, LIGHT_YELLOW, PALE_BLUE, ROSE, LAVENDER, TAN, LIGHT_BLUE, AQUA, LIME, GOLD, LIGHT_ORANGE, ORANGE, BLUE_GREY, GREY_40_PERCENT, DARK_TEAL, SEA_GREEN, DARK_GREEN, OLIVE_GREEN, BROWN, PLUM | . | . | columnStyles | JSON Object | Key-value pairs, where the key is the column name and the value is the name of the style defined in the styles section. This value has priority 2 (the lower value, the higher priority). | . | rowStyles | JSON Object | Key-value pairs, where the key is the row index and the value is the name of the style defined in the styles section. This value has priority 3 (the lower value, the higher priority). | . | cellStyles | JSON Object | Key-value pairs, where the key is the cell to be selected (row, column) or the range of cells (start row, start column, end row, end column) and the value is the name of the style defined in the styles section. This value has priority 1 (the lower the value, the higher the priority). | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#creating-the-json-for-exporting-data"
  },"47": {
    "doc": "Export data to xlsx",
    "title": "Export data to xlsx",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx"
  },"48": {
    "doc": "Export data",
    "title": "Export data",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . Ontimize provides a system to export the DAO data of a service and dump it directly to a file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. The export options are: . | Export data to csv | Export data to xlsx | Export data to pdf | . ",
    "url": "/docs/v3/basics/exportdata/#export-data",
    
    "relUrl": "/basics/exportdata/#export-data"
  },"49": {
    "doc": "Export data",
    "title": "Export data",
    "content": " ",
    "url": "/docs/v3/basics/exportdata/",
    
    "relUrl": "/basics/exportdata/"
  },"50": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Migrate from Ontimize 1.x.x to 3.x.x",
    "content": " ",
    "url": "/docs/v3/basics/migration/#migrate-from-ontimize-1xx-to-3xx",
    
    "relUrl": "/basics/migration/#migrate-from-ontimize-1xx-to-3xx"
  },"51": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Introduction",
    "content": "In this tutorial we are going to explain how to migrate a project from Ontimize version 1.x.x that works with JDK 8 to Ontimize version 3.x.x that works with JDK 11. For this example we will download a project like the explained in this training course. ",
    "url": "/docs/v3/basics/migration/#introduction",
    
    "relUrl": "/basics/migration/#introduction"
  },"52": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-migration-3.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-migration-3.x.x . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/migration/#prerequisites",
    
    "relUrl": "/basics/migration/#prerequisites"
  },"53": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Steps",
    "content": "Ontimize version . First of all we need to update the version of Ontimize (ontimize-boot-parent) located in the parent of the project. Use always the latest version: . Toggle Tree pom.xml . &lt;parent&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-parent&lt;/artifactId&gt; &lt;version&gt;3.x.x&lt;/version&gt; &lt;/parent&gt; . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Java version . In the project properties we will change the java version from 1.8 to 11, both for the main pom.xml and for the hr-model module pom.xml. Toggle Tree pom.xml . &lt;properties&gt; . &lt;java.version&gt;11&lt;/java.version&gt; . &lt;/properties&gt; . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modifying application.yml . In the new version of Ontimize Boot, it has been decided to change the properties from camelCase to kebab-case, so you have to modify the application.yml. endpoints: api: enabled: true logging: level: root: info ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: uppper-string: true upper-like: true security: mode: default ignore-paths: /app/** role-information-service: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME server: port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none autoconfigure: exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . Renaming packages . With the new version, the ontimize-core library has been merged with ontimize-jee, and some classes have changed the name of their package, among them, the EntityResult Interface. To learn more about this class, check the following link. The package name of EntityResult has been renamed from com.ontimize.db.EntityResult to com.ontimize.jee.common.dto.EntityResult. Api module . In the hr-api module we need to change the name of the package of this class in all the interfaces that are using it. Toggle Tree ICandidateService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface ICandidateService { // CANDIDATE public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; } . IMasterService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IMasterService { . // EDUCATION public EntityResult educationQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult educationInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult educationUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult educationDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; . } . IOfferService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IOfferService { . // OFFER public EntityResult offerQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult offerInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult offerUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult offerDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; . } . IUserService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IUserService { public EntityResult userQuery(Map&lt;?, ?&gt; keyMap, List&lt;?&gt; attrList); public EntityResult userInsert(Map&lt;?, ?&gt; attrMap); public EntityResult userUpdate(Map&lt;?, ?&gt; attrMap, Map&lt;?, ?&gt; keyMap); public EntityResult userDelete(Map&lt;?, ?&gt; keyMap); } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Model module . Having changed the class in the interface, we also have to change it in the service. For this we go to the hr-model module and replace the import of all services. Toggle Tree CandidateService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { @Autowired private CandidateDao candidateDao; . } . MasterService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"MasterService\") @Lazy public class MasterService implements MasterService { @Autowired private EducationDao educationDao; . } . OfferService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { @Autowired private OfferDao offerDao; . } . UserService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Lazy @Service(\"UserService\") public class UserService implements IUserService { @Autowired private UserDao userDao; . } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Ws module . In this case it is not just about changing the name of the package, it must also be taken into account that the EntityResult class is now an Interface, so an object cannot be instantiated from it. To do this, we will use the EntityResultMapImpl class. Go to the hr-ws module and replace the import of the EntityResult class in the rest controllers and make the following changes: . Toggle Tree OfferRestController.java . package com.ontimize.hr.ws.core.rest; . import com.ontimize.jee.common.db.SQLStatementBuilder; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicExpression; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicField; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicOperator; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.dto.EntityResultMapImpl; . @RestController @RequestMapping(\"/offers\") @ComponentScan(basePackageClasses = { com.ontimize.hr.api.core.service.IOfferService.class }) public class OfferRestController extends ORestController&lt;IOfferService&gt; { . @RequestMapping(value = \"currentOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult currentOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetween(OfferDao.ATTR_START_DATE)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } @RequestMapping(value = \"yearOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult yearOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; filter = (Map&lt;String, Object&gt;) req.get(\"filter\"); int year = (int) filter.get(\"YEAR\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetweenWithYear(OfferDao.ATTR_START_DATE, year)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } . } . UserRestController.java . package com.ontimize.hr.ws.core.rest; . import com.ontimize.jee.common.dto.EntityResult; . @RestController @RequestMapping(\"/users\") public class UserRestController extends ORestController&lt;IUserService&gt; { . @RequestMapping( value = \"/login\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; login() { return new ResponseEntity&lt;&gt;(HttpStatus.OK); } } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/migration/#steps",
    
    "relUrl": "/basics/migration/#steps"
  },"54": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Migration from Ontimize 1.x.x to 3.x.x",
    "content": "Table of Contents . | Migrate from Ontimize 1.x.x to 3.x.x . | Introduction | Prerequisites | Steps . | Ontimize version | Java version | Modifying application.yml | Renaming packages . | Api module | Model module | Ws module | . | . | . | . ",
    "url": "/docs/v3/basics/migration/",
    
    "relUrl": "/basics/migration/"
  },"55": {
    "doc": "Multiple Datasources",
    "title": "Multiple Datasources",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/multipledatasources/#multiple-datasources",
    
    "relUrl": "/basics/multipledatasources/#multiple-datasources"
  },"56": {
    "doc": "Multiple Datasources",
    "title": "Introduction",
    "content": "Ontimize Boot allows a single application to query multiple data sources, thus allowing you to separate the user and permission tables in a database and use one or more other data sources to query the rest of the information you want by configuring the data source you want to query in each DAO. ",
    "url": "/docs/v3/basics/multipledatasources/#introduction",
    
    "relUrl": "/basics/multipledatasources/#introduction"
  },"57": {
    "doc": "Multiple Datasources",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page, with a REST service and two HSQLDB databases. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-multidatasource-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-multidatasource . ",
    "url": "/docs/v3/basics/multipledatasources/#prerequisites",
    
    "relUrl": "/basics/multipledatasources/#prerequisites"
  },"58": {
    "doc": "Multiple Datasources",
    "title": "Steps",
    "content": "Modify application.yml file . Although you can keep the data source already indicated in the file, you can delete it without any problem. New data sources will be added in the *.yml under the ontimize.datasources properties, followed by a name for that data source, and then the same settings as required for the data source you normally use. Toggle Tree application.yml ... ontimize: datasources: dbone: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: dbtwo: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Modify DAO&#8217;s datasource . In the DAOs the data source must be modified to indicate the correct data source, and the database table that belongs to that data source. In the case of this example, as indicated in the *.yml file, that would be dbone and dbtwo. Toggle Tree RoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... RoleServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE_SERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... ServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... UserDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... UserRoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER_ROLE\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... CandidateDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"CANDIDATE\" datasource=\"dbtwo\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Modify SQL handler . At this point more data sources can be queried, as shown in the example, but they all have the same SQL handler. It is quite possible that, when multiple data sources are queried, unlike the example, they are databases of different technologies. To do this, in the same way as it is allowed to do with the data sources, the SQL handlers of each of the DAOs are changed. There is a SQL handler that is configured by the ontimize.jdbc.sqlhandler and ontimize.jdbc.sql-condition-processor.* properties, called by default dbSQLStatementHandler. From this version, it is no longer necessary to indicate which SQL handler we will use in the ontimize.jdbc.sqlhandler property, but we will indicate its name, listed below. By default, they already have some pre-established configurations, although they can be modified without any problem in the application.yml file. | Handler | Bean name | Default configuration | Property | . | default | dbSQLStatementHandler | Upper string | false | ontimize.jdbc.sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.sql-condition-processor.upper-like | . | postgres | postgresSQLStatementHandler | Upper string | false | ontimize.jdbc.postgres-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.postgres-sql-condition-processor.upper-like | . | oracle | oracleSQLStatementHandler | Upper string | false | ontimize.jdbc.oracle-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.oracle-sql-condition-processor.upper-like | . | oracle12 | oracle12SQLStatementHandler | Upper string | false | ontimize.jdbc.oracle12-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.oracle12-sql-condition-processor.upper-like | . | sqlserver | sqlserverSQLStatementHandler | Upper string | false | ontimize.jdbc.sqlserver-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.sqlserver-sql-condition-processor.upper-like | . | hsqldb | hsqldbSQLStatementHandler | Upper string | false | ontimize.jdbc.hsqldb-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.hsqldb-sql-condition-processor.upper-like | . | mysql | mysqlSQLStatementHandler | Upper string | false | ontimize.jdbc.mysql-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.mysql-sql-condition-processor.upper-like | . Toggle Tree Modified application.yml (will use default values) and some SQL handlers . aplication.yml ... ontimize: datasources: dbone: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true dbtwo: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9014/templateDB username: SA password: initial-size: 10 test-on-borrow: true jdbc: name-convention: upper ... RoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... ServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... UserRoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER_ROLE\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... CandidateDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"CANDIDATE\" datasource=\"dbtwo\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/multipledatasources/#steps",
    
    "relUrl": "/basics/multipledatasources/#steps"
  },"59": {
    "doc": "Multiple Datasources",
    "title": "Multiple Datasources",
    "content": "Table of Contents . | Multiple Datasources . | Introduction | Prerequisites | Steps . | Modify application.yml file | Modify SQL handler | . | . | . ",
    "url": "/docs/v3/basics/multipledatasources/",
    
    "relUrl": "/basics/multipledatasources/"
  },"60": {
    "doc": "Export data to pdf",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.pdf file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#introduction"
  },"61": {
    "doc": "Export data to pdf",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#prerequisites"
  },"62": {
    "doc": "Export data to pdf",
    "title": "Steps",
    "content": "To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#steps"
  },"63": {
    "doc": "Export data to pdf",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. Toggle Tree projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#add-dependencies"
  },"64": {
    "doc": "Export data to pdf",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. Toggle Tree ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#add-export-url-to-applicationyml"
  },"65": {
    "doc": "Export data to pdf",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/pdf | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 }, \"offset\": -1, \"pageSize\": 25, }, \"service\": \"CandidateService\", \"path\": \"/candidates\", \"dao\": \"candidate\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" }, \"styles\": { \"greenBG\": { \"fillBackgroundColor\": \"GREEN\" }, \"redBG\": { \"fillBackgroundColor\": \"RED\" }, \"blueBG\": { \"fillBackgroundColor\": \"BLUE\" } }, \"columnStyles\": { \"NAME\": \"greenBG\" }, \"rowStyles\": { \"1\": \"blueBG\" }, \"cellStyles\": { \"7,7\": \"greenBG\", \"2,2,5,4\": \"redBG\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.pdf file in your editor. Postman . Pdf . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#check-the-export-system"
  },"66": {
    "doc": "Export data to pdf",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless with advQuery: false | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | . | path | String | Name of the path to be queried | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | . | columns | JSON Object | Determines the order of the columns in the export | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . | styles | JSON Object | JSON objects used to indicate the styles that the cell will have, grouped under the same name. Only the following styles are supported: | Attribute | Values | Meaning | . | dataFormatString | String | Format string for some formatter, like decimals, e.g.: #,##0.00 | . | alignment | String | These are the possible values for the horizontal alignment: GENERAL, LEFT, CENTER, RIGHT, FILL, JUSTIFY, CENTER_SELECTION, DISTRIBUTED | . | verticalAlignment | String | These are the possible values for the horizontal alignment: TOP, CENTER, BOTTOM, JUSTIFY, DISTRIBUTED | . | fillBackgroundColor | String | These are the possible values for the background colors: BLACK1, WHITE1, RED1, BRIGHT_GREEN1, BLUE1, YELLOW1, PINK1, TURQUOISE1, BLACK, WHITE, RED, BRIGHT_GREEN, BLUE, YELLOW, PINK, TURQUOISE, DARK_RED, GREEN, DARK_BLUE, DARK_YELLOW, VIOLET, TEAL, GREY_25_PERCENT, GREY_50_PERCENT, CORNFLOWER_BLUE, MAROON, LEMON_CHIFFON, LIGHT_TURQUOISE1, ORCHID, CORAL, ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE, SKY_BLUE, LIGHT_TURQUOISE, LIGHT_GREEN, LIGHT_YELLOW, PALE_BLUE, ROSE, LAVENDER, TAN, LIGHT_BLUE, AQUA, LIME, GOLD, LIGHT_ORANGE, ORANGE, BLUE_GREY, GREY_40_PERCENT, DARK_TEAL, SEA_GREEN, DARK_GREEN, OLIVE_GREEN, BROWN, PLUM | . | . | columnStyles | JSON Object | Key-value pairs, where the key is the column name and the value is the name of the style defined in the styles section. This value has priority 2 (the lower value, the higher priority). | . | rowStyles | JSON Object | Key-value pairs, where the key is the row index and the value is the name of the style defined in the styles section. This value has priority 3 (the lower value, the higher priority). | . | cellStyles | JSON Object | Key-value pairs, where the key is the cell to be selected (row, column) or the range of cells (start row, start column, end row, end column) and the value is the name of the style defined in the styles section. This value has priority 1 (the lower the value, the higher the priority). | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#creating-the-json-for-exporting-data"
  },"67": {
    "doc": "Export data to pdf",
    "title": "Export data to pdf",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf"
  },"68": {
    "doc": "Versions",
    "title": "Ontimize Versions",
    "content": "The purpose of this page is to indicate the latest versions of Ontimize Boot projects published in Maven Central. | | | | | | | . ",
    "url": "/docs/v3/versions/#ontimize-versions",
    
    "relUrl": "/versions/#ontimize-versions"
  },"69": {
    "doc": "Versions",
    "title": "3.X.X - Ontimize Boot",
    "content": "| Ontimize Boot | Ontimize Boot Parent | Ontimize EE | Ontimize EE DMS | Ontimize EE Report | Ontimize OpenAPI Generator | Ontimize EE SMDS | . | 3.13.0 | 3.13.0 | 5.10.0 | 3.1.0 | 3.3.0 | 1.0.4 | 1.3.1 | . | 3.12.0 | 3.12.0 | 5.9.0 | 1.0.2 | . | 3.11.0 | 3.11.0 | 5.8.0 | 3.2.0 | 1.0.0 | . | 3.10.0 | 3.10.0 | 5.7.0-SNAPSHOT | 1.0.1 | - | . | 3.9.0 | 3.9.0 | 5.6.0 | . | 3.8.0 | 3.8.0 | 5.5.0 | 3.1.0 | . | 3.7.0 | 3.7.0 | . | 3.6.0 | 3.6.0 | 3.0.0 | . | 3.5.0 | 3.5.0 | . | 3.4.0 | 3.4.0 | . | 3.3.0 | 3.3.0 | 3.0.0-SNAPSHOT | . | 3.2.0 | 3.2.0 | . | 3.1.0 | - | 5.4.0 | - | - | . ",
    "url": "/docs/v3/versions/#3xx---ontimize-boot",
    
    "relUrl": "/versions/#3xx---ontimize-boot"
  },"70": {
    "doc": "Versions",
    "title": "Versions",
    "content": " ",
    "url": "/docs/v3/versions/",
    
    "relUrl": "/versions/"
  },"71": {
    "doc": "Getting started",
    "title": "Create application from archetype",
    "content": "Open a console and type the next command: . mvn archetype:generate -DgroupId=YOUR_GROUP_ID -DartifactId=YOUR_ARTIFACT_ID -Dversion=YOUR_VERSION -Dpackage=YOUR.GROUPID.ARTIFACTID -DarchetypeGroupId=com.ontimize -DarchetypeArtifactId=ontimize-boot-backend-archetype -DarchetypeVersion=99.9.9-SNAPSHOT -DinteractiveMode=false . Command explanation . | Argument | Meaning | . | mvn | Maven CLI | . | archetype:generate | Use the Maven Archetype Plugin for create a new project from an archetype | . | -DgroupId=YOUR_GROUP_ID | Your project groupId | . | -DartifactId=YOUR_ARTIFACT_ID | Your project artifactId | . | -Dversion=YOUR_VERSION | Your project version | . | -Dpackage=YOUR.GROUPID.ARTIFACTID | Sets the package on which the project will be based (e.g.: In our examples, this will be com.ontimize.projectwiki) | . | -DarchetypeGroupId=com.ontimize | groupId of the Ontimize Boot archetype | . | -DarchetypeArtifactId=ontimize-boot-backend-archetype | artifactId of the Ontimize Boot archetype | . | -DarchetypeVersion=99.9.9-SNAPSHOT | version of the Ontimize Boot archetype. This SNAPSHOT indicates the latest version | . | -DinteractiveMode=false | Forced to skip interactive mode and use the paramaters in the command | . ",
    "url": "/docs/v3/getting_started/#create-application-from-archetype",
    
    "relUrl": "/getting_started/#create-application-from-archetype"
  },"72": {
    "doc": "Getting started",
    "title": "Start the project",
    "content": "Toggle Tree To start the project, it is necessary to start both the database and the server. The first thing to do is to execute the mvn install command inside the project’s root folder . $ cd app /app$ mvn install . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the database . Toggle Tree Next, we navigate to the model folder to start the HSQLDB database . /app$ cd model /app/model$ mvn exec:java -Prun_database . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the server . Toggle Tree To start the server, open a new console in the root folder of the project, navigate to boot folder and type the following command . /app$ cd boot /app/boot$ mvn spring-boot:run . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/getting_started/#start-the-project",
    
    "relUrl": "/getting_started/#start-the-project"
  },"73": {
    "doc": "Getting started",
    "title": "Test the application",
    "content": "You can check if the application is working by making a request, for example, to the following address: . http://localhost:33333/users/user?columns=USER_ . Through applications such as Postman or from the browser . In both cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/getting_started/#test-the-application",
    
    "relUrl": "/getting_started/#test-the-application"
  },"74": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "Table of Contents . | Create application from archetype . | Command explanation | . | Start the project . | Start the database | Start the server | . | Test the application | . This page allows you to know how to start developing an application with Ontimize Boot in a simple way. This project includes an HSQLDB database already prepared to start the application. It can be replaced. ",
    "url": "/docs/v3/getting_started/",
    
    "relUrl": "/getting_started/"
  },"75": {
    "doc": "Home",
    "title": "📜 Ontimize Boot",
    "content": "Ontimize Boot uses Spring Boot technology to further simplify the development of a service or microservice based server, using the API REST communication system. ",
    "url": "/docs/v3/#-ontimize-boot",
    
    "relUrl": "/#-ontimize-boot"
  },"76": {
    "doc": "Home",
    "title": "✍ Use",
    "content": "To start developing an application with Ontimize Boot is very simple, we have an archetype that generates the skeleton of an application in seconds, from which you can develop the application you want. For more information, consult the desired topics in this documentation, using the search box or the side menu. ",
    "url": "/docs/v3/#-use",
    
    "relUrl": "/#-use"
  },"77": {
    "doc": "Home",
    "title": "👁️‍🗨️ Versions and dependencies",
    "content": "All the versions and dependencies of the artifacts contained in this project can be downloaded from Maven Central, as well as knowing each of its dependencies. ",
    "url": "/docs/v3/#%EF%B8%8F%EF%B8%8F-versions-and-dependencies",
    
    "relUrl": "/#️️-versions-and-dependencies"
  },"78": {
    "doc": "Home",
    "title": "📣 Changelog",
    "content": "You can consult our changelog at the following link . ",
    "url": "/docs/v3/#-changelog",
    
    "relUrl": "/#-changelog"
  },"79": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/docs/v3/",
    
    "relUrl": "/"
  },"80": {
    "doc": "Introduction",
    "title": "Welcome to the documentation of the backend development framework for building the future",
    "content": ". How to read and use this documentation. In this page you will find the necessary elements to start developing your backend application with Ontimize Boot. Below you will find links to the sections containing the information you need for a quick introduction to Ontimize Boot development. ",
    "url": "/docs/v3/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future",
    
    "relUrl": "/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future"
  },"81": {
    "doc": "Introduction",
    "title": "Sections",
    "content": "| Prerequisites | Check you meet minimum requirements to start. | . | Getting started | First contact with an Ontimize Boot app. Generate an app is easy with an archetype. | . | Basics | Basic information about the configuration of an application. | . | Page under construction Tutorial | Tutorial on how to create from scratch an application with Ontimize Boot (in Spanish) | . ",
    "url": "/docs/v3/introduction/#sections",
    
    "relUrl": "/introduction/#sections"
  },"82": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/docs/v3/introduction/",
    
    "relUrl": "/introduction/"
  },"83": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": ". ",
    "url": "/docs/v3/prerequisites/#prerequisites",
    
    "relUrl": "/prerequisites/#prerequisites"
  },"84": {
    "doc": "Prerequisites",
    "title": "Java JDK 11",
    "content": "Make sure you have the JDK version of Java 1 installed. There are many different builds, but perhaps the most common is Adoptium, which you can download from the following link (add your operating system and your computer’s architecture): Adoptium JDK . Check the option to set the JAVA_HOME variable. Following installation, make sure you have correctly installed Java JDK 1 by invoking the following commands in the command-line java -version . On the Mac, the command-line is available via the Terminal &gt;application. On the PC, it’s available as Command Prompt. The result should look similar to: . C:\\&gt;java -version openjdk version \"11.0.21\" 2023-10-17 OpenJDK Runtime Environment Temurin-11.0.21+9 (build 11.0.21+9) OpenJDK 64-Bit Server VM Temurin-11.0.21+9 (build 11.0.21+9, mixed mode) . ",
    "url": "/docs/v3/prerequisites/#java-jdk-11",
    
    "relUrl": "/prerequisites/#java-jdk-11"
  },"85": {
    "doc": "Prerequisites",
    "title": "Maven 3.6.0 or newer",
    "content": "Maven is required for downloading and using the Ontimize Boot application archetype, managing the libraries contained in the framework and even for running the application. You can download Maven from its official project page at the following link: Maven . Follow the installation steps indicated in the official web site . To check the installation, run the following command at a command prompt mvn -v. The result should look similar to: . C:\\&gt;mvn -v Apache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8) Maven home: C:\\Program Files (x86)\\maven Java version: 11.0.21, vendor: Eclipse Adoptium, runtime: C:\\Program Files\\Eclipse Adoptium\\jdk-11.0.21.9-hotspot Default locale: es_ES, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\" . ",
    "url": "/docs/v3/prerequisites/#maven-360-or-newer",
    
    "relUrl": "/prerequisites/#maven-360-or-newer"
  },"86": {
    "doc": "Prerequisites",
    "title": "IDE",
    "content": "It is not absolutely necessary to use an IDE, but it is highly recommended and helps the development of the application. We recommend the use of IntelliJ (in its Community or Ultimate version), Eclipse (in its Enterprise Java and Web Developers version) or Visual Studio Code. ",
    "url": "/docs/v3/prerequisites/#ide",
    
    "relUrl": "/prerequisites/#ide"
  },"87": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": " ",
    "url": "/docs/v3/prerequisites/",
    
    "relUrl": "/prerequisites/"
  },"88": {
    "doc": "Sandbox",
    "title": "Sandbox",
    "content": " ",
    "url": "/docs/v3/sandbox/",
    
    "relUrl": "/sandbox/"
  },"89": {
    "doc": "Sandbox",
    "title": "Nueva página",
    "content": "Los include llevan un % en vez de un - --- title: \"Title of the page\" layout: default permalink: /path/to/page/ nav_order: X # has_children: false # has_toc: false # nav_exclude: true # grand_parent: Title grand_parent # parent: Title parent --- &lt;!-- {- include base_path %} --&gt; &lt;!-- {- include toc %} --&gt; . ",
    "url": "/docs/v3/sandbox/#nueva-p%C3%A1gina",
    
    "relUrl": "/sandbox/#nueva-página"
  },"90": {
    "doc": "Sandbox",
    "title": "Doble columna (código y árbol, con toggle)",
    "content": "Los highlight y endhighlight llevan un % en vez de un - &lt;div class=\"multicolumn\"&gt; &lt;div class=\"multicolumnleft\"&gt; &lt;button class=\"unstyle toggle-tree-btn\"&gt; &lt;div class=\"btn\"&gt;Toggle Tree&lt;/div&gt; &lt;/button&gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;div class=\"multicolumnright jstreeloader collapsed\"&gt; // &lt;ul&gt; &lt;/ul&gt; de jstree &lt;/div&gt; &lt;/div&gt; . Toggle Tree EjemploDeClase.java . // Aquí el código o lo que sea . | Mi proyecto . | Carpeta 1 . | EjemploDeClaseCustom.java | . | Carpeta 2 . | EjemploDeClase.java | . | ejemplodepom.xml | . | . ",
    "url": "/docs/v3/sandbox/#doble-columna-c%C3%B3digo-y-%C3%A1rbol-con-toggle",
    
    "relUrl": "/sandbox/#doble-columna-código-y-árbol-con-toggle"
  },"91": {
    "doc": "Sandbox",
    "title": "Doble columna (código y código, sin toggle)",
    "content": "Los highlight y endhighlight llevan un % en vez de un - &lt;div class=\"multicolumn\"&gt; &lt;div class=\"multicolumnnopadding\" &gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;div class=\"verticalDivider\"&gt;&lt;/div&gt; &lt;div class=\"multicolumnnopadding\" &gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;/div&gt; . First column . // Aquí el código o lo que sea . Second column . // Aquí el código o lo que sea . ",
    "url": "/docs/v3/sandbox/#doble-columna-c%C3%B3digo-y-c%C3%B3digo-sin-toggle",
    
    "relUrl": "/sandbox/#doble-columna-código-y-código-sin-toggle"
  },"92": {
    "doc": "Systems",
    "title": "Systems",
    "content": " ",
    "url": "/docs/v3/systems/",
    
    "relUrl": "/systems/"
  },"93": {
    "doc": "Async Tasks",
    "title": "Async Tasks",
    "content": "This module works only for Ontimize Boot version 3.8.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/asynctask/#async-tasks",
    
    "relUrl": "/systems/asynctask/#async-tasks"
  },"94": {
    "doc": "Async Tasks",
    "title": "Introduction",
    "content": "The Async Task system will allow you to run decoupled, asynchronous tasks. This module will let you run any service method in a separate, newly created thread, by simply adding an annotation to its controller method. ",
    "url": "/docs/v3/systems/asynctask/#introduction",
    
    "relUrl": "/systems/asynctask/#introduction"
  },"95": {
    "doc": "Async Tasks",
    "title": "Previous concepts",
    "content": ". | Task: It is the generic representation of a decoupled task. It stores information such as its UUID, its current status and the result of the execution. | Aspect: It is a modularization of a concern that cuts across multiple classes. It allows us to intercept the execution of any given method or class and implement some alternative or extra behaviour for it. | . ",
    "url": "/docs/v3/systems/asynctask/#previous-concepts",
    
    "relUrl": "/systems/asynctask/#previous-concepts"
  },"96": {
    "doc": "Async Tasks",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-async-task-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-async-task . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/asynctask/#prerequisites",
    
    "relUrl": "/systems/asynctask/#prerequisites"
  },"97": {
    "doc": "Async Tasks",
    "title": "Steps",
    "content": "Database . Tasks Table . With the database started, we create the new table that will store the tasks information. CREATE TABLE TASKS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, UUID VARCHAR(255) NOT NULL, STATUS VARCHAR(255), RESULT VARBINARY(16777216)); . Server . Add Ontimize AsyncTask dependencies . The decoupled tasks system is integrated in the Ontimize Core module, so we need to declare it as a project dependency. Toggle Tree boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-core&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-core&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the decoupled tasks module, indicate the storage engine it will use, the URL base path for the service, and its thread pool configuration. In this link you have information about the configuration of the asynchronous tasks system in the application.yml file. The enable property must be set to true and the storage engine type must be specified in the engine property before the server is started. The asynchronous tasks system requires the Ontimize TaskExecutor to be configured, see this link. Toggle Tree application.yml . For database storage . ontimize: asynctask: enable: true engine: database url: /tasks . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | entities . | Candidate.java | . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add Task DAO . A specific DAO will be created for the tasks table, and it will implement the DAO interface in the tasks module. Toggle Tree TaskDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TASKS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . TaskDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.boot.core.asynctask.IAsyncTaskDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"TaskDao\") @ConfigurationFile(configurationFile = \"dao/TaskDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class TaskDao extends OntimizeJdbcDaoSupport implements IAsyncTaskDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_UUID = \"UUID\"; public static final String ATTR_STATUS = \"STATUS\"; public static final String ATTR_RESULT = \"RESULT\"; public TaskDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Annotate controller method . In order to run some service method asynchronously, we need to annotate its respective REST controller method with @OAsyncTask. This way, a new thread will be created in order to handle the method&#8217;s execution, and we will recieve an instant response with the URL where we can check the execution status and retrieve its result when it&#8217;s finished. The service&#8217;s method MUST return a serializable object with getters and setters, as well as the controller&#8217;s method must return a ResponseEntity object. In this case, the query() method returns a Serializable object, the EntityResult. Toggle Tree We will override the query() method of the ORestController class. CandidateRestController.java . package com.ontimize.projectwiki.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import com.ontimize.boot.core.asynctask.OAsyncTask; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.server.rest.ORestController; import com.ontimize.projectwiki.api.core.service.ICandidateService; @RestController @RequestMapping(\"/candidates\") @ComponentScan(basePackageClasses = { com.ontimize.projectwiki.api.core.service.ICandidateService.class }) public class CandidateRestController extends ORestController&lt;ICandidateService&gt;{ @Autowired private ICandidateService candidateService; @Override public ICandidateService getService() { return this.candidateService; } @OAsyncTask @Override public ResponseEntity&lt;EntityResult&gt; query(@PathVariable(\"name\") String name, @RequestParam(name = \"filter\", required = false) String filter, @RequestParam(name = \"columns\", required = false) String columns) { return super.query(name, filter, columns); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Delay service method . To know all the states through which the asynchronous request passes, we will add a delay in the candidateQuery() method. Toggle Tree CandidateService.java . package com.ontimize.projectwiki.model.core.service; import java.util.concurrent.TimeUnit; . @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { . @Override public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { try { TimeUnit.MINUTES.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } return this.daoHelper.query(this.candidateDao, keyMap, attrList); } . } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Testing . To test the asynchronous tasks we need to execute a REST request to the method that we have marked with the annotation @OAsyncTask. In this case, the request is GET and has the following structure: http://localhost:33333/candidates/candidate?columns=ID,NAME,SURNAME . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /candidates | Indicates the service to be queried | . | /candidate | Indicates the DAO that will access that service | . | ?columns= | Indicates the columns to be queried | . The authorization used for this requests is authorization of the type BASIC. The access must be done with a user and password example: . User: demo Password: demouser . When you run the query, it should return a 202 Accepted with the following header: Location. This header contains the relative path to the asynchronous task that you have to execute to receive the data. Example . Location: /tasks/f16e9af7-ec0f-444c-a173-5b0179f5d57f . To execute the query the request needs to be GET and have the following structure: http://localhost:33333/tasks/f16e9af7-ec0f-444c-a173-5b0179f5d57f . The uuid that goes after /tasks varies in each execution of the previous query. The first time you run this query the status becomes Started. When the time set in the delay expires the second time you execute the query, the status becomes Completed, returns the request data and removes the task from the TASKS table. ",
    "url": "/docs/v3/systems/asynctask/#steps",
    
    "relUrl": "/systems/asynctask/#steps"
  },"98": {
    "doc": "Async Tasks",
    "title": "Async Tasks",
    "content": "Table of Contents . | Async Tasks . | Introduction | Previous concepts | Prerequisites | Steps . | Database . | Tasks Table | . | Server . | Add Ontimize AsyncTask dependencies | Modify application.yml | Add Task DAO | Annotate controller method | Delay service method | . | Testing | . | . | . ",
    "url": "/docs/v3/systems/asynctask/",
    
    "relUrl": "/systems/asynctask/"
  },"99": {
    "doc": "DMS System",
    "title": "DMS System",
    "content": " ",
    "url": "/docs/v3/systems/dms/#dms-system",
    
    "relUrl": "/systems/dms/#dms-system"
  },"100": {
    "doc": "DMS System",
    "title": "Introduction",
    "content": "A Document Management System (DMS) is a system that allows you to store files and keep track of the versions of those files. Ontimize Boot provides a DMS system that allows to store the files that are associated to the different records of a database table. ",
    "url": "/docs/v3/systems/dms/#introduction",
    
    "relUrl": "/systems/dms/#introduction"
  },"101": {
    "doc": "DMS System",
    "title": "Previous concepts",
    "content": ". | Document (or workspace): It is superentity into which several files can be grouped. | File: The file is the generic representation of a file. A file groups several versions of itself. | Version: Is the relationship to a physical file. | Category (or folder): Is a way of grouping files within the document. | . ",
    "url": "/docs/v3/systems/dms/#previous-concepts",
    
    "relUrl": "/systems/dms/#previous-concepts"
  },"102": {
    "doc": "DMS System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/dms/#prerequisites",
    
    "relUrl": "/systems/dms/#prerequisites"
  },"103": {
    "doc": "DMS System",
    "title": "Steps",
    "content": "Database . DMS Tables . With the database started, we create the new tables that will store the DMS information. CREATE TABLE TDMS_DOC(ID_DMS_DOC INTEGER IDENTITY NOT NULL PRIMARY KEY,UPDATE_DATE TIMESTAMP,UPDATE_BY_ID INTEGER,DOC_NAME VARCHAR(255) NOT NULL,OWNER_ID INTEGER NOT NULL,DOC_DESCRIPTION CLOB(1G),DOC_KEYWORDS VARCHAR(255)); CREATE TABLE TDMS_DOC_FILE(ID_DMS_DOC_FILE INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_NAME VARCHAR(255) NOT NULL,ID_DMS_DOC INTEGER NOT NULL,FILE_TYPE VARCHAR(255),ID_DMS_DOC_CATEGORY INTEGER); CREATE TABLE TDMS_DOC_FILE_VERSION(ID_DMS_DOC_FILE_VERSION INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_PATH VARCHAR(500),VERSION INTEGER NOT NULL,FILE_DESCRIPTION CLOB(1G),IS_ACTIVE CHARACTER(1) NOT NULL,FILE_ADDED_DATE TIMESTAMP NOT NULL,FILE_ADDED_USER_ID INTEGER NOT NULL,ID_DMS_DOC_FILE INTEGER NOT NULL,THUMBNAIL BLOB(1G),FILE_SIZE INTEGER); CREATE TABLE TDMS_DOC_PROPERTY(ID_DMS_DOC_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,DOC_PROPERTY_KEY VARCHAR(255) NOT NULL,DOC_PROPERTY_VALUE VARCHAR(255),ID_DMS_DOC INTEGER NOT NULL); CREATE TABLE TDMS_RELATED_DOC(ID_DMS_RELATED_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC_MASTER INTEGER NOT NULL,ID_DMS_DOC_CHILD INTEGER NOT NULL); CREATE TABLE TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC INTEGER NOT NULL,ID_DMS_DOC_CATEGORY_PARENT INTEGER,CATEGORY_NAME VARCHAR(255) NOT NULL); . Once the tables have been created, we add the foreign keys . ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE_VERSION ADD CONSTRAINT TDMS_DOC_FILE_VERSION_FK FOREIGN KEY(ID_DMS_DOC_FILE) REFERENCES TDMS_DOC_FILE(ID_DMS_DOC_FILE); ALTER TABLE TDMS_DOC_PROPERTY ADD CONSTRAINT TDMS_DOC_PROPERTY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC) ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK FOREIGN KEY(ID_DMS_DOC_MASTER) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK_1 FOREIGN KEY(ID_DMS_DOC_CHILD) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_CATEGORY ADD CONSTRAINT TDMS_DOC_CATEGORY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK_1 FOREIGN KEY(ID_DMS_DOC_CATEGORY) REFERENCES TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY); . Link DMS table with entity table . In this example we want each new candidate added to the application to have its own space to store documents, so we will modify the CANDIDATES table to contain a column that stores the primary key of the document (or workspace) that will be associated with it. ALTER TABLE CANDIDATE ADD ID_DMS_DOC INTEGER; . ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); . Server . Add DMS dependencies . Toggle Tree model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-common&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... ws/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-rest&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add DMS DAO and modify Candidate DAO . A specific DAO will be created for each table in the DMS system, and each of them will implement a different interface. In turn, the candidate DAO will be modified to reflect the new column it contains. Toggle Tree DMSCategoryDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_CATEGORY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_CATEGORY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;!-- TDMS_DOC --&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;UPDATE_DATE&lt;/Column&gt; &lt;Column&gt;UPDATE_BY_ID&lt;/Column&gt; &lt;Column&gt;DOC_NAME&lt;/Column&gt; &lt;Column&gt;OWNER_ID&lt;/Column&gt; &lt;Column&gt;DOC_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;DOC_KEYWORDS&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf JOIN ${mainschema}.TDMS_DOC AS tdd ON tddf.ID_DMS_DOC = tdd.ID_DMS_DOC LEFT JOIN ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv ON tddf.id_dms_doc_file = tddfv.id_dms_doc_file WHERE (tddfv.IS_ACTIVE = 'Y' OR tddfv.id_dms_doc_file_version IS NULL) #WHERE_CONCAT# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;Query id=\"allfiles\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileVersionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE_VERSION\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE_VERSION&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddfv\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv LEFT JOIN ${mainschema}.TDMS_DOC_FILE AS tddf ON tddfv.ID_DMS_DOC_FILE = tddf.ID_DMS_DOC_FILE #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentPropertyDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_PROPERTY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSRelatedDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_RELATED_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_RELATED_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Toggle Tree CandidateDao.java ... public class CandidateDao extends OntimizeJdbcDaoSupport { ... public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSCategoryDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSCategoryDao; @Repository(\"DMSCategoryDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSCategoryDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSCategoryDao extends OntimizeJdbcDaoSupport implements IDMSCategoryDao { public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_ID_DMS_DOC_CATEGORY_PARENT = \"ID_DMS_DOC_CATEGORY_PARENT\"; public static final String ATTR_CATEGORY_NAME = \"CATEGORY_NAME\"; } . DMSDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentDao; @Repository(\"DMSDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentDao extends OntimizeJdbcDaoSupport implements IDMSDocumentDao { public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_UPDATE_DATE = \"UPDATE_DATE\"; public static final String ATTR_UPDATE_BY_ID = \"UPDATE_BY_ID\"; public static final String ATTR_DOC_NAME = \"DOC_NAME\"; public static final String ATTR_OWNER_ID = \"OWNER_ID\"; public static final String ATTR_DOC_DESCRIPTION = \"DOC_DESCRIPTION\"; public static final String ATTR_DOC_KEYWORDS = \"DOC_KEYWORDS\"; } . DMSDocumentFileDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileDao; @Repository(\"DMSDocumentFileDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileDao{ public static final String ATTR_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATTR_FILE_NAME = \"FILE_NAME\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_FILE_TYPE = \"FILE_TYPE\"; public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; } . DMSDocumentFileVersionDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileVersionDao; @Repository(\"DMSDocumentFileVersionDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileVersionDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileVersionDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileVersionDao { public static final String ATT_ID_DMS_DOC_FILE_VERSION = \"ID_DMS_DOC_FILE_VERSION\"; public static final String ATT_FILE_PATH = \"FILE_PATH\"; public static final String ATT_VERSION = \"VERSION\"; public static final String ATT_FILE_DESCRIPTION = \"FILE_DESCRIPTION\"; public static final String ATT_IS_ACTIVE = \"IS_ACTIVE\"; public static final String ATT_FILE_ADDED_DATE = \"FILE_ADDED_DATE\"; public static final String ATT_FILE_ADDED_USER_ID = \"FILE_ADDED_USER_ID\"; public static final String ATT_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATT_THUMBNAIL = \"THUMBNAIL\"; public static final String ATT_FILE_SIZE = \"FILE_SIZE\"; } . DMSDocumentPropertyDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentPropertyDao; @Repository(\"DMSDocumentPropertyDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentPropertyDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentPropertyDao extends OntimizeJdbcDaoSupport implements IDMSDocumentPropertyDao { public static final String ATTR_ID_DMS_DOC_PROPERTY = \"ID_DMS_DOC_PROPERTY\"; public static final String ATTR_DOC_PROPERTY_KEY = \"DOC_PROPERTY_KEY\"; public static final String ATTR_DOC_PROPERTY_VALUE = \"DOC_PROPERTY_VALUE\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSRelatedDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSRelatedDocumentDao; @Repository(\"DMSRelatedDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSRelatedDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSRelatedDocumentDao extends OntimizeJdbcDaoSupport implements IDMSRelatedDocumentDao { public static final String ATTR_ID_DMS_RELATED_PROPERTY = \"ID_DMS_RELATED_PROPERTY\"; public static final String ATTR_ID_DMS_DOC_MASTER = \"ID_DMS_DOC_MASTER\"; public static final String ATTR_ID_DMS_DOC_CHILD = \"ID_DMS_DOC_CHILD\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify CandidateService insert method . The method of inserting new candidates will be modified so that, when inserting them, they will have a workspace to maintain the files to be uploaded associated with the inserted candidate. Toggle Tree CandidateService.java ... import com.ontimize.jee.common.exceptions.DmsException; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.common.services.dms.DocumentIdentifier; import com.ontimize.jee.server.services.dms.DMSCreationHelper; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private DMSCreationHelper dmsHelper; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { try { DocumentIdentifier docId = this.dmsHelper.createDocument((String) attrMap.get(CandidateDao.ATTR_DNI)); attrMap.put(DMSNaming.DOCUMENT_ID_DMS_DOCUMENT, docId.getDocumentId()); } catch (DmsException e) { throw new OntimizeJEERuntimeException(\"ERROR_CREATING_DMS_DOC\", e); } return this.daoHelper.insert(this.candidateDao, attrMap); } ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add File Manager Rest Controller . Toggle Tree DMSNameConverter.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.Arrays; import java.util.Date; import java.util.List; import java.util.Map; import org.springframework.stereotype.Service; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.server.dms.model.OFile; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @Service(\"DMSNameConverter\") public class DMSNameConverter implements IDMSNameConverter { @Override public Object getFileIdColumn() { return DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE; } @Override public Object getFileNameColumn() { return DMSNaming.DOCUMENT_FILE_NAME; } @Override public Object getFileSizeColumn() { return DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE; } @Override public Object getCategoryIdColumn() { return DMSNaming.CATEGORY_ID_CATEGORY; } @Override public Object getCategoryNameColumn() { return DMSNaming.CATEGORY_CATEGORY_NAME; } @Override public OFile createOFile(Map&lt;?, ?&gt; params) { OFile file = new OFile(); file.setId((Integer) params.get(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE)); file.setName((String) params.get(DMSNaming.DOCUMENT_FILE_NAME)); file.setType((String) params.get(DMSNaming.DOCUMENT_FILE_TYPE)); file.setSize((Integer) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE)); file.setCreationDate(((Date) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE)).getTime()); file.setDirectory(false); return file; } @Override public List&lt;?&gt; getFileColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE, DMSNaming.DOCUMENT_FILE_NAME, DMSNaming.DOCUMENT_FILE_TYPE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE); } @Override public List&lt;?&gt; getCategoryColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.CATEGORY_ID_CATEGORY, DMSNaming.CATEGORY_CATEGORY_NAME, DMSNaming.CATEGORY_ID_CATEGORY_PARENT); } } . FileManagerRestController.java . package com.ontimize.projectwiki.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.ontimize.jee.common.services.dms.IDMSService; import com.ontimize.jee.server.dms.rest.DMSRestController; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @RestController @RequestMapping(\"/filemanager\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.dms.IDMSService.class, com.ontimize.jee.server.dms.rest.IDMSNameConverter.class }) public class FileManagerRestController extends DMSRestController&lt;IDMSService, IDMSNameConverter&gt; { @Autowired private IDMSService dmsService; @Override public IDMSService getService() { return this.dmsService; } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to indicate the path where the dms files will be stored and the engine it will use. In this link you have information about the configuration of the DMS system in the application.yml file. The path specified in the basePath variable must exist before the server is started. Toggle Tree application.yml . ontimize: dms: engine: odms basePath: file:/C:/applications/projectwiki/dms . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add permissions . It is necessary to add the permissions required for the role associated with the user to be able to execute REST requests, which are secured. For the example, we will add all the methods and give access to the demo user role. INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContentOfVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperty'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileRecoverPreviousVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDeleteProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetAllFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/setRelatedDocuments'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentAddProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/getRelatedDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryGetForDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/moveFilesToCategory'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileVersionQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetVersions'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContent'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileQuery'); . Add all permissions to the user role demo. INSERT INTO PUBLIC.PUBLIC.TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . ",
    "url": "/docs/v3/systems/dms/#steps",
    
    "relUrl": "/systems/dms/#steps"
  },"104": {
    "doc": "DMS System",
    "title": "DMS System",
    "content": "Table of Contents . | DMS System . | Introduction | Previous concepts | Prerequisites | Steps . | Database . | DMS Tables | Link DMS table with entity table | . | Server . | Add DMS dependencies | Add DMS DAO and modify Candidate DAO | Modify CandidateService insert method | Add File Manager Rest Controller | Modify application.yml | Add permissions | . | . | . | . ",
    "url": "/docs/v3/systems/dms/",
    
    "relUrl": "/systems/dms/"
  },"105": {
    "doc": "I18N System",
    "title": "Introduction",
    "content": "Ontimize Boot&#8217;s remote internationalization service (i18n) allows you to manage the translations of the different languages of the application without having to modify the programs translation files, by storing the translations in the database. The interface implemented by the service is com.ontimize.jee.common.services.i18n.II18nService. ",
    "url": "/docs/v3/systems/i18n/#introduction",
    
    "relUrl": "/systems/i18n/#introduction"
  },"106": {
    "doc": "I18N System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n . ",
    "url": "/docs/v3/systems/i18n/#prerequisites",
    
    "relUrl": "/systems/i18n/#prerequisites"
  },"107": {
    "doc": "I18N System",
    "title": "Configuring internationalization service in Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. DB configuration . If the configuration table does not exist in the DB, the database tables necessary for the operation of the service are created, one in which the names of the translation bundles shall be stored, and another in which the translations and the bundle to which they belong shall be stored: . SQL (HSQL) Statement . CREATE TABLE TI18N(ID_I18N INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,CLASS_NAME VARCHAR(150),I18N_DESCRIPTION VARCHAR(250)); CREATE TABLE TI18N_VALUE(ID_I18N_VALUE INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,ID_I18N INTEGER NOT NULL,\"KEY\" VARCHAR(250),ES_ES LONGVARCHAR,EN_US LONGVARCHAR,ES_ES_GL LONGVARCHAR); . In the first table (the one named TI18N) we will add a bundle to link all resources of the TI18N_VALUE table. SQL (HSQL) Statement . INSERT INTO TI18N (ID_I18N, CLASS_NAME, I18N_DESCRIPTION) VALUES(0, 'i18n.bundle', 'Resource bundle in database'); . In the case of the second table (the one named TI18N_VALUE) it will contain a column with the name of each Locale accepted by the application. SQL (HSQL) Statement . INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'ID','Id. Candidato','Candidate id','Id. Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHOTO','Foto','Photo','Foto'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'NAME','Nombre','Name','Nome'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'SURNAME','Apellido','Surname','Apelido'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'BIRTHDAY','Fecha de Nacimiento','Birthday','Data de nacemento'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'DNI','DNI Candidato','Candidate DNI','DNI Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHONE','Telefono','Phone','Telefono'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'EMAIL','Correo electronico','E-mail','Correo electronico'); . Add Permissions . The com.ontimize.jee.common.services.i18n.II18nService service has several methods that we will have to add to the permissions to be able to execute the methods. SQL (HSQL) Statement . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAllResourceBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getBundle'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAvailableBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAvailableLocales'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/updateBundleValues'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/deleteBundleValues'); . Add all permissions to the user role demo. SQL (HSQL) Statement . INSERT INTO TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . Server configuration . To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: i18n: ref-bundle-repository: OCDatabaseBundleDao bundle-key-column: ID_I18N bundle-class-name-column: CLASS_NAME bundle-description-column: I18N_DESCRIPTION ref-bundle-value-repository: OCDatabaseBundleValueDao bundle-value-text-key-column: KEY bundle-value-key-column: ID_I18N_VALUE engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the ref-bundle-repository: OCDatabaseBundleDao attribute. Creation of DAO files . It is necessary to create the DAOs that reflect the new DB tables we have created. Toggle Tree First we will create the *.xml files. OCDatabaseBundleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OCDatabaseBundleValueDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N_VALUE\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N_VALUE&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java files we indicate that it is a repository whose name will be OCDatabaseBundleDao and OCDatabaseBundleValueDao respectively, using the @Repository annotation. With the @Lazy annotation, we indicate that the loading is delayed until it is completely necessary, and the @ConfigurationFile annotation allows us to configure this DAO using the XML file and an additional file where some features common to several DAOs can be stored, such as the schema they belong to. OCDatabaseBundleDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleDao() { super(); } } . OCDatabaseBundleValueDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleValueDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleValueDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleValueDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleValueDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add I18n Rest Controller . Toggle Tree I18nRestController.java . With the tag @RequestMapping we indicate the route through which the rest service will receive the requests. With the tag @RequestBody we receive the data that were sent in the rest request. In this class we create a method that retrieves the translations of a bundle that we have specified in the language that we have indicated. package com.ontimize.projectwiki.ws.core.rest; import java.util.Enumeration; import java.util.HashMap; import java.util.Map; import java.util.Locale; import java.util.ResourceBundle; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.ComponentScan; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.dto.EntityResultMapImpl; import com.ontimize.jee.common.services.i18n.II18nService; import com.ontimize.jee.server.rest.InsertParameter; @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; @RequestMapping(value = \"/bundle\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; getBundle(@RequestBody InsertParameter parameter) { Map&lt;Object, Object&gt; data = parameter.getData(); ResourceBundle resource = iI18nService.getBundle(String.valueOf(data.get(\"bundle\")), new Locale(String.valueOf(data.get(\"lang\")), String.valueOf(data.get(\"country\")))); return new ResponseEntity&lt;EntityResult&gt;(bundleToEntityResult(resource), HttpStatus.OK); } private EntityResult bundleToEntityResult(ResourceBundle resource) { Map&lt;String, String&gt; values = new HashMap&lt;&gt;(); Enumeration&lt;String&gt; keys = resource.getKeys(); EntityResult eR = new EntityResultMapImpl(); while (keys.hasMoreElements()) { String key = keys.nextElement(); values.put(\"key\", key); values.put(\"value\", resource.getString(key)); eR.addRecord(values); values = new HashMap&lt;&gt;(); } return eR; } } . | ontimize-examples . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . | . ",
    "url": "/docs/v3/systems/i18n/#configuring-internationalization-service-in-ontimize-boot",
    
    "relUrl": "/systems/i18n/#configuring-internationalization-service-in-ontimize-boot"
  },"108": {
    "doc": "I18N System",
    "title": "Testing the i18n services",
    "content": "To test the i18n service we will use REST requests. For this, the following query will be executed: localhost:33333/i18n/bundle . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle | Indicates the request mapping class | . The request types can only be POST and the request body has to have the following structure: . | Element | Meaning | . | bundle | Indicates the class name of the bundle specified in the database | . | lang | Indicates the language of the bundle. It needs to be lowercase. | . | country | Indicates the country of the language. It needs to be uppercase. | . | Request type | Query | URL | Service method | Body request | . | POST | query | localhost:33333/i18n/bundle | getBundle | Example below | . Body request: . { \"data\": { \"bundle\": \"i18n.bundle\", \"lang\": \"en\", \"country\": \"US\" } } . The authorization used for these requests is authorization of the type BASIC. In this case, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/systems/i18n/#testing-the-i18n-services",
    
    "relUrl": "/systems/i18n/#testing-the-i18n-services"
  },"109": {
    "doc": "I18N System",
    "title": "Uses of I18n Rest Controller",
    "content": "The i18n interface has a few methods for managing bundles or translations. Next in this example, we will test the bundle values CRUD(Create, Read, Update, Delete) methods. To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. Query bundle values . To query the bundle values we create a method that receieves the bundle class, the language to query and the country of this language. The code to query the values of a bundle is in the previous section. Update bundle values . To update the bundle values we create a method that receieves the translations to modify of a bundle that we have specified. Code . Toggle Tree I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.UpdateParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/update\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE) public void updateBundleValues(@RequestBody UpdateParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getData().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); ArrayList e = (ArrayList) parameter.getData().get(\"bundleValues\"); Map&lt;String, Object&gt; translationValues = new HashMap&lt;&gt;(); for (int i = 0; i &lt; e.size(); i++) { Map&lt;String,Object&gt; map = (Map&lt;String, Object&gt;) e.get(i); translationValues.put(String.valueOf(map.get(\"language\")), map.get(\"value\")); } values.addBundleValue(key, bundleClass, translationValues); iI18nService.updateBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . REST request . The request to execute is the following: localhost:33333/i18n/bundle/update . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/update | Indicates the request mapping class | . The request types can only be PUT and the request body has to have the following structure: . | Element | Meaning | . | key | Indicates the key of the value to be translated. | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | bundleValues | Indicates the values of the translation to be modified. | . Body request: . { \"filter\":{ \"key\": \"EMAIL\" }, \"data\": { \"bundleClass\": \"i18n.bundle\", \"bundleValues\": [ { \"language\":\"es_ES\", \"value\":\"ejemplo@ejemplo.com\" }, { \"language\":\"en_US\", \"value\":\"example@example.com\" }, { \"language\":\"gl_ES\", \"value\":\"exemplo@exemplo.com\" } ] } } . Insert bundle values . The method to update the bundle values explained in the previous point also allows creating a new value in the case of the specified value does not exist in the database. DatabaseI18nEngine.java . Object key = this.getBundleValueKey(filter); if (key != null) { // update filter.put(this.bundleValuesKeyColumn, key); this.daoBundleValues.update(hValues, filter); } else { // insert hValues.putAll(filter); this.daoBundleValues.insert(hValues); } . Delete bundle values . To delete the bundle values we create a method that receives the bundle class and the key of the bundle values. Toggle Tree I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.DeleteParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/delete\", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE) public void deleteBundleValues(@RequestBody DeleteParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getFilter().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); values.addBundleValue(key, bundleClass, null); iI18nService.deleteBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . The request to execute is the following: localhost:33333/i18n/bundle/delete . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/delete | Indicates the request mapping class | . The request types can only be DELETE and the request body has to have the following structure: . | Element | Meaning | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | key | Indicates the key of the value to be translated. | . Body Request . { \"filter\":{ \"bundleClass\": \"i18n.bundle\", \"key\": \"EMAIL\" } } . ",
    "url": "/docs/v3/systems/i18n/#uses-of-i18n-rest-controller",
    
    "relUrl": "/systems/i18n/#uses-of-i18n-rest-controller"
  },"110": {
    "doc": "I18N System",
    "title": "I18N System",
    "content": "Table of Contents . | Introduction | Prerequisites | Configuring internationalization service in Ontimize Boot . | DB configuration | Add Permissions | Server configuration | Creation of DAO files | Add I18n Rest Controller | . | Testing the i18n services | Uses of I18n Rest Controller . | Query bundle values | Update bundle values | Insert bundle values | Delete bundle values | . | . ",
    "url": "/docs/v3/systems/i18n/",
    
    "relUrl": "/systems/i18n/"
  },"111": {
    "doc": "LDAP Security",
    "title": "LDAP Security",
    "content": " ",
    "url": "/docs/v3/systems/ldap#ldap-security",
    
    "relUrl": "/systems/ldap#ldap-security"
  },"112": {
    "doc": "LDAP Security",
    "title": "Introduction",
    "content": "The Lightweight Directory Access Protocol (LDAP) is an open protocol for accessing a company&#8217;s information services. Typically, this protocol is used to provide all company users with an easy way to use all services that require access credentials with a single username and password. ",
    "url": "/docs/v3/systems/ldap#introduction",
    
    "relUrl": "/systems/ldap#introduction"
  },"113": {
    "doc": "LDAP Security",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-ldap-login-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-ldap-login . ",
    "url": "/docs/v3/systems/ldap#prerequisites",
    
    "relUrl": "/systems/ldap#prerequisites"
  },"114": {
    "doc": "LDAP Security",
    "title": "Steps",
    "content": "Database . Add a new user . With the database started, we create a new user with the same username that we have registered in the domain. When we try to login we need to use the password of the domain, not the password that inserts into the database. Then, we need to bind this new user with an existing role. INSERT INTO TUSER (USER_, PASSWORD, NAME, SURNAME, EMAIL, NIF, USERBLOCKED, LASTPASSWORDUPDATE, FIRSTLOGIN) VALUES('domain.username', 'somepassword', 'Name', 'Surname', 'Email', 'Nif', NULL, NULL, NULL); . INSERT INTO TUSER_ROLE (ID_ROLENAME,USER_) VALUES (0,'domain.username'); . Autoconfigurators . Add LDAP autoconfigurators . Toggle Tree LdapError.java . package com.ontimize.projectwiki.security; public interface LdapError { public static final String NO_LDAP_CONNECTION = \"NO_CONNECT_TO_LDAP\"; public static final String ERROR_SEARCHING_IN_LDAP = \"ERROR_SEARCHING_IN_LDAP\"; public static final String ERROR_LOGIN_LDAP = \"LOGINEXCEPTION_WITH_LDAP\"; public static final String ERROR_IO_LDAP = \"IOEXCEPTION_WITH_LDAP\"; public static final String EMPTY_LDAP_HOST = \"HOST_CANNOT_BE_EMPTY\"; public static final String EMPTY_LDAP_USER = \"USER_CANNOT_BE_EMPTY\"; public static final String EMPTY_LDAP_PASSWORD = \"PASSWORD_CANNOT_BE_EMPTY\";; public static final String LDAP_AUTH_USER_PASS_NOT_VALID = \"LDAP_CREDENTIALS_NOT_VALID\"; } . LdapAuthenticationMechanism.java . package com.ontimize.projectwiki.security; import java.io.IOException; import java.io.UnsupportedEncodingException; import java.util.Hashtable; import java.util.StringTokenizer; import javax.naming.Context; import javax.naming.NamingException; import javax.naming.directory.DirContext; import javax.naming.directory.InitialDirContext; import javax.security.auth.login.LoginException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.aspectj.weaver.Utils; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Value; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.BadCredentialsException; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.crypto.codec.Base64; import org.springframework.stereotype.Component; import com.ontimize.jee.server.security.authentication.AuthenticationResult; import com.ontimize.jee.server.security.authentication.IAuthenticationMechanism; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationProvider; @Component public class LdapAuthenticationMechanism implements IAuthenticationMechanism { private static final Logger LOGGER = LoggerFactory.getLogger(LdapAuthenticationMechanism.class); private String credentialsCharset = \"UTF-8\"; @Value(\"${ldap.host}\") private String ldapHost; @Value(\"${ldap.port}\") private int ldapPort; @Value(\"${ldap.login-type}\") private String loginType; @Value(\"${ldap.bind.dn}\") private String ldapBindDn; @Value(\"${ldap.domain}\") private String ldapDomain; @Value(\"${ldap.base.dn}\") private String ldapBaseDn; @Override public AuthenticationResult authenticate(final HttpServletRequest request, final HttpServletResponse response, final AuthenticationManager authenticationManager, final UserDetailsService userDetailsService) { try { final String header = request.getHeader(\"Authorization\"); if ((header == null) || !header.startsWith(\"Basic \")) { return null; } final String[] tokens = this.extractAndDecodeHeader(header, request); assert tokens.length == 2; final String username = tokens[0]; final String password = tokens[1]; LdapAuthenticationMechanism.LOGGER.trace(\"Validating access for user : '{}'\", username); DirContext dirContext = null; if (loginType.equals(\"DN\")) { String userDn = \"uid=\" + username + \",\" + ldapBindDn; dirContext = connect(userDn, password, ldapHost, ldapPort, null, false); } else if (loginType.equals(\"simple\")) { dirContext = connect(username, password, ldapHost, ldapPort, ldapDomain, false); } if (dirContext != null) { return new AuthenticationResult(true, new UsernamePasswordAuthenticationToken(username, OntimizeAuthenticationProvider.NO_AUTHENTICATION_TOKEN)); } else { LOGGER.error(\"System authentication failed: no connect to LDAP\"); throw new BadCredentialsException(LdapError.NO_LDAP_CONNECTION.toString()); } } catch (NamingException e) { LOGGER.error(\"System authentication failed: NamingException searching into server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_SEARCHING_IN_LDAP.toString()); } catch (LoginException e) { LOGGER.error(\"System authentication failed: LoginException with server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_LOGIN_LDAP.toString()); } catch (IOException e) { LOGGER.error(\"System authentication failed: IOException with server LDAP\", e); throw new BadCredentialsException(LdapError.ERROR_IO_LDAP.toString()); } } public static synchronized DirContext connect(final String user, final String password, final String hosts, final int port, final String adddomain, boolean ssl) throws NamingException, java.io.IOException, LoginException { if ((hosts == null) || (hosts.length() == 0)) { LOGGER.error(\"LDAP host cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_HOST.toString()); } StringTokenizer st = new StringTokenizer(hosts, \";\"); while (st.hasMoreTokens()) { String host = st.nextToken(); return _connect(user, password, host, port, adddomain, ssl); } return null; } private static synchronized DirContext _connect(final String user, final String password, final String host, final int port, final String adddomain, boolean ssl) throws NamingException, java.io.IOException, LoginException { Hashtable&lt;String, String&gt; props = new Hashtable&lt;&gt;(); if ((user == null) || (user.length() == 0)) { LOGGER.error(\"user cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_USER.toString()); } if ((password == null) || (password.length() == 0)) { LOGGER.error(\"password cannot be neither null nor empty\"); throw new IllegalArgumentException(LdapError.EMPTY_LDAP_PASSWORD.toString()); } props.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\"); props.put(Context.PROVIDER_URL, \"ldap://\" + host + \":\" + port); props.put(Context.SECURITY_AUTHENTICATION, \"simple\"); if (adddomain != null) { props.put(Context.SECURITY_PRINCIPAL, user + \"@\" + adddomain); } else { props.put(Context.SECURITY_PRINCIPAL, user); } props.put(Context.SECURITY_CREDENTIALS, password); if (ssl) { props.put(Context.SECURITY_PROTOCOL, \"ssl\"); } props.put(Context.REFERRAL, \"follow\"); DirContext ctx = null; try { ctx = new InitialDirContext(props); LOGGER.info(\"Authentication sucessfully in LDAP\"); } catch (Exception e) { LOGGER.error(\"System authentication failed: wrong user and/or pass in LDAP\"); throw new BadCredentialsException(LdapError.LDAP_AUTH_USER_PASS_NOT_VALID.toString()); } return ctx; } private String[] extractAndDecodeHeader(final String header, final HttpServletRequest request) { try { final byte[] base64Token = header.substring(6).getBytes(\"UTF-8\"); byte[] decoded; decoded = Base64.decode(base64Token); final String token = new String(decoded, this.getCredentialsCharset(request)); final int delim = token.indexOf(':'); if (delim == -1) { throw new BadCredentialsException(\"Invalid basic authentication token\"); } return new String[] { token.substring(0, delim), token.substring(delim + 1) }; } catch (IllegalArgumentException | UnsupportedEncodingException error) { throw new BadCredentialsException(\"Failed to decode basic authentication token\", error); } } protected String getCredentialsCharset(final HttpServletRequest httpRequest) { return this.credentialsCharset; } } . CustomSecurityAutoConfiguration.java . package com.ontimize.projectwiki.security; import java.util.ArrayList; import org.springframework.beans.factory.annotation.Value; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import com.ontimize.boot.autoconfigure.security.DefaultSecurityAutoConfiguration; import com.ontimize.jee.server.security.authentication.IAuthenticationMechanism; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationFilter; import com.ontimize.jee.server.security.authentication.OntimizeAuthenticationSuccessHandler; @Configuration @EnableWebSecurity @EnableAutoConfiguration @ConditionalOnProperty(name = \"ontimize.security.mode\", havingValue = \"ldap\", matchIfMissing = false) public class CustomSecurityAutoConfiguration extends DefaultSecurityAutoConfiguration { @Value(\"${ontimize.security.service-path:/**}\") private String servicePath; @Value(\"${ontimize.security.ignore-paths:}\") private String[] ignorePaths; @Override public OntimizeAuthenticationFilter preAuthFilterOntimize() throws Exception { OntimizeAuthenticationFilter filter = new OntimizeAuthenticationFilter(this.servicePath); filter.setUserDetailsService(this.userDetailsService()); filter.setUserCache(this.userCache()); filter.setTokenGenerator(this.tokenGenerator()); filter.setGenerateJwtHeader(true); filter.setAuthenticationManager(this.authenticationManager()); filter.setAuthenticationEntryPoint(this.authenticationEntryPoint()); filter.setAuthenticationMechanismList(new ArrayList&lt;&gt;()); filter.getAuthenticationMechanismList().add(this.jwtAuthenticator()); filter.getAuthenticationMechanismList().add(this.ldapAuthenticator()); filter.setAuthenticationSuccessHandler(new OntimizeAuthenticationSuccessHandler()); filter.afterPropertiesSet(); return filter; } @Bean public IAuthenticationMechanism ldapAuthenticator() { return new LdapAuthenticationMechanism(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | security . | CustomSecurityAutoConfiguration.java | LdapAuthenticationMechanism.java | LdapError.java | . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . Add LDAP properties . In the application.yml we need to change the ontimize security mode to ldap and add the following properties (More information in this link): . Toggle Tree application.yml . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 login-type: simple bind.dn: base.dn: domain: yourdomain.com . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | security . | CustomSecurityAutoConfiguration.java | LdapAuthenticationMechanism.java | LdapError.java | . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/ldap#steps",
    
    "relUrl": "/systems/ldap#steps"
  },"115": {
    "doc": "LDAP Security",
    "title": "LDAP Security",
    "content": "Table of Contents . | LDAP Security . | Introduction | Prerequisites | Steps . | Database . | Add a new user | . | Autoconfigurators . | Add LDAP autoconfigurators | . | Modify application.yml . | Add LDAP properties | . | . | . | . ",
    "url": "/docs/v3/systems/ldap",
    
    "relUrl": "/systems/ldap"
  },"116": {
    "doc": "Mail System",
    "title": "Mail System",
    "content": " ",
    "url": "/docs/v3/systems/mail/#mail-system",
    
    "relUrl": "/systems/mail/#mail-system"
  },"117": {
    "doc": "Mail System",
    "title": "Introduction",
    "content": "Ontimize Boot is a framework that allows you to simplify the configuration of a project made with Ontimize EE, in a fast and efficient way. The email system allows you to send mail from the server with a simple configuration. ",
    "url": "/docs/v3/systems/mail/#introduction",
    
    "relUrl": "/systems/mail/#introduction"
  },"118": {
    "doc": "Mail System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail . ",
    "url": "/docs/v3/systems/mail/#prerequisites",
    
    "relUrl": "/systems/mail/#prerequisites"
  },"119": {
    "doc": "Mail System",
    "title": "Configuring email service with Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. At the end of the tutorial, we will even be testing that our mailing system is fully operational and functional. DB configuration . If the configuration table does not exist in the DB, it can be created with the following command: . Sentencia SQL (HSQL) . CREATE TABLE TSETTING(ID_SETTING INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,SETTING_KEY LONGVARCHAR,SETTING_VALUE LONGVARCHAR,SETTING_COMMENTLONGVARCHAR); . We fill in this table with the data that applies to each specific mail server, in this example, we will use the following: . | SETTING_KEY | SETTING_VALUE | SETTING_COMMENT | . | mail_host | localhost | Server host | . | mail_port | 2525 | Email server port | . | mail_protocol | smtp | Mailing protocol | . | mail_user | my.mail@example.com | User for sending | . | mail_password | my_password | Mail server password | . | mail_encoding | UTF-8 | Encoding of mails | . | mail_properties | mail.smtp.auth:true; mail.smtp.starttls.enable:true; | Mail properties | . Sentencia SQL (HSQL) . INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_host', 'localhost', 'Server host'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_port', '2525', 'Email server port'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_protocol', 'smtp', 'Mailing protocol'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_user', 'my.mail@example.com', 'User for sending'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_password', 'my_password', 'Mail server password'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_encoding', 'UTF-8', 'Encoding of mails'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_properties', 'mail.smtp.auth:true;mail.smtp.starttls.enable:true;', 'Mail properties'); . The implementation interface contains multiple methods, to which we must give permissions, if our application has permissions: . Sentencia SQL (HSQL) . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.mail.IMailServiceServer/sendMail'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.mail.IMailServiceServer/sendMailWithoutAttach'); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.server.services.mail.IMailServiceServer/sendMail')); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.server.services.mail.IMailServiceServer/sendMailWithoutAttach')); . Adding dependencies . Now we need to add the correct dependency in the correct pom.xml: . Toggle Tree ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Server Configuration . Toggle Tree To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: mail: ref-repository: OCSettingsDao filter-column-name: SETTING_KEY value-column-name: SETTING_VALUE query-id: default filter-column-value-encoding: mail_encoding filter-column-value-host: mail_host filter-column-value-port: mail_port filter-column-value-protocol: mail_protocol filter-column-value-user: mail_user filter-column-value-password: mail_password filter-column-value-java-mail-properties: mail_properties engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the refRepository: OCSettingsDao attribute (in this case, OCSettingsDao), which can be seen in the table TSETTING attribute (for this example, TSETTING) of the *.xml configuration file of the bean (OCSettingsDao.xml). The keys would be stored in the SETTING_KEY column, the values in the SETTING_VALUE column and the rest of the attributes map the keys that exist in the database. In addition, the packet that will be scanned to look for the implementation of the email service is indicated. | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Creation of DAO files . Let&#8217;s create a DAO (Data Access Object) in the projectwiki-model module to use as a model of this database table. The DAO is composed by 2 files, a file with extension *.xml and a *.java file. Toggle Tree In our *.xml file we will indicate the database table for which DAO belongs, the data source from which we collect the information (e.g. the database connection that contains this table) and the schema to which the table belongs. OCSettingsDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSETTING\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_SETTING&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java file we indicate that it is a repository whose name will be OCSettingsDao, through the annotation @Repository. With the annotation @Lazy, we will indicate that the load is delayed until it is completely necessary (improving in that way the performance), and the annotation @ConfigurationFile allows us to configure this DAO using the XML file and an additional file where some common characteristics to several DAOs can be stored. like the scheme to which they belong. OCSettingsDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OCSettingsDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCSettingsDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCSettingsDao extends OntimizeJdbcDaoSupport { public OCSettingsDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Implementation in an existing service . To use this service in another service (e.g. to send a mail when a new record is created), just add a variable of type com.ontimize.jee.common.services.mail.IMailService and annotate it with @Autowired. For space reasons, the entire files are not included, only the code snippets related to the tutorial. The &#8230; in the code snippets indicate that there may be unrelated code before or after them. Toggle Tree ... import com.ontimize.jee.common.services.mail.IMailService; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private IMailService mailService; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { EntityResult toRet = this.daoHelper.insert(this.candidateDao, attrMap); if ((toRet.getCode() != EntityResult.OPERATION_WRONG)) { Runnable runnable = () -&gt; { List&lt;String&gt; receiverList = new ArrayList&lt;String&gt;(); receiverList.add(\"receiver@example.com\"); StringBuilder builder = new StringBuilder(); builder.append(\"Created new user.\"); try { this.mailService.sendMailWithoutAttach(\"my.mail@example.com\", receiverList, \"New candidate\", builder.toString()); } catch (OntimizeJEEException e) { } }; DelegatingSecurityContextRunnable wrappedRunnable = new DelegatingSecurityContextRunnable(runnable); new Thread(wrappedRunnable).start(); } return toRet; } ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/mail/#configuring-email-service-with-ontimize-boot",
    
    "relUrl": "/systems/mail/#configuring-email-service-with-ontimize-boot"
  },"120": {
    "doc": "Mail System",
    "title": "Checking the sending of mails",
    "content": "In order to check that the created service is indeed sending mails, we will use an external service called FakeSMTP, is a free Fake SMTP Server with GUI for testing emails in applications easily. To do this, we enter this link and clone the repository it indicates into the workspace where we have our project. We launch the DB and the server. Next, open a console and move to the path where FakeSMTP was downloaded: ...\\FakeSMTP&gt; mvn package-Dmaven.test.skip ...\\FakeSMTP&gt; cd target ...\\FakeSMTP\\target&gt; java -jar fakeSMTP-2.1-SNAPSHOT.jar -s -p 2525 . | Command | Meaning | 34 | . | fakeSMTP-VERSION.jar | Downloaded version. | &#160; | . | -s | Launch the server. | &#160; | . | - p 2525 | Launch the application on the port indicated. | &#160; | . Now we can use an application like Postman to execute different REST requests to our project. Use REST request . The requests contains the following structure: localhost:33333/candidates/candidate . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /candidates | Indicates the service to be queried | . | /candidate | Indicates the DAO that will access that service | . The request types can only be GET, POST, PUT, DELETE. Below are examples of request for candidates (CANDIDATES). The authorization used for these requests is authorization of the type BASIC. In both cases, the access must be done with a user and password example: . User: demo Password: demouser . | Request type | Query | URL | Service method | Body request | . | POST | insert | localhost:33333/candidates/candidate | candidateInsert | Example below | . Body request: . { \"data\": { \"PHONE\": \"555-444-8888\", \"BIRTHDAY\": 788224700000, \"SURNAME\": \"Wilson\", \"EMAIL\": \"wwiilsoon@example.org\", \"SPECIALTIES\": \"C#\", \"NAME\": \"William\", \"DNI\": \"88643946Z\" }, \"sqltypes\": { \"SPECIALTIES\": 12, \"LINKEDIN\": 12, \"PHONE\": 12, \"EXPERIENCE_LEVEL\": 4, \"STATUS\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"DNI\": 12, \"ID\": 4, \"ORIGIN\": 4, \"EDUCATION\": 4, \"COMMENT\": 12, \"PROFILE\": 4, \"SURNAME\": 12, \"NAME\": 12, \"BIRTHDAY\": 91 } } . ",
    "url": "/docs/v3/systems/mail/#checking-the-sending-of-mails",
    
    "relUrl": "/systems/mail/#checking-the-sending-of-mails"
  },"121": {
    "doc": "Mail System",
    "title": "Mail System",
    "content": "Table of Contents . | Mail System . | Introduction | Prerequisites | Configuring email service with Ontimize Boot . | DB configuration | Adding dependencies | Server Configuration | Creation of DAO files | Implementation in an existing service | . | Checking the sending of mails . | Use REST request | . | . | . ",
    "url": "/docs/v3/systems/mail/",
    
    "relUrl": "/systems/mail/"
  },"122": {
    "doc": "Preferences System",
    "title": "Preferences System",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/preferences/#preferences-system",
    
    "relUrl": "/systems/preferences/#preferences-system"
  },"123": {
    "doc": "Preferences System",
    "title": "Introduction",
    "content": "The Ontimize preferences allow you to save the settings that are stored in the localstorage (window size, tables preferences, graphics, or reports) into the database. ",
    "url": "/docs/v3/systems/preferences/#introduction",
    
    "relUrl": "/systems/preferences/#introduction"
  },"124": {
    "doc": "Preferences System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-preferences-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-preferences . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/preferences/#prerequisites",
    
    "relUrl": "/systems/preferences/#prerequisites"
  },"125": {
    "doc": "Preferences System",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v3/systems/preferences/#steps",
    
    "relUrl": "/systems/preferences/#steps"
  },"126": {
    "doc": "Preferences System",
    "title": "Database",
    "content": "Configurations Table . With the database started, we create the new table that will store the configuration preferences information. CREATE TABLE TCONFIGS ( ID_CONFIG INTEGER NOT NULL IDENTITY, USER_CONFIG VARCHAR(255), TYPE_CONFIG VARCHAR(255), COMPONENTS VARCHAR(16777216)); . ",
    "url": "/docs/v3/systems/preferences/#database",
    
    "relUrl": "/systems/preferences/#database"
  },"127": {
    "doc": "Preferences System",
    "title": "Server",
    "content": "Configuration Dao . A specific DAO will be created for the table in the Preferences system, and it will implement a interface. Toggle Tree ConfigsDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"ConfigsDao\") @ConfigurationFile( configurationFile = \"dao/ConfigsDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ConfigsDao extends OntimizeJdbcDaoSupport { public static final String ID = \"ID_CONFIG\"; public static final String USER = \"USER_CONFIG\"; public static final String TYPE = \"TYPE_CONFIG\"; public static final String COMPONENTS = \"COMPONENTS\"; } . ConfigsDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TCONFIGS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_CONFIG&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_CONFIG&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;/JdbcEntitySetup&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | ConfigsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | ConfigsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add parameters to Application YML . As has already been explained previously (in this link) we add the following parameters to the application.yml to define the name of the DAO of the preferences system and to activate autoconfiguration. Toggle Tree application.yml . ontimize: save-config: true save-config-dao: ConfigsDao . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | ConfigsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | ConfigsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/preferences/#server",
    
    "relUrl": "/systems/preferences/#server"
  },"128": {
    "doc": "Preferences System",
    "title": "Testing the preferences system",
    "content": "Once the preferences system is already configured and the server and the database are running, we will follow the next steps: . Add preferences to database . To add or modify preferences to the database, we will execute the following REST Request: http://localhost:33333/configuration/preferences . The type of the request is POST. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /configuration | Indicates the service | . | /preferences | Indicates the type of configuration that you&#8217;re going to save. You can write the name you want. | . The body of the request needs to have the following structure: . { \"user\":\"demo\", \"components\":{ \"lang\":\"es\", ... \"theme\":{\"primary\":\"#242424\",\"accent\":\"#ffcc00\",\"href\":\"ontimize-black-yellow.css\",\"href_dark\":\"ontimize-black-yellow-dark.css\",\"isDefault\":true,\"isDark\":false}, } } . By default the request will create a new entry in the database. If it already exists, it will be modified. Query preferences . To query preferences of the database, we will execute the following REST Request: http://localhost:33333/configuration/preferences?user=demo . The type of the request is GET. | Element | Meaning | . | localhost:33333 | Indicates the host. | . | /configuration | Indicates the service to be queried. | . | /preferences | Indicates the type of configuration that will be queried. | . | ?user=demo | Indicates the user. | . ",
    "url": "/docs/v3/systems/preferences/#testing-the-preferences-system",
    
    "relUrl": "/systems/preferences/#testing-the-preferences-system"
  },"129": {
    "doc": "Preferences System",
    "title": "Preferences System",
    "content": "Table of Contents . | Preferences System | Introduction | Prerequisites | Steps . | Database . | Configurations Table | . | Server . | Configuration Dao | Add parameters to Application YML | . | Testing the preferences system . | Add preferences to database | Query preferences | . | . | . ",
    "url": "/docs/v3/systems/preferences/",
    
    "relUrl": "/systems/preferences/"
  },"130": {
    "doc": "Report On Demand",
    "title": "Report On Demand",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/reports/report-on-demand#report-on-demand",
    
    "relUrl": "/systems/reports/report-on-demand#report-on-demand"
  },"131": {
    "doc": "Report On Demand",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. Clone the repository with the initial state and follow the tutorial step by step. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. In the first step we will learn how to configure the reports system with the database engine. If you want to use the file system engine you can jump to this section. ",
    "url": "/docs/v3/systems/reports/report-on-demand#prerequisites",
    
    "relUrl": "/systems/reports/report-on-demand#prerequisites"
  },"132": {
    "doc": "Report On Demand",
    "title": "Steps",
    "content": "Database . Report Tables . With the database started, we create the new tables that will store the reports information. We&#8217;re going to need to create two different tables, one for the report itself and one for the report custom parameters. CREATE TABLE PREFERENCES(ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(255),DESCRIPTION VARCHAR(255),PREFERENCES VARCHAR(5000),ENTITY VARCHAR(100), TYPE BIT) . Server . Add Ontimize Report dependencies . Toggle Tree projectwiki-boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-report&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... projectwiki-model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.report&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-report-server&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Add Preferences DAOs . A specific DAO will be created for each of both tables in the system, and each of them will implement a different interface. Toggle Tree PreferencesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"PREFERENCES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . PreferencesDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.IPreferencesDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"PreferencesDao\") @ConfigurationFile(configurationFile = \"base-dao/PreferencesDao.xml\", configurationFilePlaceholder = \"base-dao/placeholders.properties\") public class PreferencesDao extends OntimizeJdbcDaoSupport implements IPreferencesDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_PREFERENCES = \"PREFERENCES\"; public static final String ATTR_TYPE = \"TYPE\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | PreferencesDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | PreferencesDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the reports module, indicate the report engine type it will use and, if needed, the path where the report files will be stored. In this link you have information about the configuration of the reports system in the application.yml file. The enable property must be set to true and the engine type must be specified in the engine property before the server is started. You can only choose ONE of the two options listed below. Toggle Tree application.yml . For database engine . ontimize: report: enable: true engine: database . For file system engine . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/reports/report-on-demand#steps",
    
    "relUrl": "/systems/reports/report-on-demand#steps"
  },"133": {
    "doc": "Report On Demand",
    "title": "Testing the reports system",
    "content": "Once the reports system is already configured and the server and the database are running, we will follow the next steps: . Generate report . | URL: http://localhost:33333/dynamicjasper/report | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /dynamicjasper | Indicates the service to be queried | . | /report | Indicates the method of the service that is going to be executed | . Body request: . { \"title\": \"Report on demand\", \"groups\": [], \"entity\": \"customer\", \"service\": \"Customer\", \"vertical\": true, \"functions\": [{\"columnName\":\"\", \"type\":\"TOTAL\"}, {\"columnName\":\"CUSTOMERTYPEID\", \"type\":\"SUM\"}], \"style\": { \"columnName\":true, \"grid\":false, \"rowNumber\":false}, \"subtitle\": \"Example\", \"columns\": [ {\"id\": \"NAME\", \"name\": \"Nombre\", \"columnStyle\": {\"width\": 50, \"alignment\": \"left\"}}, {\"id\": \"CUSTOMERTYPEID\", \"name\": \"ID\", \"columnStyle\": {\"width\": 80, \"alignment\": \"left\"}}, {\"id\": \"STARTDATE\", \"name\": \"Date\", \"columnStyle\": {\"width\": 60, \"alignment\": \"left\"}}], \"orderBy\": [] } . Save preferences . Allows to save the configuration of a report in the database to do it again quickly . | URL: http://localhost:33333/preferences/save | HTTP Method: POST | Authorization: Basic Auth with parameters User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /save | Indicates the method of the service that is going to be executed | . Body request: . { \"name\":\"PreferencesExample\", \"description\":\"PreferencesDescription\", \"entity\": \"customer\", \"service\": \"Customer\", \"type\":\"REPORT\", \"params\": { \"title\": \"Report on demand\", \"groups\": [], \"entity\": \"customer\", \"service\": \"Customer\", \"vertical\": true, \"functions\": [{\"columnName\":\"\", \"type\":\"TOTAL\"}, {\"columnName\":\"CUSTOMERTYPEID\", \"type\":\"SUM\"}], \"style\": { \"columnName\":true, \"grid\":false, \"rowNumber\":false}, \"subtitle\": \"Example\", \"columns\": [ {\"id\": \"NAME\", \"name\": \"Nombre\", \"columnStyle\": {\"width\": 50, \"alignment\": \"left\"}}, {\"id\": \"CUSTOMERTYPEID\", \"name\": \"ID\", \"columnStyle\": {\"width\": 80, \"alignment\": \"left\"}}, {\"id\": \"STARTDATE\", \"name\": \"Date\", \"columnStyle\": {\"width\": 60, \"alignment\": \"left\"}}], \"orderBy\": [] } } . Get preferences . Execute the following request: http://localhost:33333/preferences/preferences?entity=ENTITY&amp;service=SERVICE&amp;type=REPORT. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /preferences | Indicates the method of the service that is going to be executed | . | ?entity=ENTITY | ENTITY indicates the entity to filter the preferences | . | &amp;service=SERVICE | SERVICE indicates the service to filter the preferences | . | &amp;type=REPORT | Indicates the type to filter the preferences | . The authorization used for these requests is authorization of the type BASIC. In all three cases cases, the access must be done with a user and password example: . User: demo Password: demouser . Visualize report document . When you run the above request, in the body of the response you will find the key file, whose value is a Base 64 that contains the format and data of the report template. Copy it and go to this page to convert the Base 64 into a PDF file. ",
    "url": "/docs/v3/systems/reports/report-on-demand#testing-the-reports-system",
    
    "relUrl": "/systems/reports/report-on-demand#testing-the-reports-system"
  },"134": {
    "doc": "Report On Demand",
    "title": "Report On Demand",
    "content": "Table of Contents . | Report On Demand . | Prerequisites | Steps . | Database . | Report Tables | . | Server . | Add Ontimize Report dependencies | Add Preferences DAOs | Modify application.yml | . | . | Testing the reports system . | Generate report | Save preferences | Get preferences | Visualize report document | . | . | . ",
    "url": "/docs/v3/systems/reports/report-on-demand",
    
    "relUrl": "/systems/reports/report-on-demand"
  },"135": {
    "doc": "Report Store",
    "title": "Report Store",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/reports/report-store#report-store",
    
    "relUrl": "/systems/reports/report-store#report-store"
  },"136": {
    "doc": "Report Store",
    "title": "Introduction",
    "content": "The Report Store system will allow you to store, manage and export all kinds of reports designed and implemented via the JasperReports API. This module will let you use your Ontimize application data as data sources for your reports, allowing you to fully customize its layout with tables, charts, graphs&#8230; and also visualize, export, print and download your reports. ",
    "url": "/docs/v3/systems/reports/report-store#introduction",
    
    "relUrl": "/systems/reports/report-store#introduction"
  },"137": {
    "doc": "Report Store",
    "title": "Previous concepts",
    "content": ". | Report: It is the generic representation of a report. One report can have one or multiple custom report parameters, or have none. | Main report file: The file containing all the information regarding the report layout, along with the data sources, connections and other configuration directives. Written in .jrxml format. | Report parameter: It is the generic representation of a custom report parameter. They are used for defining filters, implementing pagination, or even specifying the report data source. | . ",
    "url": "/docs/v3/systems/reports/report-store#previous-concepts",
    
    "relUrl": "/systems/reports/report-store#previous-concepts"
  },"138": {
    "doc": "Report Store",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. In the first step we will learn how to configure the reports system with the database engine. If you want to use the file system engine you can jump to this section. ",
    "url": "/docs/v3/systems/reports/report-store#prerequisites",
    
    "relUrl": "/systems/reports/report-store#prerequisites"
  },"139": {
    "doc": "Report Store",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v3/systems/reports/report-store#steps",
    
    "relUrl": "/systems/reports/report-store#steps"
  },"140": {
    "doc": "Report Store",
    "title": "Database",
    "content": "Report Tables . With the database started, we create the new tables that will store the reports information. We&#8217;re going to need to create two different tables, one for the report itself and one for the report custom parameters. CREATE TABLE REPORTS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, UUID VARCHAR(255) NOT NULL, NAME VARCHAR(255), DESCRIPTION VARCHAR(255), REPORT_TYPE VARCHAR(255), MAIN_REPORT_FILENAME VARCHAR(255) NOT NULL, ZIP VARBINARY(16777216), COMPILED VARBINARY(16777216)); CREATE TABLE REPORT_PARAMETERS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, REPORT_ID INTEGER NOT NULL, NAME VARCHAR(255), DESCRIPTION VARCHAR(255), NESTED_TYPE VARCHAR(255), VALUE_CLASS VARCHAR(255)); . Once the tables have been created, we add the foreign key . ALTER TABLE REPORT_PARAMETERS ADD CONSTRAINT REPORT_PARAMETERS_FK FOREIGN KEY(REPORT_ID) REFERENCES REPORTS(ID); . ",
    "url": "/docs/v3/systems/reports/report-store#database",
    
    "relUrl": "/systems/reports/report-store#database"
  },"141": {
    "doc": "Report Store",
    "title": "Server",
    "content": "Add Ontimize Report dependencies . Toggle Tree projectwiki-boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-report&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... projectwiki-model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.report&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-report-server&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Add Report DAOs . A specific DAO will be created for each of both tables in the reports system, and each of them will implement a different interface. Toggle Tree ReportDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"REPORTS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ReportParameterDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"REPORT_PARAMETERS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ReportDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.reportstore.dao.IReportDao; @Lazy @Repository(value = \"ReportDao\") @ConfigurationFile(configurationFile = \"dao/ReportDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ReportDao extends OntimizeJdbcDaoSupport implements IReportDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_REPORT_TYPE = \"REPORT_TYPE\"; public static final String ATTR_MAIN_REPORT_FILENAME = \"MAIN_REPORT_FILENAME\"; public static final String ATTR_ZIP = \"ZIP\"; public static final String ATTR_COMPILED = \"COMPILED\"; public ReportDao() { super(); } } . ReportParameterDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.reportstore.dao.IReportParameterDao; @Lazy @Repository(value = \"ReportParameterDao\") @ConfigurationFile(configurationFile = \"dao/ReportParameterDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ReportParameterDao extends OntimizeJdbcDaoSupport implements IReportParameterDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_REPORT_ID = \"REPORT_ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_NESTED_TYPE = \"NESTED_TYPE\"; public static final String ATTR_VALUE_CLASS = \"VALUE_CLASS\"; public ReportParameterDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the reports module, indicate the report engine type it will use and, if needed, the path where the report files will be stored. In this link you have information about the configuration of the reports system in the application.yml file. The enable property must be set to true and the engine type must be specified in the engine property before the server is started. You can only choose ONE of the two options listed below. Toggle Tree application.yml . For database engine . ontimize: report: enable: true engine: database . For file system engine . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/reports/report-store#server",
    
    "relUrl": "/systems/reports/report-store#server"
  },"142": {
    "doc": "Report Store",
    "title": "Testing the reports system",
    "content": "Once the reports system is already configured and the server and the database are running, we will follow the next steps: . ",
    "url": "/docs/v3/systems/reports/report-store#testing-the-reports-system",
    
    "relUrl": "/systems/reports/report-store#testing-the-reports-system"
  },"143": {
    "doc": "Report Store",
    "title": "Create report template",
    "content": "In order to create our own report templates, it is recommended to use Jaspersoft Studio. You can download it from this link. In this tutorial we will provide you a report template for candidates, but if you want more information about how to create and customize a template, check this tutorial. Our template is located in the main folder of the project, it is called candidates.zip. Do not unzip the compressed file because the request explained below requires it compressed. ",
    "url": "/docs/v3/systems/reports/report-store#create-report-template",
    
    "relUrl": "/systems/reports/report-store#create-report-template"
  },"144": {
    "doc": "Report Store",
    "title": "Add report to the reports system",
    "content": "To add the template we will have to execute the following REST request: http://localhost:33333/reportstore/addReport . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /addReport | Indicates the method of the service that is going to be executed | . With the Postman program, you will have to add a body of type form-data in which you will have to add the following values: . | key | type | value | Description | . | data | text | {&#8220;name&#8221;:&#8221;x&#8221;,&#8221;type&#8221;:&#8221;x&#8221;,&#8221;description&#8221;:&#8221;x&#8221;} | Indicates the name, type and description of the template | . | file | file | candidates.zip | You have to indicate the path of the candidates.zip file | . ",
    "url": "/docs/v3/systems/reports/report-store#add-report-to-the-reports-system",
    
    "relUrl": "/systems/reports/report-store#add-report-to-the-reports-system"
  },"145": {
    "doc": "Report Store",
    "title": "Generate report",
    "content": "When you run the above request, if the value of the engine set in the application.yml is filesystem, you have to copy the uuid that comes in the response data and execute the following request: http://localhost:33333/reportstore/fillReport/. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /fillReport | Indicates the method of the service that is going to be executed | . | &#160; | Indicates the uuid that you receives of the previous request | . But if the value of the engine set in the application.yml is database, you have to execute the following request to know the uuid of the report template: http://localhost:33333/reportstore/listReports. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /listReports | Indicates the method of the service that is going to be executed | . Example . http://localhost:33333/reportstore/fillReport/fd656189-2158-4e84-ac5c-8379960fddbd . The authorization used for these requests is authorization of the type BASIC. In both cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/systems/reports/report-store#generate-report",
    
    "relUrl": "/systems/reports/report-store#generate-report"
  },"146": {
    "doc": "Report Store",
    "title": "Visualize report document",
    "content": "When you run the above request, in the body of the response you will find the key file, whose value is a Base 64 that contains the format and data of the report template. Copy it and go to this page to convert the Base 64 into a PDF file. ",
    "url": "/docs/v3/systems/reports/report-store#visualize-report-document",
    
    "relUrl": "/systems/reports/report-store#visualize-report-document"
  },"147": {
    "doc": "Report Store",
    "title": "Report Store",
    "content": "Table of Contents . | Report Store | Introduction | Previous concepts | Prerequisites | Steps . | Database . | Report Tables | . | Server . | Add Ontimize Report dependencies | Add Report DAOs | Modify application.yml | . | . | Testing the reports system . | Create report template | Add report to the reports system | Generate report | Visualize report document | . | . ",
    "url": "/docs/v3/systems/reports/report-store",
    
    "relUrl": "/systems/reports/report-store"
  },"148": {
    "doc": "Reports",
    "title": "Reports",
    "content": " ",
    "url": "/docs/v3/systems/reports/#reports",
    
    "relUrl": "/systems/reports/#reports"
  },"149": {
    "doc": "Reports",
    "title": "Introduction",
    "content": "The module Ontimize Jee Report is a set of reporting tools based in OntimizeBoot. Reports implements reporting with: . Report store . The Report Store system will allow you to store, manage and export all kinds of reports designed and implemented via the JasperReports API. This module will let you use your Ontimize application data as data sources for your reports, allowing you to fully customize its layout with tables, charts, graphs… and also visualize, export, print and download your reports. You can find more information at this link . Report on-demand . Allow the final users of the applications developed with Ontimize to define, view and store reports from any table available in the application. This visual tool will allow users to define parameters of the report such as title, subtitle, columns to display, differents styles options, sorting, grouping and data aggregate functions of the report. With these parameters and the data of the table, this component will dynamically generate the report and present it to the user. In addition, all these settings are stored automatically in database by Ontimize services. You can find more information at this link . ",
    "url": "/docs/v3/systems/reports/#introduction",
    
    "relUrl": "/systems/reports/#introduction"
  },"150": {
    "doc": "Reports",
    "title": "Reports",
    "content": " ",
    "url": "/docs/v3/systems/reports/",
    
    "relUrl": "/systems/reports/"
  },"151": {
    "doc": "SDMS System",
    "title": "SDMS System",
    "content": "This module works only for Ontimize Boot version 3.11.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/sdms/#sdms-system",
    
    "relUrl": "/systems/sdms/#sdms-system"
  },"152": {
    "doc": "SDMS System",
    "title": "Introduction",
    "content": "The Storage Document Management System (SDMS) is a system that allows you to manage documents related to an entity in your project. Ontimize Boot provides a DMS that allows to store files in external services according to the engine set in its configuration. ",
    "url": "/docs/v3/systems/sdms/#introduction",
    
    "relUrl": "/systems/sdms/#introduction"
  },"153": {
    "doc": "SDMS System",
    "title": "Previous concepts",
    "content": ". | Workspace: Represents the base folder where the documents for an entity will be stored. | . ",
    "url": "/docs/v3/systems/sdms/#previous-concepts",
    
    "relUrl": "/systems/sdms/#previous-concepts"
  },"154": {
    "doc": "SDMS System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-sdms-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-sdms . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/sdms/#prerequisites",
    
    "relUrl": "/systems/sdms/#prerequisites"
  },"155": {
    "doc": "SDMS System",
    "title": "Steps",
    "content": "Server . Add SDMS dependencies . Toggle Tree /pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-common&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... ws/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-rest&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-event&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-sdms&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified the engine to be used by the SDMS, for this example we will set up the S3 engine. Information on the configuration of the SDMS system in the application.yml file can be found at this link. Currently only the S3 engine using the Amazon AWS S3 service API is available. Toggle Tree application.yml . ontimize: sdms: engine: s3 s3: access-key: ${S3_ACCESS_KEY} secret-key: ${S3_SECRET_KEY} bucket: ${S3_BUCKET} region: ${S3_REGION} . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify the entity service to add the methods of the SDMS service . All methods available by the SDMS service will be added to the service interface of our entity. Our method names are constructed with the name of the entity followed by the SDMS method name. The SDMS methods available are: . | SdmsFindById: It allows us to retrieve the information of an SDMS element by its ID (Base64 encrypted id). | SdmsFind: It allows us to retrieve the information of several elements of the SDMS from a filter. | SdmsDownloadById: It allows us to download an SDMS document by its ID (Base64 encrypted id) | SdmsDownload: It allows us to download several SDMS documents from a filter. | SdmsUpload: It allows us to upload a document to the SDMS. | SdmsCreate: It allows us to create an SDMS element in the system. | SdmsUpdate: It allows us to update an SDMS element in the system. | SdmsCopy: It allows us to copy an SDMS element in the system to another space in the SDMS. | SdmsMove: It allows us to move an SDMS element in the system to another space in the SDMS. | SdmsDeleteById: It allows us to delete an SDMS element in the system by its ID (Base64 encrypted id). | SdmsDelete: It allows us to delete several SDMS elements in the system from a filter. | . Toggle Tree ICandidateService.java ... import com.ontimize.jee.sdms.common.dto.OSdmsRestDataDto; import org.springframework.web.multipart.MultipartFile; import java.io.Serializable; ... public interface ICandidateService { ... EntityResult candidateSdmsFindById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsFind( OSdmsRestDataDto data ); EntityResult candidateSdmsDownloadById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsDownload( OSdmsRestDataDto data ); EntityResult candidateSdmsUpload(OSdmsRestDataDto data, MultipartFile file ); EntityResult candidateSdmsCreate( OSdmsRestDataDto data ); EntityResult candidateSdmsUpdate( OSdmsRestDataDto data ); EntityResult candidateSdmsCopy( OSdmsRestDataDto data ); EntityResult candidateSdmsMove( OSdmsRestDataDto data ); EntityResult candidateSdmsDeleteById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsDelete( OSdmsRestDataDto data ); ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Now in the implementation of the service we implement the methods with the help of the IOSdmsService component of the SDMS system and by calling the corresponding method. We will also establish the workspace where the entity will store and manage the files. We will do this via the OSdmsWorkspace annotation which admits 2 parameters: . | name: Sets the name of the workspace. If this parameter is not set, the value will be default. | value: Sets the path to the workspace, and can be set to variable between braces. | . The annotation can be set at class level by enabling the workspace for all SDMS methods, and/or at method level by setting its scope to the annotated method. It can also be set as many workspaces as required. Toggle Tree CandidateService.java ... import com.ontimize.jee.sdms.common.dto.OSdmsRestDataDto; import com.ontimize.jee.sdms.common.workspace.annotation.OSdmsWorkspace; import com.ontimize.jee.sdms.server.service.IOSdmsService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.multipart.MultipartFile; ... @OSdmsWorkspace( \"candidate/doc/{id}\" ) @OSdmsWorkspace( name = \"all\", value = \"candidate/doc\" ) ... public class CandidateService implements ICandidateService { ... @Autowired private IOSdmsService oSdmsService; ... @Override public EntityResult candidateSdmsFind( final OSdmsRestDataDto data ) { return this.oSdmsService.find( data ); } @OSdmsWorkspace( name = \"images\", value = \"candidate/img/{id}\" ) @Override public EntityResult candidateSdmsDownloadById( final Serializable id, final OSdmsRestDataDto data ) { return this.oSdmsService.downloadById( id, data ); } @Override public EntityResult candidateSdmsDownload( final OSdmsRestDataDto data ) { return this.oSdmsService.download( data ); } @Override public EntityResult candidateSdmsUpload(final OSdmsRestDataDto data, final MultipartFile file ) { return this.oSdmsService.upload( data, file ); } @Override public EntityResult candidateSdmsCreate( final OSdmsRestDataDto data ) { return this.oSdmsService.create( data ); } @Override public EntityResult candidateSdmsUpdate( final OSdmsRestDataDto data ) { return this.oSdmsService.update( data ); } @Override public EntityResult candidateSdmsCopy( final OSdmsRestDataDto data ) { return this.oSdmsService.copy( data ); } @Override public EntityResult candidateSdmsMove( final OSdmsRestDataDto data ) { return this.oSdmsService.move( data ); } @Override public EntityResult candidateSdmsDeleteById( final Serializable id, final OSdmsRestDataDto data ) { return this.oSdmsService.deleteById( id, data ); } @Override public EntityResult candidateSdmsDelete( final OSdmsRestDataDto data ) { return this.oSdmsService.delete( data ); } ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify the entity Rest controller . We modify the Rest controller of our entity so that instead of inheriting from the ORestController class, it inherits from the OSdmsRestController class. This class adds all the endpoints of the ORestController class and the SDMS endpoints, linking them with the corresponding SDMS methods that we have established in the service of our entity. Toggle Tree ICandidateService.java ... import com.imatia.platform.hr.api.core.service.ICandidateService; import com.ontimize.jee.sdms.rest.controller.OSdmsRestController; ... public class CandidateRestController extends OSdmsRestController&lt;ICandidateService&gt; { ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/sdms/#steps",
    
    "relUrl": "/systems/sdms/#steps"
  },"156": {
    "doc": "SDMS System",
    "title": "Endpoints",
    "content": "The endpoints set by the OSdmsRestController are the following: . If the workspace is not sent in an http request, the SDMS will set the default workspace as the active workspace. But if the default workspace has variables, you will need to pass it the workspace with the variable values to access the workspace. Find by ID . This endpoint maps the request to the SdmsFindById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. GET: /candidates/candidate/sdms/find/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Find . This endpoint maps the request to the SdmsFind method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. POST: /candidates/candidate/sdms/find/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Download by ID . This endpoint maps the request to the SdmsDownloadById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. GET: /candidates/candidate/sdms/download/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Download . This endpoint maps the request to the SdmsDownload method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. POST: /candidates/candidate/sdms/download/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Upload . This endpoint maps the request to the SdmsUpload method of the SDMS service. The data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. POST: /candidates/candidate/sdms/upload Content-Type: multipart/form-data Content-Disposition: form-data; name=\"file\"; filename=\"/C:/cv.pdf\" Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ\"}} . Create . This endpoint maps the request to the SdmsCreate method of the SDMS service. POST: /candidates/candidate/sdms/create Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Update . This endpoint maps the request to the SdmsUpdate method of the SDMS service. PUT: /candidates/candidate/sdms/update Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Copy . This endpoint maps the request to the SdmsCopy method of the SDMS service. PUT: /candidates/candidate/sdms/copy Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Move . This endpoint maps the request to the SdmsMove method of the SDMS service. PUT: /candidates/candidate/sdms/move Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Delete by ID . This endpoint maps the request to the SdmsDeleteById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. DELETE: /candidates/candidate/sdms/delete/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Delete . This endpoint maps the request to the SdmsDelete method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. DELETE: /candidates/candidate/sdms/delete/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Request Parameters . The data parameter of the SDMS system always goes to the &#8220;filter&#8221; and &#8220;data&#8221; sections. The &#8220;filter&#8221; section contains the parameters related to the selection of elements of the SDMS. Here you will always find the information related to the workspace you want to use. In the &#8220;data&#8221; section are the parameters related to the information to be sent to the SDMS. The rest of the parameters that can be sent in each of the sections will depend on the engine used. Possible parameters in the S3 engine . | Filter . | workspace: The name of the workspace to use. example: \"workspace\": \"default\" . | data: The variables values of the workspace. example: \"data\": \"{\"id\": \"ID-1\"}\" | \"data\": \"{\"id\": 1}\" | \"data\": \"{\"id\": [1, 2, 3]}\" . | id: The S3 key of the document encoded in Base64 (several can be in an array). example: \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\" | \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"] . | key: The S3 key of the document (several can be in an array). example: \"key\": \"candidate/1/file-01.txt\" | \"key\": [\"candidate/1/file-01.txt\", \"candidate/1/file-02.txt\"] . | prefix: The S3 prefix of the document (several can be in an array). example: \"prefix\": \"candidate/1/folder-1\" | \"prefix\": [\"candidate/1/folder-1\", \"candidate/1/folder-2\"] . | fileName: The S3 name of the document (several can be in an array). example: \"fileName\": \"file-01.txt\" | \"fileName\": [\"file-01.txt\", \"file-02.txt\"] . | maxKeys: The maximum number of S3 documents to return. example: \"maxKeys\": 10 . | delimiter: The delimiter to use in the S3 documents search. example: \"delimiter\": \"/\" . | marker: The marker to use in the S3 documents search. example: \"marker\": \"candidate/1/file-01.txt\" . | . | Data . | id: The S3 key of the document encoded in Base64. example: \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\" . | key: The S3 key of the document. example: \"key\": \"candidate/1/file-01.txt\" . | prefix: The S3 prefix of the document. example: \"prefix\": \"/folder-1\" . | fileName: The S3 name of the document. example: \"fileName\": \"file-01.txt\" . | currentPrefix: The current S3 prefix of the document. example: \"currentPrefix\": \"candidate/1/folder-1\" . | . | . ",
    "url": "/docs/v3/systems/sdms/#endpoints",
    
    "relUrl": "/systems/sdms/#endpoints"
  },"157": {
    "doc": "SDMS System",
    "title": "SDMS System",
    "content": "Table of Contents . | SDMS System . | Introduction | Previous concepts | Prerequisites | Steps . | Server . | Add SDMS dependencies | Modify application.yml | Modify the entity service to add the methods of the SDMS service | Modify the entity Rest controller | . | . | Endpoints . | Request Parameters . | Possible parameters in the S3 engine | . | . | . | . ",
    "url": "/docs/v3/systems/sdms/",
    
    "relUrl": "/systems/sdms/"
  },"158": {
    "doc": "Security System",
    "title": "Security System",
    "content": " ",
    "url": "/docs/v3/systems/security/#security-system",
    
    "relUrl": "/systems/security/#security-system"
  },"159": {
    "doc": "Security System",
    "title": "Introduction",
    "content": "Ontimize security allows you to set permissions to each role that you assign to a specific user, so that different users can access (or not) the project services and methods. ",
    "url": "/docs/v3/systems/security/#introduction",
    
    "relUrl": "/systems/security/#introduction"
  },"160": {
    "doc": "Security System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/security/#prerequisites",
    
    "relUrl": "/systems/security/#prerequisites"
  },"161": {
    "doc": "Security System",
    "title": "Steps",
    "content": "Add new profile and user . We will add the following elements to the database: . | New user | . INSERT INTO TUSER VALUES('candidate','candidate','candidate','candidate',NULL,'99999999R',NULL,'2020-07-03 11:50:40.665000',NULL) . | New user role | . INSERT INTO TROLE VALUES(1,'candidate','&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;security&gt;&lt;/security&gt;') . | Relationship between the new user and the new role | . INSERT INTO TUSER_ROLE VALUES(1,1,'candidate') . Modify the service to add security . In the projectwiki-boot module we will add the annotation @EnableAspectJAutoProxy(proxyTargetClass = false) to the ServerApplication.java class and to each service method the @Secured({ PermissionsProviderSecured.SECURED }) annotation. Toggle Tree ServerApplication.java . package com.ontimize.projectwiki; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.EnableAspectJAutoProxy; @SpringBootApplication @EnableAspectJAutoProxy(proxyTargetClass = false) public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } . CustomerService.java . package com.ontimize.projectwiki.model.core.service; . import org.springframework.security.access.annotation.Secured; . import com.ontimize.jee.common.security.PermissionsProviderSecured; . public class CandidateService implements ICandidateService { . @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.candidateDao, keyMap, attrList); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.candidateDao, attrMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.candidateDao, attrMap, keyMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.candidateDao, keyMap); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Add permissions for methods . Once the methods have been noted, it is necessary to add the service and the method that we have noted to the table of the DB that stores those elements and to the table that indicates the methods for which the role has permission. INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateQuery') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateInsert') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateUpdate') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateDelete') INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,1) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,2) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,3) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,4) . If we try to make requests through Postman to the service of CandidateService, changing the authentication by the user candidate and password candidate, it will give an error, since the user candidate does not belong to the role admin which is the only role that has permissions to make these queries. ",
    "url": "/docs/v3/systems/security/#steps",
    
    "relUrl": "/systems/security/#steps"
  },"162": {
    "doc": "Security System",
    "title": "Security System",
    "content": "Table of Contents . | Security System . | Introduction | Prerequisites | Steps . | Add new profile and user | Modify the service to add security | Add permissions for methods | . | . | . ",
    "url": "/docs/v3/systems/security/",
    
    "relUrl": "/systems/security/"
  },"163": {
    "doc": "Tutorial",
    "title": "Ontimize Boot Tutorial",
    "content": "Página en construcción . ",
    "url": "/docs/v3/tutorial/#ontimize-boot-tutorial",
    
    "relUrl": "/tutorial/#ontimize-boot-tutorial"
  },"164": {
    "doc": "Tutorial",
    "title": "Tutorial",
    "content": " ",
    "url": "/docs/v3/tutorial/",
    
    "relUrl": "/tutorial/"
  },"165": {
    "doc": "Understanding the EntityResult",
    "title": "Entendiendo el EntityResult",
    "content": "Página en construcción . ",
    "url": "/docs/v3/tutorial/exercise6#entendiendo-el-entityresult",
    
    "relUrl": "/tutorial/exercise6#entendiendo-el-entityresult"
  },"166": {
    "doc": "Understanding the EntityResult",
    "title": "Understanding the EntityResult",
    "content": "Table of Contents . | Entendiendo el EntityResult | . ",
    "url": "/docs/v3/tutorial/exercise6",
    
    "relUrl": "/tutorial/exercise6"
  }
}
