{"0": {
    "doc": "Basics",
    "title": "Basics",
    "content": "This section pretends to show the basic elements for the development of an application using Ontimize Boot . | Autoconfigurators | Charts on-demand | Complex Queries | Export data | Migration from Ontimize 1.x.x to 3.x.x | Multiple Datasources | Understanding application.yml file | . ",
    "url": "/docs/v3/basics/",
    
    "relUrl": "/basics/"
  },"1": {
    "doc": "Understanding application.yml",
    "title": "Understanding application.yml",
    "content": " ",
    "url": "/docs/v3/basics/applicationyml/#understanding-applicationyml",
    
    "relUrl": "/basics/applicationyml/#understanding-applicationyml"
  },"2": {
    "doc": "Understanding application.yml",
    "title": "Introduction",
    "content": "A YAML file, with extension *.yml or .yaml , is a human readable file in which we can write data pairs in a suitable way by combinations of lists, maps and simple data. Another of the most important features of these files is the indentation. It is important to write these indented elements correctly, since if they are badly indented, they cannot be parsed correctly. ",
    "url": "/docs/v3/basics/applicationyml/#introduction",
    
    "relUrl": "/basics/applicationyml/#introduction"
  },"3": {
    "doc": "Understanding application.yml",
    "title": "Application.yml file description",
    "content": "Endpoints . They allow you to monitor and interact with your application. Integrated endpoints are available, but adding custom endpoints is also allowed.  . | endpoints: api: . | Attribute | Values | Meaning | . | enabled | true, false | Active Spring Boot endpoints. | . Example . endpoints: api: enabled: true . | . Logging . | logging: level: . | Attribute | Values | Meaning | . | root | String | Default server log level set to INFO level | . Example . logging: level: root: info . | . CORS . Mechanism that allows restricted resources to be requested between domains. | ontimize:corsfilter: . | Attribute | Values | Meaning | . | enabled | true, false | CORS filter enabled. | . | ontimize:globalcors: . CORS global configuration . | Attribute | Values | Meaning | . | cors-configurations | String | Configuration for this entrypoint | . | ontimize:globalcors:cors-configurations: . | Attribute | Values | Meaning | . | allowed-origins | String | Allow different origins | . | allowed-headers | String | Allow headers | . | exposed-headers | [“X-Auth-Token”,”Content-disposition”,”X-Requested-With”] | Exposed headers | . | allowed-methods | GET, POST, PUT, DELETE, OPTIONS | Allow HTTP methods | . Example . ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE . | . | . JDBC . | ontimize:jdbc: . | Attribute | Values | Meaning | . | name-convention | upper, lower, database | Convention of data columns name | . | sqlhandler | postgres, mysql, oracle, oracle12, sqlserver, hsqldb | SQL handler | . | ontimize:jdbc:sql-condition-processor: . | Attribute | Values | Meaning | . | upper-string | true, false | Use of uppercase | . | upper-like | true, false | String comparision using LIKE in uppercase | . Example . jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true . | . | . Security . | ontimize:security: . | Attribute | Values | Meaning | . | mode | default | Default security mode | . | ignore-paths | /app/** | Routes where authenticated user control will not apply | . | ontimize:security:jwt: . Configure password for JWT token. | Attribute | Values | Meaning | . | password | cH4nG3_M3** | Password for JWT token | . This JWT token MUST BE CHANGED in any application. It’s a secret inormation. | ontimize:security:role-information-service: . Configure columns for user roles . | Attribute | Values | Meaning | . | role-repository | String | Repository which store the user role | . | role-name-column | String | Name of the column which store the role name | . | server-permission-query-id | String | Query ID to identify the query of server permissions | . | server-permission-name-column | String | Name of the columns which contains the name of the server permission | . | client-permission-query-id | String | Query ID for client permissions | . | client-permission-column | String | Name of the columns which contains the name of the client permission | . | ontimize:security:user-information-service: . Information about the user . | Attribute | Values | Meaning | . | user-repository | String | Repository which stores the users of the application | . | user-login-column | String | Name of the column with the username | . | user-password-column | String | Name of the column with the password | . | query-id | String | Query identififer for login | . | other-data | List | Other query columns | . | ontimize:security:user-role-information-service: . Repository information about linking users and roles . | Attribute | Values | Meaning | . | user-role-repository | String | Repository name | . | query-id | String | Query identifier | . | role-login-column | String | Column which stores the user | . | role-name-column | String | Column which stores the role name | . | . Example . security: mode: default jwt: password: cH4nG3_M3** # ← CHANGE THIS VALUE ignore-paths: /app/** role-information-iervice: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME . | . Server . | ontimize:server: . | Attribute | Values | Meaning | . | port | int | Server port | . | ontimize:server:servlet: . | Attribute | Values | Meaning | . | context-path | String | customized servlet path | . | ontimize:server:tomcat: . | Attribute | Values | Meaning | . | uri-encoding | String | URI encoding | . | ontimize:server:compression: . | Attribute | Values | Meaning | . | enabled | true, false | Enable data compression | . | mime-types | String | Mime types | . | . Example . server: servlet: context-path: /custom/path port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml . | . Spring . | ontimize:spring:datasource: . Data source (DB connection) . | Attribute | Values | Meaning | . | driver-class-name | String | JDBC driver | . | jdbc-url | String | Connection URl | . | username | String | DB username | . | password | String | DB username password | . | initial-size | int | Initial size | . | test-on-borrow | true, false | Validation | . | ontimize:spring:main: . | Attribute | Values | Meaning | . | banner-mode | on, off | Remove the startup banner in the console | . | ontimize:spring:session: . | Attribute | Values | Meaning | . | store-type | String | Save the session in spring | . | ontimize:spring:resources: . | Attribute | Values | Meaning | . | static-locations | String | Path for satic resources | . | ontimize:spring:autoconfigure: . | Attribute | Values | Meaning | . | exclude | String | Delete Spring Boot auto-configuration files | . | . Example . spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration . ",
    "url": "/docs/v3/basics/applicationyml/#applicationyml-file-description",
    
    "relUrl": "/basics/applicationyml/#applicationyml-file-description"
  },"4": {
    "doc": "Understanding application.yml",
    "title": "Complete Example",
    "content": "endpoints: api: enabled: true logging: level: root: info ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true security: mode: default jwt: password: cH4nG3_M3** # ← CHANGE THIS VALUE role-information-service: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME server: port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none resources: static-locations: classpath:/ngx/dist/ autoconfigure: exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . ",
    "url": "/docs/v3/basics/applicationyml/#complete-example",
    
    "relUrl": "/basics/applicationyml/#complete-example"
  },"5": {
    "doc": "Understanding application.yml",
    "title": "Understanding application.yml",
    "content": "Table of Contents . | Understanding application.yml . | Introduction | Application.yml file description . | Endpoints | Logging | CORS | JDBC | Security | Server | Spring | . | Complete Example | . | . ",
    "url": "/docs/v3/basics/applicationyml/",
    
    "relUrl": "/basics/applicationyml/"
  },"6": {
    "doc": "Autoconfigurators",
    "title": "Autoconfigurators",
    "content": "Autoconfigurators are an easy way to indicate common elements that need minimal customization in applications, such as database connection. These configurations are used within the application.yml file located inside the boot folder. ",
    "url": "/docs/v3/basics/autoconfigurators/#autoconfigurators",
    
    "relUrl": "/basics/autoconfigurators/#autoconfigurators"
  },"7": {
    "doc": "Autoconfigurators",
    "title": "AsyncTask",
    "content": ". | ontimize:asynctask: | . | Attribute | Values | Meaning | . | enable | true | Module loading property | . | engine | database | Indicates the storage engine that will be used for the report system (database for database engine) | . | url | String | The URL base path where the asynchronous tasks service will be exposed | . The configuration of the decoupled tasks system is done by setting up the necessary DAO for that system and annotating the service controller method. To see the configuration, check this link. Example . ontimize: asynctask: enable: true engine: database url: /tasks . ",
    "url": "/docs/v3/basics/autoconfigurators/#asynctask",
    
    "relUrl": "/basics/autoconfigurators/#asynctask"
  },"8": {
    "doc": "Autoconfigurators",
    "title": "DMS",
    "content": ". | ontimize:dms: | . | Attribute | Values | Meaning | . | engine | odms | Indicates the engine that will be used for the DMS system. Ontimize has an implementation of an engine, whose value is odms. | . | base-path | String | The path where the DMS files will be stored | . The configuration of DMS system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: dms: engine: odms base-path: file:/C:/applications/projectwiki/dms . ",
    "url": "/docs/v3/basics/autoconfigurators/#dms",
    
    "relUrl": "/basics/autoconfigurators/#dms"
  },"9": {
    "doc": "Autoconfigurators",
    "title": "SDMS",
    "content": "This module works only for Ontimize Boot version 3.11.0 or above. Actual release version: . | ontimize:sdms: | . | Attribute | Values | Meaning | . | engine | s3 | Indicates that the implementation that handles documents via the Amazon AWS S3 service API will be used. | . The configuration of DMS system is done by setting up the application for that system. To see the configuration, check this link. Example . ontimize: dms: engine: s3 . SDMS - S3 Engine . | ontimize:sdms:s3: | . | Attribute | Values | Meaning | . | access-key | String | Indicates the access-key parameter required to authenticate to the Amazon AWS S3 service API. | . | secret-key | String | Indicates the secret-key parameter required to authenticate to the Amazon AWS S3 service API. | . | bucket | String | Indicates the bucket parameter required to establish the S3 bucket into the SDMS. | . | region | String | Indicates the region parameter required to establish the region where the S3 bucket is located. | . Example . ontimize: dms: access-key: s3 s3: access-key: ${S3_ACCESS_KEY} secret-key: ${S3_SECRET_KEY} bucket: ${S3_BUCKET} region: ${S3_REGION} . ",
    "url": "/docs/v3/basics/autoconfigurators/#sdms",
    
    "relUrl": "/basics/autoconfigurators/#sdms"
  },"10": {
    "doc": "Autoconfigurators",
    "title": "Export",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . | ontimize:export: | . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | extension | String | Specifies the file extension to use. This String will append to the url path as a additional path. | . The configuration of exporting system is done through autoconfigurators and dependencies. To see how to use and configure, check this link. Example . ontimize: export: url: /export enable: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#export",
    
    "relUrl": "/basics/autoconfigurators/#export"
  },"11": {
    "doc": "Autoconfigurators",
    "title": "I18n",
    "content": "ontimize:i18n: . | Attribute | Values | Meaning | . | ref-bundle-repository | String | Name of the DAO containing information about the translation bundles | . | bundle-key-column | String | Column of the database table containing the translation bundle identifier | . | bundle-class-name-column | String | Column of the database table containing the name of the translation bundle class | . | bundle-description-column | String | Column of the database table containing the description of the translation bundle | . | ref-bundle-value-repository | String | Name of the database table containing information about the translations of each translation bundle | . | bundle-value-text-key-column | String | Column of the database table containing the key of a translation | . | bundle-value-key-column | String | Column of the database table containing the key of a translation | . | engine | default | Property to enable the i18n system. Need to have any value, commonly, default. | . The configuration of the I18N system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: i18n: ref-bundle-repository: OCDatabaseBundleDao bundle-key-column: ID_I18N bundle-class-name-column: CLASS_NAME bundle-description-column: I18N_DESCRIPTION ref-bundle-value-repository: OCDatabaseBundleValueDao bundle-value-text-key-column: KEY bundle-value-key-column: ID_I18N_VALUE engine: default . ",
    "url": "/docs/v3/basics/autoconfigurators/#i18n",
    
    "relUrl": "/basics/autoconfigurators/#i18n"
  },"12": {
    "doc": "Autoconfigurators",
    "title": "JDBC",
    "content": ". | ontimize:jdbc: | . | Attribute | Values | Meaning | . | name-convention | upper, lower, database | Indicate the nomenclature of the columns in the DB, in lower case, upper case or as it appears in the database | . | sqlhandler | postgres, mysql, oracle, oracle12, sqlserver, hsqldb | Indicates which SQL statement handler will be used to communicate with the database | . | ontimize:jdbc:sql-condition-processor: | . | Attribute | Values | Meaning | . | upper-string | true, false | Use uppercase strings in WHERE conditions | . | upper-like | true, false | Use uppercase strings in LIKE conditions | . Example . ontimize: jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: upper-string: true upper-like: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#jdbc",
    
    "relUrl": "/basics/autoconfigurators/#jdbc"
  },"13": {
    "doc": "Autoconfigurators",
    "title": "LDAP",
    "content": ". | ontimize:security: | . | Attribute | Value | Meaning | . | mode | ldap | Change the system security from default to ldap | . | ontimize:security:ldap: | . | Attribute | Values | Meaning | . | active | true, false | Enable or disable ldap security | . | host | IP | Ip host for ldap security | . | port | Number | Port of the host for ldap security | . | login-type | DN, simple | The login type indicates whether a full LDAP string with DN value or will be used or if the username will simply be provided with simple value | . | binddn | String | credential you are using to authenticate against an LDAP with DN (Distinguished Name) | . | basedn | String | Search starting point for LDAP with DN (Distinguished Name) | . | domain | String | The domain name | . The LDAP security configuration is done through autoconfigurators. To see the settings, check this link. Example . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 login-type: simple binddn: ou=XXXX,dc=YYY,dc=ZZZ basedn: dc=MMMM,dc,NNN domain: yourdomain.com . ",
    "url": "/docs/v3/basics/autoconfigurators/#ldap",
    
    "relUrl": "/basics/autoconfigurators/#ldap"
  },"14": {
    "doc": "Autoconfigurators",
    "title": "Keycloak",
    "content": ". | ontimize:security: | . | Attribute | Value | Meaning | . | mode | keycloak | Change the system security from default to keycloak | . | ontimize:security:keycloak: | . | Attribute | Values | Meaning | . | auth-server-url | URL | URL of the host for keycloak security | . | realm | String | The realm name | . | resource | String | The resource/client name | . | public-client | true, false | If set to true, the adapter will not send credentials for the client to Keycloak | . | use-resource-role-mappings | true, false | If set to true, the adapter will look inside the token for application level role mappings for the user. If false, it will look at the realm level for user role mappings | . The keycloak security configuration is done through autoconfigurators. To see the settings, check this link. Example . ontimize: security: mode: keycloak keycloak: auth-server-url: http://yourkeycloakdomain.com realm: yourrealm resource: yourclientname public-client: true use-resource-role-mappings: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#keycloak",
    
    "relUrl": "/basics/autoconfigurators/#keycloak"
  },"15": {
    "doc": "Autoconfigurators",
    "title": "Mail",
    "content": ". | ontimize:mail: | . | Attribute | Values | Meaning | . | ref-repository | String | Name of the DAO containing the configuration information required for system configuration | . | filter-column-name | String | Name of the column in the database table containing the keys | . | value-column-name | String | Name of the database table column containing the values | . | query-id | String | Name of the DAO query to be executed. By default, is default | . | filter-column-value-encoding | String | Key name of the row in the key column containing the value for mail encoding | . | filter-column-value-host | String | Name of the key in the row of the key column containing the value for the host in the mail service | . | filter-column-value-port | String | Name of the key in the row of the key column containing the value for the port in the mail service | . | filter-column-value-protocol | String | Name of the key in the row of the key column containing the value for the protocol used in the mail service | . | filter-column-value-user | String | Name of the key in the row of the key column containing the value for the user in the mail service | . | filter-column-value-password | String | Name of the key in the row of the key column containing the value for the user password in the mail service | . | filter-column-value-java-mail-properties | String | Name of the key in the row of the key column containing the value for the mail propoerties in the mail service | . | engine | String | Enable or disable mail engine. To enable, have any value int this arribute. By default, use default value | . The configuration of the mail system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: mail: ref-repository: OCSettingsDao filter-column-name: SETTING_KEY value-column-name: SETTING_VALUE query-id: default filter-column-value-encoding: mail_encoding filter-column-value-host: mail_host filter-column-value-port: mail_port filter-column-value-protocol: mail_protocol filter-column-value-user: mail_user filter-column-value-password: mail_password filter-column-value-java-mail-properties: mail_properties engine: default . ",
    "url": "/docs/v3/basics/autoconfigurators/#mail",
    
    "relUrl": "/basics/autoconfigurators/#mail"
  },"16": {
    "doc": "Autoconfigurators",
    "title": "Report",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . | ontimize:report: | . | Attribute | Values | Meaning | . | enable | true | Module loading property | . | engine | database, file | Indicates the engine that will be used for the report system (file for file system engine or database for database engine) | . | base-path | String | The path where the report files will be stored (file system engine only) | . The configuration of the reports system is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . Database . ontimize: report: enable: true engine: database . File system . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . ",
    "url": "/docs/v3/basics/autoconfigurators/#report",
    
    "relUrl": "/basics/autoconfigurators/#report"
  },"17": {
    "doc": "Autoconfigurators",
    "title": "REST",
    "content": ". | ontimize:corsfilter: | . | Attribute | Values | Meaning | . | enabled | true, false | Enable or disable CORS filter | . | ontimize:globalcors:cors-configurations Indicates the entrypoint to be configured, with the properties for each one. In general, the entrypoint [/**] is configured entirely. | . | Attribute | Values | Meaning | . | allowed-origins | * | Set the origins to allow, the special value * allows all domains. By default this is not set | . | allowed-headers | * | Set the list of headers that a pre-flight request can list as allowed for use during an actual request. The special value * allows actual requests to send any header. A header name is not required to be listed if it is one of: Cache-Control, Content-Language, Expires, Last-Modified or Pragma). By default this is not set. | . | exposed-headers |   | Set the list of response headers other than simple headers (i.e. Cache-Control, Content-Language, Content-Type, Expires, Last-Modified or Pragma that an actual response might have and can be exposed. Note that * is not a valid exposed header value. By default this is not set. | . | allowed-methods | List | Set the HTTP methods to allow, e.g. GET, POST, PUT, etc. The special value * allows all methods. If not set, only GET and HEAD are allowed. By default this is not set. Note: CORS checks use values from “Forwarded” RFC7239, X-Forwarded-Host, X-Forwarded-Port, and X-Forwarded-Proto headers, if present, in order to reflect the client-originated address. Consider using the ForwardedHeaderFilter in order to choose from a central place whether to extract and use, or to discard such headers. See the Spring Framework reference for more on this filter. | . | maxAge | Number | Configure how long, in seconds, the response from a pre-flight request can be cached by clients. By default this is not set. | . | allow-credentials | - | Whether user credentials are supported. By default this is not set (i.e. user credentials are not supported). | . Example . ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-hethods: - GET - POST - PUT - OPTIONS - DELETE . ",
    "url": "/docs/v3/basics/autoconfigurators/#rest",
    
    "relUrl": "/basics/autoconfigurators/#rest"
  },"18": {
    "doc": "Autoconfigurators",
    "title": "Security",
    "content": ". | ontimize:security: | . | Attribute | Values | Meaning | . | mode | default | Use default to enable the security mode for Ontimize Boot | . | ignore-paths | String | Paths in server thant will not be securized | . | service-path | String | Establish the service path. By default, /** | . | ontimize:security:jwt: Required | . | Attribute | Values | Meaning | . | password | String | JWT password | . | expiration-time | Long | JWT expiration time | . | refresh-token | true, false | Set true to refresh JWT, false otherwise | . | ontimize:security:user-information-service: | . | Attribute | Values | Meaning | . | query-id | String | Name of the DAO query identifier. | . | user-login-column | String | Database column that stores the username | . | user-password-column | String | Database column that stores the password | . | user-need-check-pass-column | String | Database column that stores whether the password requires updating at the next use | . | user-repository | String | Name of the DAO containing information about users | . | other-data | List | Extra data to store from the user logged | . | ontimize:security:role-information-service: | . | Attribute | Values | Meaning | . | role-repository | String | Name of the DAO containing information about users | . | role-name-column | String | Database column that stores the role name | . | server-permission-query-id | String | Name of the DAO query identifier for server permissions | . | server-permission-name-column | String | Database column that stores the server permissions | . | client-permission-query-id | String | Name of the DAO query identifier for client permissions | . | client-permission-column | List | Database column that stores the client permissions | . | ontimize:security:user-role-information-service: | . | Attribute | Values | Meaning | . | user-role-repository | String | Name of the DAO containing relation between users and its profiles | . | query-id | String | Name of the DAO query identifier | . | role-login-column | String | Database column that stores the username | . | role-name-column | String | Database column that stores the role name | . The configuration of the rest of the Security System is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: security: mode: default jwt: password: cH4nG3_M3** # ← CHANGE THIS VALUE ignore-paths: /news/**, /products/** user-information-service: user-repository: OCLoginProfilesDao query-id: login user-login-column: USER_ user-password-column: PASSWORD other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: OCLoginProfilesDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME role-information-service: role-repository: OCLoginProfilesDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION . ",
    "url": "/docs/v3/basics/autoconfigurators/#security",
    
    "relUrl": "/basics/autoconfigurators/#security"
  },"19": {
    "doc": "Autoconfigurators",
    "title": "TaskExecutor",
    "content": ". | ontimize:threadpool: | . | Attribute | Values | Meaning | . | coresize | Integer | The number of threads to keep in the pool, evenif they are idle | . | maxsize | Integer | The maximum number of threads to allow in the pool | . | keepalive | Long | When the number of threads is greater than the core, the maximum time that excess idle threads will wait for new tasks before terminating (in milliseconds) | . | timeout | true, false | Allow core threads to time out | . Example . ontimize: threadpool: coresize: 1 maxsize: 2147483647 keepalive: 1000 timeout: true . ",
    "url": "/docs/v3/basics/autoconfigurators/#taskexecutor",
    
    "relUrl": "/basics/autoconfigurators/#taskexecutor"
  },"20": {
    "doc": "Autoconfigurators",
    "title": "Preferences",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . | ontimize:save-config: | . | Attribute | Values | Meaning | . | save-config | true, false | Allows save preferences in database | . | ontimize:save-config-dao: | . | Attribute | Values | Meaning | . | save-config-dao | String | The name of the DAO for save preferences | . The configuration of the rest of the Preferences System is done by setting up the necessary DAOs for that system. To see the configuration, check this link. Example . ontimize: save-config: true save-config-dao: ConfigsDao . ",
    "url": "/docs/v3/basics/autoconfigurators/#preferences",
    
    "relUrl": "/basics/autoconfigurators/#preferences"
  },"21": {
    "doc": "Autoconfigurators",
    "title": "Autoconfigurators",
    "content": "Table of Contents . | Autoconfigurators . | AsyncTask | DMS | SDMS . | SDMS - S3 Engine | . | Export | I18n | JDBC | LDAP | Keycloak | Mail | Report | REST | Security | TaskExecutor | Preferences | . | . ",
    "url": "/docs/v3/basics/autoconfigurators/",
    
    "relUrl": "/basics/autoconfigurators/"
  },"22": {
    "doc": "Charts On Demand",
    "title": "Charts On Demand",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/charts-on-demand#charts-on-demand",
    
    "relUrl": "/basics/charts-on-demand#charts-on-demand"
  },"23": {
    "doc": "Charts On Demand",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-charts-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-charts . Note: To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/charts-on-demand#prerequisites",
    
    "relUrl": "/basics/charts-on-demand#prerequisites"
  },"24": {
    "doc": "Charts On Demand",
    "title": "Steps",
    "content": "Database . Preferences Table . With the database started, we create the new tables that will store the charts information. We&#8217;re going to need to create two different tables, one for the chart itself and one for the chart custom parameters. CREATE TABLE PREFERENCES(ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(255),DESCRIPTION VARCHAR(255),PREFERENCES VARCHAR(5000),ENTITY VARCHAR(100), TYPE BIT) . Server . Add Preferences DAOs . A specific DAO will be created for each of both tables in the system, and each of them will implement a different interface. right_panel_open PreferencesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"PREFERENCES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . PreferencesDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.IPreferencesDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"PreferencesDao\") @ConfigurationFile(configurationFile = \"base-dao/PreferencesDao.xml\", configurationFilePlaceholder = \"base-dao/placeholders.properties\") public class PreferencesDao extends OntimizeJdbcDaoSupport implements IPreferencesDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_PREFERENCES = \"PREFERENCES\"; public static final String ATTR_TYPE = \"TYPE\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | PreferencesDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | PreferencesDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/charts-on-demand#steps",
    
    "relUrl": "/basics/charts-on-demand#steps"
  },"25": {
    "doc": "Charts On Demand",
    "title": "Testing the preferences system",
    "content": "Save preferences . Allows to save the configuration of a chart in the database to do it again quickly . | URL: http://localhost:33333/preferences/save | HTTP Method: POST | Authorization: Basic Auth with parameters User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /save | Indicates the method of the service that is going to be executed | . Body request: . { \"name\":\"chart preference\", \"entity\":\"customer\", \"service\":\"customers\" \"type\":\"CHART\", \"params\": {\"title\":\"Chart of type\", \"subtitle\":\"This is an example of a pie chart\", \"entity\":\"customer\", \"service\":\"customers\", \"selectedXAxis\":\"CUSTOMERTYPEID\", \"selectedYAxis\":\"CUSTOMERTYPEID\", \"selectedXAxisType\":4, \"selectedYAxisType\":4, \"selectedTypeChart\":4, \"selectedDataTypeChart\":3} } . Get preferences . Execute the following request: http://localhost:33333/preferences/preferences?entity=ENTITY&amp;service=SERVICE&amp;type=REPORT. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /preferences | Indicates the method of the service that is going to be executed | . | ?entity=ENTITY | ENTITY indicates the entity to filter the preferences | . | &amp;service=SERVICE | SERVICE indicates the service to filter the preferences | . | &amp;type=CHART | Indicates the type to filter the preferences | . The authorization used for these requests is authorization of the type BASIC. In all three cases cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/basics/charts-on-demand#testing-the-preferences-system",
    
    "relUrl": "/basics/charts-on-demand#testing-the-preferences-system"
  },"26": {
    "doc": "Charts On Demand",
    "title": "Charts On Demand",
    "content": "Table of Contents . | Charts On Demand . | Prerequisites | Steps . | Database . | Preferences Table | . | Server . | Add Preferences DAOs | . | . | Testing the preferences system . | Save preferences | Get preferences | . | . | . ",
    "url": "/docs/v3/basics/charts-on-demand",
    
    "relUrl": "/basics/charts-on-demand"
  },"27": {
    "doc": "Complex queries",
    "title": "Complex queries",
    "content": " ",
    "url": "/docs/v3/basics/complexqueries/#complex-queries",
    
    "relUrl": "/basics/complexqueries/#complex-queries"
  },"28": {
    "doc": "Complex queries",
    "title": "Introduction",
    "content": "In this example the DAO *.xml files will be modified to make complex queries against other database tables. ",
    "url": "/docs/v3/basics/complexqueries/#introduction",
    
    "relUrl": "/basics/complexqueries/#introduction"
  },"29": {
    "doc": "Complex queries",
    "title": "Database structure",
    "content": "We will update the OfferCandidatesDao DAO to add new information in the *.xml. In this case, you will try to add a new query that reflects the other tables that are used from this DAO to relate the offers, candidates, and status. As this table only contains identifiers, our new query will allow us to know all the data and not only its identifiers. ",
    "url": "/docs/v3/basics/complexqueries/#database-structure",
    
    "relUrl": "/basics/complexqueries/#database-structure"
  },"30": {
    "doc": "Complex queries",
    "title": "Modify the DAO to add a complex query",
    "content": "In the *.xml, we will add a new &lt;Queries&gt; tag in which we will add the new queries using the &lt;Query&gt; tag. In this query, we can indicate the query to be executed through the &lt;Sentence&gt; tag. As we want to use the columns and conditions that you indicate through the request, we will use the following markers: . Query markers . | Marker | Meaning | . | #COLUMNS# | Columns to be queried | . | #WHERE# | Columns to filter the query | . | #WHERE_CONCAT# | Adds more columns to filter the query with the AND sql operator | . | #ORDER# | Column to order the queried values with the ORDER BY sql operator | . | #ORDER_CONCAT# | Adds more columns to order the queried values with a comma (,) | . | #SCHEMA# | Gets the database schema | . Example . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM #SCHEMA#.OFFER_CANDIDATES #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES WHERE ID = 200 . There are two ways to order the queries values, with the #ORDER# marker or with a &lt;OrderColumn&gt; tag . Example with #ORDER# . &lt;Queries&gt; &lt;Query&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY ID . Example with &lt;OrderColumn&gt; . &lt;Queries&gt; &lt;Query&gt; &lt;OrderColumns&gt; &lt;OrderColumn name=\"CANDIDATE_ID\" type=\"ASC\"/&gt; &lt;/OrderColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM OFFER_CANDIDATES ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . This will be the query to execute: . SELECT ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS FROM PUBLIC.OFFER_CANDIDATES ORDER BY CANDIDATE_ID . There are two types of OrderColumn, ASC (Ascendent) or DESC (Descendent). Ambiguous columns . The use of the &lt;AmbiguousColumn&gt; tag will indicate which are the ambiguous columns (in this case, the DESCRIPTION column of OFFER_CANDIDATE_STATUS and OFFER, using the name of DESC_STATUS for OFFER_CANDIDATE_STATUS). Otherwise in case we want to modify the query that is performed by default, the identifier of the tag would be default &lt;Query id = \"default\"&gt;. As we want to keep the query by default, we will put another identifier. Example . &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; . Complete example . right_panel_open OfferCandidatesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\" /&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\" /&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . In the java file, we will add a new constant, which will have the same value as the name of the identifier that we have established for the query. OfferCandidatesDao.java . package com.ontimize.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferCandidatesDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidatesDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidatesDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_OFFER_ID =\"OFFER_ID\"; public static final String ATTR_CANDIDATE_ID =\"CANDIDATE_ID\"; public static final String ATTR_OFFER_CANDIDATE_STATUS =\"OFFER_CANDIDATE_STATUS\"; public static final String QUERY_OFFER_DETAILS = \"details\"; } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/complexqueries/#modify-the-dao-to-add-a-complex-query",
    
    "relUrl": "/basics/complexqueries/#modify-the-dao-to-add-a-complex-query"
  },"31": {
    "doc": "Complex queries",
    "title": "Modify the interface and the service to add the new method",
    "content": "We will update the IOfferService interface to add the new method that will perform the query. In case of being the default query, it would not be necessary to do any of the steps indicated below. right_panel_open IOfferService.java . public interface IOfferService { ... // OFFER CANDIDATES ... public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; ... // OFFER CANDIDATES STATUS ... } . In the service, we implement the new interface method, using the daoHelper to create the query, but adding a new parameter after the list of columns to query, which will be the identifier of the query that we have created in the DAO (and that we have associated with a constant in the corresponding java file). OfferService.java . @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { ... @Override public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList, OfferCandidatesDao.QUERY_OFFER_DETAILS); } ... } . | ontimize-boot-tutorial . | api . | src . | main . | java . | com . | ontimize . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | com . | ontimize . | boot . | core . | ServerApplication.java | . | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | frontend . | src . | main . | ngx . | aot-config . | helpers.js | index.ejs | vendor-aot.ts | webpack-aot.config.js | . | src . | app . | login . | login-routing.module.ts | login.component.html | login.component.scss | login.component.ts | login.module.ts | login.theme.scss | . | main . | home . | home-routing.module.ts | home.component.html | home.component.scss | home.component.ts | home.module.ts | . | main-routing.module.ts | main.component.html | main.component.scss | main.component.ts | main.module.ts | . | shared . | app.menu.config.ts | app.services.config.ts | shared.module.ts | . | app-routing.module.ts | app.component.html | app.component.scss | app.component.ts | app.config.ts | app.module.ts | . | assets . | css . | app.scss | loader.css | . | i18n . | en.json | es.json | . | images . | no-image.png | ontimize.png | ontimize_web_log.png | sidenav-closed.png | sidenav-opened.png | user_profile.png | . | js . | domchange.js | keyboard.js | . | . | environments . | environment.prod.ts | environment.ts | . | favicon.ico | index.html | main.ts | polyfills.ts | styles.scss | test.ts | tsconfig.app.json | tsconfig.spec.json | . | angular.json | package-lock.json | package.json | README.md | tsconfig.aot.json | tsconfig.json | tslint.json | . | resources . | application.properties | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | com . | ontimize . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method",
    
    "relUrl": "/basics/complexqueries/#modify-the-interface-and-the-service-to-add-the-new-method"
  },"32": {
    "doc": "Complex queries",
    "title": "Complex queries",
    "content": "Table of Contents . | Complex queries . | Introduction | Database structure | Modify the DAO to add a complex query . | Query markers | Ambiguous columns | Complete example | . | Modify the interface and the service to add the new method | . | . ",
    "url": "/docs/v3/basics/complexqueries/",
    
    "relUrl": "/basics/complexqueries/"
  },"33": {
    "doc": "Export data to csv",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.csv file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#introduction"
  },"34": {
    "doc": "Export data to csv",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#prerequisites"
  },"35": {
    "doc": "Export data to csv",
    "title": "Steps",
    "content": "Note: To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#steps"
  },"36": {
    "doc": "Export data to csv",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. right_panel_open projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#add-dependencies"
  },"37": {
    "doc": "Export data to csv",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. right_panel_open ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#add-export-url-to-applicationyml"
  },"38": {
    "doc": "Export data to csv",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/csv | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 }, \"offset\": -1, \"pageSize\": 25, }, \"service\": \"CandidateService\", \"dao\": \"candidate\", \"path\": \"/candidates\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.csv file in your editor. Postman . CSV . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#check-the-export-system"
  },"39": {
    "doc": "Export data to csv",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless with advQuery: false | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | . | path | String | Name of the path to be queried | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | . | columns | JSON Object | Determines the order of the columns in the export | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-csv#creating-the-json-for-exporting-data"
  },"40": {
    "doc": "Export data to csv",
    "title": "Export data to csv",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-csv",
    
    "relUrl": "/basics/exportdata/export-data-to-csv"
  },"41": {
    "doc": "Export data to xlsx",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.xlsx file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#introduction"
  },"42": {
    "doc": "Export data to xlsx",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#prerequisites"
  },"43": {
    "doc": "Export data to xlsx",
    "title": "Steps",
    "content": "To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#steps"
  },"44": {
    "doc": "Export data to xlsx",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. right_panel_open projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#add-dependencies"
  },"45": {
    "doc": "Export data to xlsx",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. right_panel_open ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#add-export-url-to-applicationyml"
  },"46": {
    "doc": "Export data to xlsx",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/xlsx | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 } \"offset\": -1, \"pageSize\": 25 }, \"service\": \"CandidateService\", \"dao\": \"candidate\", \"path\": \"/candidates\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" }, \"styles\": { \"greenBG\": { \"fillBackgroundColor\": \"GREEN\" }, \"redBG\": { \"fillBackgroundColor\": \"RED\" }, \"blueBG\": { \"fillBackgroundColor\": \"BLUE\" } }, \"columnStyles\": { \"NAME\": \"greenBG\" }, \"rowStyles\": { \"1\": \"blueBG\" }, \"cellStyles\": { \"7,7\": \"greenBG\", \"2,2,5,4\": \"redBG\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.xlsx file in your editor. Postman . Excel . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#check-the-export-system"
  },"47": {
    "doc": "Export data to xlsx",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless withadvQuery: false | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | . | path | String | Name of the path to be queried | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | . | columns | JSON Object | Determines the order of the columns in the export | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . | styles | JSON Object | JSON objects used to indicate the styles that the cell will have, grouped under the same name. Only the following styles are supported: | Attribute | Values | Meaning | . | dataFormatString | String | Format string for some formatter, like decimals, e.g.: #,##0.00 | . | alignment | String | These are the possible values for the horizontal alignment: GENERAL, LEFT, CENTER, RIGHT, FILL, JUSTIFY, CENTER_SELECTION, DISTRIBUTED | . | verticalAlignment | String | These are the possible values for the horizontal alignment: TOP, CENTER, BOTTOM, JUSTIFY, DISTRIBUTED | . | fillBackgroundColor | String | These are the possible values for the background colors: BLACK1, WHITE1, RED1, BRIGHT_GREEN1, BLUE1, YELLOW1, PINK1, TURQUOISE1, BLACK, WHITE, RED, BRIGHT_GREEN, BLUE, YELLOW, PINK, TURQUOISE, DARK_RED, GREEN, DARK_BLUE, DARK_YELLOW, VIOLET, TEAL, GREY_25_PERCENT, GREY_50_PERCENT, CORNFLOWER_BLUE, MAROON, LEMON_CHIFFON, LIGHT_TURQUOISE1, ORCHID, CORAL, ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE, SKY_BLUE, LIGHT_TURQUOISE, LIGHT_GREEN, LIGHT_YELLOW, PALE_BLUE, ROSE, LAVENDER, TAN, LIGHT_BLUE, AQUA, LIME, GOLD, LIGHT_ORANGE, ORANGE, BLUE_GREY, GREY_40_PERCENT, DARK_TEAL, SEA_GREEN, DARK_GREEN, OLIVE_GREEN, BROWN, PLUM | . | . | columnStyles | JSON Object | Key-value pairs, where the key is the column name and the value is the name of the style defined in the styles section. This value has priority 2 (the lower value, the higher priority). | . | rowStyles | JSON Object | Key-value pairs, where the key is the row index and the value is the name of the style defined in the styles section. This value has priority 3 (the lower value, the higher priority). | . | cellStyles | JSON Object | Key-value pairs, where the key is the cell to be selected (row, column) or the range of cells (start row, start column, end row, end column) and the value is the name of the style defined in the styles section. This value has priority 1 (the lower the value, the higher the priority). | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx#creating-the-json-for-exporting-data"
  },"48": {
    "doc": "Export data to xlsx",
    "title": "Export data to xlsx",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-xlsx",
    
    "relUrl": "/basics/exportdata/export-data-to-xlsx"
  },"49": {
    "doc": "Export data",
    "title": "Export data",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . Ontimize provides a system to export the DAO data of a service and dump it directly to a file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. The export options are: . | Export data to csv | Export data to xlsx | Export data to pdf | . ",
    "url": "/docs/v3/basics/exportdata/#export-data",
    
    "relUrl": "/basics/exportdata/#export-data"
  },"50": {
    "doc": "Export data",
    "title": "Export data",
    "content": " ",
    "url": "/docs/v3/basics/exportdata/",
    
    "relUrl": "/basics/exportdata/"
  },"51": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Migrate from Ontimize 1.x.x to 3.x.x",
    "content": " ",
    "url": "/docs/v3/basics/migration/#migrate-from-ontimize-1xx-to-3xx",
    
    "relUrl": "/basics/migration/#migrate-from-ontimize-1xx-to-3xx"
  },"52": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Introduction",
    "content": "In this tutorial we are going to explain how to migrate a project from Ontimize version 1.x.x that works with JDK 8 to Ontimize version 3.x.x that works with JDK 11. For this example we will download a project like the explained in this training course. ",
    "url": "/docs/v3/basics/migration/#introduction",
    
    "relUrl": "/basics/migration/#introduction"
  },"53": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-migration-3.x.x-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-migration-3.x.x . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/migration/#prerequisites",
    
    "relUrl": "/basics/migration/#prerequisites"
  },"54": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Steps",
    "content": "Ontimize version . First of all we need to update the version of Ontimize (ontimize-boot-parent) located in the parent of the project. Use always the latest version: . right_panel_open pom.xml . &lt;parent&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-parent&lt;/artifactId&gt; &lt;version&gt;3.x.x&lt;/version&gt; &lt;/parent&gt; . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Java version . In the project properties we will change the java version from 1.8 to 11, both for the main pom.xml and for the hr-model module pom.xml. right_panel_open pom.xml . &lt;properties&gt; . &lt;java.version&gt;11&lt;/java.version&gt; . &lt;/properties&gt; . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modifying application.yml . In the new version of Ontimize Boot, it has been decided to change the properties from camelCase to kebab-case, so you have to modify the application.yml. endpoints: api: enabled: true logging: level: root: info ontimize: corsfilter: enabled: true globalcors: cors-configurations: '[/**]': allowed-origins: \"*\" allowed-headers: \"*\" exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] allowed-methods: - GET - POST - PUT - OPTIONS - DELETE jdbc: name-convention: upper sqlhandler: hsqldb sql-condition-processor: uppper-string: true upper-like: true security: mode: default ignore-paths: /app/** role-information-service: role-repository: UserRoleDao role-name-column: ROLENAME server-permission-query-id: serverPermissions server-permission-name-column: PERMISSION_NAME client-permission-query-id: clientPermissions client-permission-column: XMLCLIENTPERMISSION user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME server: port: 33333 tomcat: uri-encoding: UTF-8 compression: enabled: true mime-types: application/json, application/xml spring: datasource: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true main: banner-mode: 'off' session: store-type: none autoconfigure: exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . Renaming packages . With the new version, the ontimize-core library has been merged with ontimize-jee, and some classes have changed the name of their package, among them, the EntityResult Interface. To learn more about this class, check the following link. The package name of EntityResult has been renamed from com.ontimize.db.EntityResult to com.ontimize.jee.common.dto.EntityResult. Api module . In the hr-api module we need to change the name of the package of this class in all the interfaces that are using it. right_panel_open ICandidateService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface ICandidateService { // CANDIDATE public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; } . IMasterService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IMasterService { . // EDUCATION public EntityResult educationQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult educationInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult educationUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult educationDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; . } . IOfferService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IOfferService { . // OFFER public EntityResult offerQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; public EntityResult offerInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; public EntityResult offerUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; public EntityResult offerDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; . } . IUserService.java . package com.ontimize.hr.api.core.service; . import com.ontimize.jee.common.dto.EntityResult; . public interface IUserService { public EntityResult userQuery(Map&lt;?, ?&gt; keyMap, List&lt;?&gt; attrList); public EntityResult userInsert(Map&lt;?, ?&gt; attrMap); public EntityResult userUpdate(Map&lt;?, ?&gt; attrMap, Map&lt;?, ?&gt; keyMap); public EntityResult userDelete(Map&lt;?, ?&gt; keyMap); } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Model module . Having changed the class in the interface, we also have to change it in the service. For this we go to the hr-model module and replace the import of all services. right_panel_open CandidateService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { @Autowired private CandidateDao candidateDao; . } . MasterService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"MasterService\") @Lazy public class MasterService implements MasterService { @Autowired private EducationDao educationDao; . } . OfferService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { @Autowired private OfferDao offerDao; . } . UserService.java . package com.ontimize.hr.model.core.service; . import com.ontimize.jee.common.dto.EntityResult; . @Lazy @Service(\"UserService\") public class UserService implements IUserService { @Autowired private UserDao userDao; . } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Ws module . In this case it is not just about changing the name of the package, it must also be taken into account that the EntityResult class is now an Interface, so an object cannot be instantiated from it. To do this, we will use the EntityResultMapImpl class. Go to the hr-ws module and replace the import of the EntityResult class in the rest controllers and make the following changes: . right_panel_open OfferRestController.java . package com.ontimize.hr.ws.core.rest; . import com.ontimize.jee.common.db.SQLStatementBuilder; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicExpression; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicField; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicOperator; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.dto.EntityResultMapImpl; . @RestController @RequestMapping(\"/offers\") @ComponentScan(basePackageClasses = { com.ontimize.hr.api.core.service.IOfferService.class }) public class OfferRestController extends ORestController&lt;IOfferService&gt; { . @RequestMapping(value = \"currentOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult currentOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetween(OfferDao.ATTR_START_DATE)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } @RequestMapping(value = \"yearOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult yearOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; filter = (Map&lt;String, Object&gt;) req.get(\"filter\"); int year = (int) filter.get(\"YEAR\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetweenWithYear(OfferDao.ATTR_START_DATE, year)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } . } . UserRestController.java . package com.ontimize.hr.ws.core.rest; . import com.ontimize.jee.common.dto.EntityResult; . @RestController @RequestMapping(\"/users\") public class UserRestController extends ORestController&lt;IUserService&gt; { . @RequestMapping( value = \"/login\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; login() { return new ResponseEntity&lt;&gt;(HttpStatus.OK); } } . | ontimize-examples . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/migration/#steps",
    
    "relUrl": "/basics/migration/#steps"
  },"55": {
    "doc": "Migration from Ontimize 1.x.x to 3.x.x",
    "title": "Migration from Ontimize 1.x.x to 3.x.x",
    "content": "Table of Contents . | Migrate from Ontimize 1.x.x to 3.x.x . | Introduction | Prerequisites | Steps . | Ontimize version | Java version | Modifying application.yml | Renaming packages . | Api module | Model module | Ws module | . | . | . | . ",
    "url": "/docs/v3/basics/migration/",
    
    "relUrl": "/basics/migration/"
  },"56": {
    "doc": "Multiple Datasources",
    "title": "Multiple Datasources",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/multipledatasources/#multiple-datasources",
    
    "relUrl": "/basics/multipledatasources/#multiple-datasources"
  },"57": {
    "doc": "Multiple Datasources",
    "title": "Introduction",
    "content": "Ontimize Boot allows a single application to query multiple data sources, thus allowing you to separate the user and permission tables in a database and use one or more other data sources to query the rest of the information you want by configuring the data source you want to query in each DAO. ",
    "url": "/docs/v3/basics/multipledatasources/#introduction",
    
    "relUrl": "/basics/multipledatasources/#introduction"
  },"58": {
    "doc": "Multiple Datasources",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page, with a REST service and two HSQLDB databases. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-multidatasource-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-multidatasource . ",
    "url": "/docs/v3/basics/multipledatasources/#prerequisites",
    
    "relUrl": "/basics/multipledatasources/#prerequisites"
  },"59": {
    "doc": "Multiple Datasources",
    "title": "Steps",
    "content": "Modify application.yml file . Although you can keep the data source already indicated in the file, you can delete it without any problem. New data sources will be added in the *.yml under the ontimize.datasources properties, followed by a name for that data source, and then the same settings as required for the data source you normally use. right_panel_open application.yml ... ontimize: datasources: dbone: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: dbtwo: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Modify DAO&#8217;s datasource . In the DAOs the data source must be modified to indicate the correct data source, and the database table that belongs to that data source. In the case of this example, as indicated in the *.yml file, that would be dbone and dbtwo. right_panel_open RoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... RoleServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE_SERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... ServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... UserDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... UserRoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER_ROLE\" datasource=\"dbone\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... CandidateDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"CANDIDATE\" datasource=\"dbtwo\" sqlhandler=\"dbSQLStatementHandler\"&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Modify SQL handler . At this point more data sources can be queried, as shown in the example, but they all have the same SQL handler. It is quite possible that, when multiple data sources are queried, unlike the example, they are databases of different technologies. To do this, in the same way as it is allowed to do with the data sources, the SQL handlers of each of the DAOs are changed. There is a SQL handler that is configured by the ontimize.jdbc.sqlhandler and ontimize.jdbc.sql-condition-processor.* properties, called by default dbSQLStatementHandler. From this version, it is no longer necessary to indicate which SQL handler we will use in the ontimize.jdbc.sqlhandler property, but we will indicate its name, listed below. By default, they already have some pre-established configurations, although they can be modified without any problem in the application.yml file. | Handler | Bean name | Default configuration | Property | . | default | dbSQLStatementHandler | Upper string | false | ontimize.jdbc.sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.sql-condition-processor.upper-like | . | postgres | postgresSQLStatementHandler | Upper string | false | ontimize.jdbc.postgres-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.postgres-sql-condition-processor.upper-like | . | oracle | oracleSQLStatementHandler | Upper string | false | ontimize.jdbc.oracle-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.oracle-sql-condition-processor.upper-like | . | oracle12 | oracle12SQLStatementHandler | Upper string | false | ontimize.jdbc.oracle12-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.oracle12-sql-condition-processor.upper-like | . | sqlserver | sqlserverSQLStatementHandler | Upper string | false | ontimize.jdbc.sqlserver-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.sqlserver-sql-condition-processor.upper-like | . | hsqldb | hsqldbSQLStatementHandler | Upper string | false | ontimize.jdbc.hsqldb-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.hsqldb-sql-condition-processor.upper-like | . | mysql | mysqlSQLStatementHandler | Upper string | false | ontimize.jdbc.mysql-sql-condition-processor.upper-string | . | Upper like | true | ontimize.jdbc.mysql-sql-condition-processor.upper-like | . right_panel_open Modified application.yml (will use default values) and some SQL handlers . aplication.yml ... ontimize: datasources: dbone: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB username: SA password: initial-size: 10 test-on-borrow: true dbtwo: driver-class-name: org.hsqldb.jdbcDriver jdbc-url: jdbc:hsqldb:hsql://localhost:9014/templateDB username: SA password: initial-size: 10 test-on-borrow: true jdbc: name-convention: upper ... RoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TROLE\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... ServerPermissionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSERVER_PERMISSION\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... UserRoleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TUSER_ROLE\" datasource=\"dbone\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... CandidateDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"CANDIDATE\" datasource=\"dbtwo\" sqlhandler=\"hsqldbSQLStatementHandler\"&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | db2 . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/multipledatasources/#steps",
    
    "relUrl": "/basics/multipledatasources/#steps"
  },"60": {
    "doc": "Multiple Datasources",
    "title": "Multiple Datasources",
    "content": "Table of Contents . | Multiple Datasources . | Introduction | Prerequisites | Steps . | Modify application.yml file | Modify SQL handler | . | . | . ",
    "url": "/docs/v3/basics/multipledatasources/",
    
    "relUrl": "/basics/multipledatasources/"
  },"61": {
    "doc": "Export data to pdf",
    "title": "Introduction",
    "content": "Ontimize provides a system to export the DAO data of a service and dump it directly to an *.pdf file. This system uses a JSON template where all the necessary parameters are indicated to use in the body of the request to obtain the file. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#introduction",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#introduction"
  },"62": {
    "doc": "Export data to pdf",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-export . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#prerequisites",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#prerequisites"
  },"63": {
    "doc": "Export data to pdf",
    "title": "Steps",
    "content": "To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#steps",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#steps"
  },"64": {
    "doc": "Export data to pdf",
    "title": "Add dependencies",
    "content": "Two dependencies need to be added, one to the ws module containing the controllers (so that it can respond to the export request) and one to the boot module to be able to load the autoconfigurator in the application.yml file for export. right_panel_open projectwiki-boot/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-webaddons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . projectwiki-ws/pom.xml . &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-webclient-addons&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#add-dependencies",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#add-dependencies"
  },"65": {
    "doc": "Export data to pdf",
    "title": "Add export url to application.yml",
    "content": "In the application.yml file, a configuration will be added to allow indicating the export URL and the extension used. right_panel_open ontimize:export: . | Attribute | Values | Meaning | . | url | String | Specifies the path to use the export system. | . | enable | Boolean | Indicates when export is enabled. | . Example ... ontimize: ... export: url: /export enable: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | .gitignore | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.lck | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | .gitignore | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | .gitignore | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#add-export-url-to-applicationyml",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#add-export-url-to-applicationyml"
  },"66": {
    "doc": "Export data to pdf",
    "title": "Check the export system",
    "content": "An application such as Postman will be used to execute the REST export request for our project. A POST request will be made to the previously configured url using *.json as the body of the request containing all the necessary information for the export. | URL: http://localhost:33333/export/pdf | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . { \"queryParam\": { \"columns\": [ \"SURNAME\", \"PHONE\", \"ID\", \"EMAIL\", \"WAGE_LEVEL\", \"COMMENT\", \"BIRTHDAY\", \"DNI\", \"SPECIALTIES\", \"NAME\" ], \"sqltypes\": { \"SURNAME\": 12, \"PHONE\": 12, \"ID\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"COMMENT\": 12, \"BIRTHDAY\": 91, \"DNI\": 12, \"SPECIALTIES\": 12, \"NAME\": 12 }, \"offset\": -1, \"pageSize\": 25, }, \"service\": \"CandidateService\", \"path\": \"/candidates\", \"dao\": \"candidate\", \"advQuery\": false, \"columns\": { \"ID\": {}, \"DNI\": {}, \"NAME\": {}, \"SURNAME\": {}, \"EMAIL\": {}, \"PHONE\": {}, \"BIRTHDAY\": {}, \"SPECIALTIES\": {}, \"WAGE_LEVEL\": {}, \"COMMENT\": {} }, \"columnTitles\": { \"SURNAME\": \"Surname\", \"PHONE\": \"Phone\", \"ID\": \"Id.\", \"EMAIL\": \"Email\", \"WAGE_LEVEL\": \"Wage level\", \"COMMENT\": \"Comment\", \"BIRTHDAY\": \"Birthday\", \"DNI\": \"DNI\", \"SPECIALTIES\": \"Speciality\", \"NAME\": \"Name\" }, \"columnTypes\": { \"SURNAME\": \"java.lang.String\", \"PHONE\": \"java.lang.String\", \"ID\": \"java.lang.Integer\", \"EMAIL\": \"java.lang.String\", \"WAGE_LEVEL\": \"java.lang.Integer\", \"COMMENT\": \"java.lang.String\", \"BIRTHDAY\": \"java.sql.Date\", \"DNI\": \"java.lang.String\", \"SPECIALTIES\": \"java.lang.String\", \"NAME\": \"java.lang.String\" }, \"styles\": { \"greenBG\": { \"fillBackgroundColor\": \"GREEN\" }, \"redBG\": { \"fillBackgroundColor\": \"RED\" }, \"blueBG\": { \"fillBackgroundColor\": \"BLUE\" } }, \"columnStyles\": { \"NAME\": \"greenBG\" }, \"rowStyles\": { \"1\": \"blueBG\" }, \"cellStyles\": { \"7,7\": \"greenBG\", \"2,2,5,4\": \"redBG\" } } . After click in Send button, click in Save Response ^ and save it to a file. Then, open the *.pdf file in your editor. Postman . Pdf . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#check-the-export-system",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#check-the-export-system"
  },"67": {
    "doc": "Export data to pdf",
    "title": "Creating the JSON for exporting data",
    "content": "This is the list of values accepted by the JSON request to generate the export file. | Attribute | Values | Meaning | . | queryParam | JSON Object | A JSON object defining the columns and sqltypes elements. | Attribute | Values | Meaning | . | columns | JSON Array | An array that indicates which columns to query in the database. | . | sqltypes | JSON Object | An object containing the key-value pairs for the data type contained in the database. As a key, the column name and as a value, the integer corresponding to the database data type, which can be found at this link. | . | offset | Integer | Integer to especify a page to query. -1 if don't want it | pageSize | Integer | The size of the page for advanced query. Useless with advQuery: false | . | service | String | This is the bean name of the service you want to query. (The name that appears inside the @Service() annotation, e.g.: @Service(&#8220;SERVICE_NAME&#8221;) = SERVICE_NAME) | . | dao | String | Name of the query method of the service to be queried without the suffix Query or PaginationQuery, e.g.: customerQuery = customer | . | path | String | Name of the path to be queried | . | advQuery | Boolean | Determines whether the DAO query method is Query or PaginationQuery. | . | columns | JSON Object | Determines the order of the columns in the export | . | columnTitles | JSON Object | Translates the name of the column to be exported, replacing it with the value of the key. | . | columnTypes | JSON Object | Key-value pairs that indicate how the data will be treated within the cell, e.g.: String, Date, Integer, etc. These data types are those corresponding to the database data type, which can be found at this link | . | styles | JSON Object | JSON objects used to indicate the styles that the cell will have, grouped under the same name. Only the following styles are supported: | Attribute | Values | Meaning | . | dataFormatString | String | Format string for some formatter, like decimals, e.g.: #,##0.00 | . | alignment | String | These are the possible values for the horizontal alignment: GENERAL, LEFT, CENTER, RIGHT, FILL, JUSTIFY, CENTER_SELECTION, DISTRIBUTED | . | verticalAlignment | String | These are the possible values for the horizontal alignment: TOP, CENTER, BOTTOM, JUSTIFY, DISTRIBUTED | . | fillBackgroundColor | String | These are the possible values for the background colors: BLACK1, WHITE1, RED1, BRIGHT_GREEN1, BLUE1, YELLOW1, PINK1, TURQUOISE1, BLACK, WHITE, RED, BRIGHT_GREEN, BLUE, YELLOW, PINK, TURQUOISE, DARK_RED, GREEN, DARK_BLUE, DARK_YELLOW, VIOLET, TEAL, GREY_25_PERCENT, GREY_50_PERCENT, CORNFLOWER_BLUE, MAROON, LEMON_CHIFFON, LIGHT_TURQUOISE1, ORCHID, CORAL, ROYAL_BLUE, LIGHT_CORNFLOWER_BLUE, SKY_BLUE, LIGHT_TURQUOISE, LIGHT_GREEN, LIGHT_YELLOW, PALE_BLUE, ROSE, LAVENDER, TAN, LIGHT_BLUE, AQUA, LIME, GOLD, LIGHT_ORANGE, ORANGE, BLUE_GREY, GREY_40_PERCENT, DARK_TEAL, SEA_GREEN, DARK_GREEN, OLIVE_GREEN, BROWN, PLUM | . | . | columnStyles | JSON Object | Key-value pairs, where the key is the column name and the value is the name of the style defined in the styles section. This value has priority 2 (the lower value, the higher priority). | . | rowStyles | JSON Object | Key-value pairs, where the key is the row index and the value is the name of the style defined in the styles section. This value has priority 3 (the lower value, the higher priority). | . | cellStyles | JSON Object | Key-value pairs, where the key is the cell to be selected (row, column) or the range of cells (start row, start column, end row, end column) and the value is the name of the style defined in the styles section. This value has priority 1 (the lower the value, the higher the priority). | . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf#creating-the-json-for-exporting-data",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf#creating-the-json-for-exporting-data"
  },"68": {
    "doc": "Export data to pdf",
    "title": "Export data to pdf",
    "content": "Table of Contents . | Introduction | Prerequisites | Steps . | Add dependencies | Add export url to application.yml | . | Check the export system | Creating the JSON for exporting data | . This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/basics/exportdata/export-data-to-pdf",
    
    "relUrl": "/basics/exportdata/export-data-to-pdf"
  },"69": {
    "doc": "Getting started",
    "title": "Create application from archetype",
    "content": "Open a console and type the next command: . Check the argument -DarchetypeVersion argument points to the latest version of the archetype available, version . mvn archetype:generate -DgroupId=YOUR_GROUP_ID -DartifactId=YOUR_ARTIFACT_ID -Dversion=YOUR_VERSION -Dpackage=YOUR.GROUPID.ARTIFACTID -DarchetypeGroupId=com.ontimize -DarchetypeArtifactId=ontimize-boot-backend-archetype -DarchetypeVersion=1.0.10 -DinteractiveMode=false . Command explanation . | Argument | Meaning | . | mvn | Maven CLI | . | archetype:generate | Use the Maven Archetype Plugin for create a new project from an archetype | . | -DgroupId=YOUR_GROUP_ID | Your project groupId | . | -DartifactId=YOUR_ARTIFACT_ID | Your project artifactId | . | -Dversion=YOUR_VERSION | Your project version | . | -Dpackage=YOUR.GROUPID.ARTIFACTID | Sets the package on which the project will be based (e.g.: In our examples, this will be com.ontimize.projectwiki) | . | -DarchetypeGroupId=com.ontimize | groupId of the Ontimize Boot archetype | . | -DarchetypeArtifactId=ontimize-boot-backend-archetype | artifactId of the Ontimize Boot archetype | . | -DarchetypeVersion=1.0.10 | version of the Ontimize Boot archetype. The lastest version is: | . | -DinteractiveMode=false | Forced to skip interactive mode and use the paramaters in the command | . ",
    "url": "/docs/v3/getting_started/#create-application-from-archetype",
    
    "relUrl": "/getting_started/#create-application-from-archetype"
  },"70": {
    "doc": "Getting started",
    "title": "Start the project",
    "content": "right_panel_open To start the project, it is necessary to start both the database and the server. The first thing to do is to execute the mvn install command inside the project’s root folder . $ cd app /app$ mvn install . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the database . right_panel_open Next, we navigate to the model folder to start the HSQLDB database . /app$ cd model /app/model$ mvn exec:java -Prun_database . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Start the server . right_panel_open To start the server, open a new console in the root folder of the project, navigate to boot folder and type the following command . /app$ cd boot /app/boot$ mvn spring-boot:run . | app . | api . | src . | main . | java . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | pom.xml | . | boot . | src . | main . | java . | boot . | core . | ServerApplication.java | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | model . | src . | main . | db . | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | ws . | src . | main . | java . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . ",
    "url": "/docs/v3/getting_started/#start-the-project",
    
    "relUrl": "/getting_started/#start-the-project"
  },"71": {
    "doc": "Getting started",
    "title": "Test the application",
    "content": "You can check if the application is working by making a request, for example, to the following address: . http://localhost:33333/users/user?columns=USER_ . Through applications such as Postman or from the browser . In both cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/getting_started/#test-the-application",
    
    "relUrl": "/getting_started/#test-the-application"
  },"72": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "Table of Contents . | Create application from archetype . | Command explanation | . | Start the project . | Start the database | Start the server | . | Test the application | . This page allows you to know how to start developing an application with Ontimize Boot in a simple way. This project includes an HSQLDB database already prepared to start the application. It can be replaced. ",
    "url": "/docs/v3/getting_started/",
    
    "relUrl": "/getting_started/"
  },"73": {
    "doc": "Home",
    "title": "📜 Ontimize Boot",
    "content": "Ontimize Boot uses Spring Boot technology to further simplify the development of a service or microservice based server, using the API REST communication system. ",
    "url": "/docs/v3/#-ontimize-boot",
    
    "relUrl": "/#-ontimize-boot"
  },"74": {
    "doc": "Home",
    "title": "✍ Use",
    "content": "To start developing an application with Ontimize Boot is very simple, we have an archetype that generates the skeleton of an application in seconds, from which you can develop the application you want. For more information, consult the desired topics in this documentation, using the search box or the side menu. ",
    "url": "/docs/v3/#-use",
    
    "relUrl": "/#-use"
  },"75": {
    "doc": "Home",
    "title": "👁️‍🗨️ Versions and dependencies",
    "content": "All the versions and dependencies of the artifacts contained in this project can be downloaded from Maven Central, as well as knowing each of its dependencies. ",
    "url": "/docs/v3/#%EF%B8%8F%EF%B8%8F-versions-and-dependencies",
    
    "relUrl": "/#️️-versions-and-dependencies"
  },"76": {
    "doc": "Home",
    "title": "📣 Changelog",
    "content": "You can consult our changelog at the following link . ",
    "url": "/docs/v3/#-changelog",
    
    "relUrl": "/#-changelog"
  },"77": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/docs/v3/",
    
    "relUrl": "/"
  },"78": {
    "doc": "Introduction",
    "title": "Welcome to the documentation of the backend development framework for building the future",
    "content": ". How to read and use this documentation. In this page you will find the necessary elements to start developing your backend application with Ontimize Boot. Below you will find links to the sections containing the information you need for a quick introduction to Ontimize Boot development. ",
    "url": "/docs/v3/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future",
    
    "relUrl": "/introduction/#welcome-to-the-documentation-of-the-backend-development-framework-for-building-the-future"
  },"79": {
    "doc": "Introduction",
    "title": "Sections",
    "content": "| Prerequisites | Check you meet minimum requirements to start. | . | Getting started | First contact with an Ontimize Boot app. Generate an app is easy with an archetype. | . | Basics | Basic information about the configuration of an application. | . | Tutorial | Tutorial on how to create from scratch an application with Ontimize Boot (in Spanish) | . ",
    "url": "/docs/v3/introduction/#sections",
    
    "relUrl": "/introduction/#sections"
  },"80": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": " ",
    "url": "/docs/v3/introduction/",
    
    "relUrl": "/introduction/"
  },"81": {
    "doc": "Versions",
    "title": "Ontimize Versions",
    "content": "The purpose of this page is to indicate the latest versions of Ontimize Boot projects published in Maven Central. | | | | | | | | . ",
    "url": "/docs/v3/versions/#ontimize-versions",
    
    "relUrl": "/versions/#ontimize-versions"
  },"82": {
    "doc": "Versions",
    "title": "3.X.X - Ontimize Boot",
    "content": "| Ontimize Boot | Ontimize Boot Parent | Ontimize EE | Ontimize EE DMS | Ontimize EE SMDS | Ontimize EE Report | Ontimize OpenAPI Generator | . | 3.14.0 | 3.14.0 | 5.11.0 | 3.1.0 | 1.3.1 | 3.4.0 | 1.0.4 | . | 3.13.0 | 3.13.0 | 5.10.0 | 3.3.0 | . | 3.12.0 | 3.12.0 | 5.9.0 | 1.0.2 | . | 3.11.0 | 3.11.0 | 5.8.0 | 1.0.0 | 3.2.0 | . | 3.10.1 | 3.10.1 | 5.7.0 | - | 1.0.1 | . | 3.10.0 | 3.10.0 | 5.7.0-SNAPSHOT | . | 3.9.0 | 3.9.0 | 5.6.0 | . | 3.8.1 | 3.8.1 | 5.5.0 | 3.1.0 | . | 3.8.0 | 3.8.0 | . | 3.7.0 | 3.7.0 | . | 3.6.0 | 3.6.0 | 3.0.0 | . | 3.5.0 | 3.5.0 | . | 3.4.0 | 3.4.0 | . | 3.3.0 | 3.3.0 | 3.0.0-SNAPSHOT | . | 3.2.0 | 3.2.0 | . | 3.1.0 | - | 5.4.0 | - | - | . ",
    "url": "/docs/v3/versions/#3xx---ontimize-boot",
    
    "relUrl": "/versions/#3xx---ontimize-boot"
  },"83": {
    "doc": "Versions",
    "title": "Ontimize Boot Archetype",
    "content": "| Ontimize Boot Archetype | Ontimize Boot | . | 1.0.11 | 3.14.0 | . | 1.0.10 | 3.13.0 | . | 1.0.9 | 3.12.0 | . | 1.0.8 | 3.10.1 | . | 1.0.7 | . | 1.0.6 | 3.9.0 | . | 1.0.5 | . | 1.0.4 | . | 1.0.3 | . | 1.0.2 | 3.8.1 | . | 1.0.1 | 3.1.0 | . | 1.0.0 | . ",
    "url": "/docs/v3/versions/#ontimize-boot-archetype",
    
    "relUrl": "/versions/#ontimize-boot-archetype"
  },"84": {
    "doc": "Versions",
    "title": "Versions",
    "content": "Table of Contents . | Ontimize Versions . | 3.X.X - Ontimize Boot | Ontimize Boot Archetype | . | . ",
    "url": "/docs/v3/versions/",
    
    "relUrl": "/versions/"
  },"85": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": ". ",
    "url": "/docs/v3/prerequisites/#prerequisites",
    
    "relUrl": "/prerequisites/#prerequisites"
  },"86": {
    "doc": "Prerequisites",
    "title": "Java JDK 11",
    "content": "Make sure you have the JDK version of Java 1 installed. There are many different builds, but perhaps the most common is Adoptium, which you can download from the following link (add your operating system and your computer’s architecture): Adoptium JDK . Check the option to set the JAVA_HOME variable. Following installation, make sure you have correctly installed Java JDK 1 by invoking the following commands in the command-line java -version . On the Mac, the command-line is available via the Terminal &gt;application. On the PC, it’s available as Command Prompt. The result should look similar to: . C:\\&gt;java -version openjdk version \"11.0.21\" 2023-10-17 OpenJDK Runtime Environment Temurin-11.0.21+9 (build 11.0.21+9) OpenJDK 64-Bit Server VM Temurin-11.0.21+9 (build 11.0.21+9, mixed mode) . ",
    "url": "/docs/v3/prerequisites/#java-jdk-11",
    
    "relUrl": "/prerequisites/#java-jdk-11"
  },"87": {
    "doc": "Prerequisites",
    "title": "Maven 3.6.0 or newer",
    "content": "Maven is required for downloading and using the Ontimize Boot application archetype, managing the libraries contained in the framework and even for running the application. You can download Maven from its official project page at the following link: Maven . Follow the installation steps indicated in the official web site . To check the installation, run the following command at a command prompt mvn -v. The result should look similar to: . C:\\&gt;mvn -v Apache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8) Maven home: C:\\Program Files (x86)\\maven Java version: 11.0.21, vendor: Eclipse Adoptium, runtime: C:\\Program Files\\Eclipse Adoptium\\jdk-11.0.21.9-hotspot Default locale: es_ES, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\" . ",
    "url": "/docs/v3/prerequisites/#maven-360-or-newer",
    
    "relUrl": "/prerequisites/#maven-360-or-newer"
  },"88": {
    "doc": "Prerequisites",
    "title": "IDE",
    "content": "It is not absolutely necessary to use an IDE, but it is highly recommended and helps the development of the application. We recommend the use of IntelliJ (in its Community or Ultimate version), Eclipse (in its Enterprise Java and Web Developers version) or Visual Studio Code. ",
    "url": "/docs/v3/prerequisites/#ide",
    
    "relUrl": "/prerequisites/#ide"
  },"89": {
    "doc": "Prerequisites",
    "title": "Prerequisites",
    "content": " ",
    "url": "/docs/v3/prerequisites/",
    
    "relUrl": "/prerequisites/"
  },"90": {
    "doc": "Sandbox",
    "title": "Sandbox",
    "content": " ",
    "url": "/docs/v3/sandbox/#sandbox",
    
    "relUrl": "/sandbox/#sandbox"
  },"91": {
    "doc": "Sandbox",
    "title": "Nueva página",
    "content": "Los include llevan un % en vez de un - --- title: \"Title of the page\" layout: default permalink: /path/to/page/ nav_order: X # has_children: false # has_toc: false # nav_exclude: true # grand_parent: Title grand_parent # parent: Title parent --- &lt;!-- {- include base_path %} --&gt; &lt;!-- {- include toc %} --&gt; . ",
    "url": "/docs/v3/sandbox/#nueva-p%C3%A1gina",
    
    "relUrl": "/sandbox/#nueva-página"
  },"92": {
    "doc": "Sandbox",
    "title": "Doble columna (código y árbol, con toggle)",
    "content": "Los highlight y endhighlight llevan un % en vez de un - &lt;div class=\"multicolumn\"&gt; &lt;div class=\"multicolumn\"&gt; &lt;div class=\"multicolumnleft\"&gt; &lt;button class=\"unstyle toggle-tree-btn\"&gt; &lt;span class=\"material-symbols-outlined\"&gt;right_panel_open&lt;/span&gt; &lt;/button&gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;div class=\"multicolumnright jstreeloader collapsed\"&gt; // &lt;ul&gt; &lt;/ul&gt; de jstree &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . right_panel_open EjemploDeClase.java . // Aquí el código o lo que sea . | Mi proyecto . | Carpeta 1 . | EjemploDeClaseCustom.java | . | Carpeta 2 . | EjemploDeClase.java | . | ejemplodepom.xml | . | . ",
    "url": "/docs/v3/sandbox/#doble-columna-c%C3%B3digo-y-%C3%A1rbol-con-toggle",
    
    "relUrl": "/sandbox/#doble-columna-código-y-árbol-con-toggle"
  },"93": {
    "doc": "Sandbox",
    "title": "Doble columna (código y código, sin toggle)",
    "content": "Los highlight y endhighlight llevan un % en vez de un - &lt;div class=\"multicolumn\"&gt; &lt;div class=\"multicolumnnopadding\" &gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;div class=\"verticalDivider\"&gt;&lt;/div&gt; &lt;div class=\"multicolumnnopadding\" &gt; {- highlight java%} // Aquí el código o lo que sea {- endhighlight %} &lt;/div&gt; &lt;/div&gt; . First column . // Aquí el código o lo que sea . Second column . // Aquí el código o lo que sea . ",
    "url": "/docs/v3/sandbox/#doble-columna-c%C3%B3digo-y-c%C3%B3digo-sin-toggle",
    
    "relUrl": "/sandbox/#doble-columna-código-y-código-sin-toggle"
  },"94": {
    "doc": "Sandbox",
    "title": "Sandbox",
    "content": "Table of Contents . | Sandbox . | Nueva página | Doble columna (código y árbol, con toggle) | Doble columna (código y código, sin toggle) | . | . ",
    "url": "/docs/v3/sandbox/",
    
    "relUrl": "/sandbox/"
  },"95": {
    "doc": "Systems",
    "title": "Systems",
    "content": " ",
    "url": "/docs/v3/systems/",
    
    "relUrl": "/systems/"
  },"96": {
    "doc": "Async Tasks",
    "title": "Async Tasks",
    "content": "This module works only for Ontimize Boot version 3.8.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/asynctask/#async-tasks",
    
    "relUrl": "/systems/asynctask/#async-tasks"
  },"97": {
    "doc": "Async Tasks",
    "title": "Introduction",
    "content": "The Async Task system will allow you to run decoupled, asynchronous tasks. This module will let you run any service method in a separate, newly created thread, by simply adding an annotation to its controller method. ",
    "url": "/docs/v3/systems/asynctask/#introduction",
    
    "relUrl": "/systems/asynctask/#introduction"
  },"98": {
    "doc": "Async Tasks",
    "title": "Previous concepts",
    "content": ". | Task: It is the generic representation of a decoupled task. It stores information such as its UUID, its current status and the result of the execution. | Aspect: It is a modularization of a concern that cuts across multiple classes. It allows us to intercept the execution of any given method or class and implement some alternative or extra behaviour for it. | . ",
    "url": "/docs/v3/systems/asynctask/#previous-concepts",
    
    "relUrl": "/systems/asynctask/#previous-concepts"
  },"99": {
    "doc": "Async Tasks",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-async-task-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-async-task . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/asynctask/#prerequisites",
    
    "relUrl": "/systems/asynctask/#prerequisites"
  },"100": {
    "doc": "Async Tasks",
    "title": "Steps",
    "content": "Database . Tasks Table . With the database started, we create the new table that will store the tasks information. CREATE TABLE TASKS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, UUID VARCHAR(255) NOT NULL, STATUS VARCHAR(255), RESULT VARBINARY(16777216)); . Server . Add Ontimize AsyncTask dependencies . The decoupled tasks system is integrated in the Ontimize Core module, so we need to declare it as a project dependency. right_panel_open boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-core&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-core&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the decoupled tasks module, indicate the storage engine it will use, the URL base path for the service, and its thread pool configuration. In this link you have information about the configuration of the asynchronous tasks system in the application.yml file. The enable property must be set to true and the storage engine type must be specified in the engine property before the server is started. The asynchronous tasks system requires the Ontimize TaskExecutor to be configured, see this link. right_panel_open application.yml . For database storage . ontimize: asynctask: enable: true engine: database url: /tasks . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | entities . | Candidate.java | . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add Task DAO . A specific DAO will be created for the tasks table, and it will implement the DAO interface in the tasks module. right_panel_open TaskDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TASKS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . TaskDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.boot.core.asynctask.IAsyncTaskDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"TaskDao\") @ConfigurationFile(configurationFile = \"dao/TaskDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class TaskDao extends OntimizeJdbcDaoSupport implements IAsyncTaskDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_UUID = \"UUID\"; public static final String ATTR_STATUS = \"STATUS\"; public static final String ATTR_RESULT = \"RESULT\"; public TaskDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Annotate controller method . In order to run some service method asynchronously, we need to annotate its respective REST controller method with @OAsyncTask. This way, a new thread will be created in order to handle the method&#8217;s execution, and we will recieve an instant response with the URL where we can check the execution status and retrieve its result when it&#8217;s finished. The service&#8217;s method MUST return a serializable object with getters and setters, as well as the controller&#8217;s method must return a ResponseEntity object. In this case, the query() method returns a Serializable object, the EntityResult. right_panel_open We will override the query() method of the ORestController class. CandidateRestController.java . package com.ontimize.projectwiki.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController; import com.ontimize.boot.core.asynctask.OAsyncTask; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.server.rest.ORestController; import com.ontimize.projectwiki.api.core.service.ICandidateService; @RestController @RequestMapping(\"/candidates\") @ComponentScan(basePackageClasses = { com.ontimize.projectwiki.api.core.service.ICandidateService.class }) public class CandidateRestController extends ORestController&lt;ICandidateService&gt;{ @Autowired private ICandidateService candidateService; @Override public ICandidateService getService() { return this.candidateService; } @OAsyncTask @Override public ResponseEntity&lt;EntityResult&gt; query(@PathVariable(\"name\") String name, @RequestParam(name = \"filter\", required = false) String filter, @RequestParam(name = \"columns\", required = false) String columns) { return super.query(name, filter, columns); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Delay service method . To know all the states through which the asynchronous request passes, we will add a delay in the candidateQuery() method. right_panel_open CandidateService.java . package com.ontimize.projectwiki.model.core.service; import java.util.concurrent.TimeUnit; . @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { . @Override public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { try { TimeUnit.MINUTES.sleep(1); } catch (InterruptedException e) { e.printStackTrace(); } return this.daoHelper.query(this.candidateDao, keyMap, attrList); } . } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | TaskDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | TaskDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Testing . To test the asynchronous tasks we need to execute a REST request to the method that we have marked with the annotation @OAsyncTask. In this case, the request is GET and has the following structure: http://localhost:33333/candidates/candidate?columns=ID,NAME,SURNAME . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /candidates | Indicates the service to be queried | . | /candidate | Indicates the DAO that will access that service | . | ?columns= | Indicates the columns to be queried | . The authorization used for this requests is authorization of the type BASIC. The access must be done with a user and password example: . User: demo Password: demouser . When you run the query, it should return a 202 Accepted with the following header: Location. This header contains the relative path to the asynchronous task that you have to execute to receive the data. Example . Location: /tasks/f16e9af7-ec0f-444c-a173-5b0179f5d57f . To execute the query the request needs to be GET and have the following structure: http://localhost:33333/tasks/f16e9af7-ec0f-444c-a173-5b0179f5d57f . The uuid that goes after /tasks varies in each execution of the previous query. The first time you run this query the status becomes Started. When the time set in the delay expires the second time you execute the query, the status becomes Completed, returns the request data and removes the task from the TASKS table. ",
    "url": "/docs/v3/systems/asynctask/#steps",
    
    "relUrl": "/systems/asynctask/#steps"
  },"101": {
    "doc": "Async Tasks",
    "title": "Async Tasks",
    "content": "Table of Contents . | Async Tasks . | Introduction | Previous concepts | Prerequisites | Steps . | Database . | Tasks Table | . | Server . | Add Ontimize AsyncTask dependencies | Modify application.yml | Add Task DAO | Annotate controller method | Delay service method | . | Testing | . | . | . ",
    "url": "/docs/v3/systems/asynctask/",
    
    "relUrl": "/systems/asynctask/"
  },"102": {
    "doc": "DMS System",
    "title": "DMS System",
    "content": " ",
    "url": "/docs/v3/systems/dms/#dms-system",
    
    "relUrl": "/systems/dms/#dms-system"
  },"103": {
    "doc": "DMS System",
    "title": "Introduction",
    "content": "A Document Management System (DMS) is a system that allows you to store files and keep track of the versions of those files. Ontimize Boot provides a DMS system that allows to store the files that are associated to the different records of a database table. ",
    "url": "/docs/v3/systems/dms/#introduction",
    
    "relUrl": "/systems/dms/#introduction"
  },"104": {
    "doc": "DMS System",
    "title": "Previous concepts",
    "content": ". | Document (or workspace): It is superentity into which several files can be grouped. | File: The file is the generic representation of a file. A file groups several versions of itself. | Version: Is the relationship to a physical file. | Category (or folder): Is a way of grouping files within the document. | . ",
    "url": "/docs/v3/systems/dms/#previous-concepts",
    
    "relUrl": "/systems/dms/#previous-concepts"
  },"105": {
    "doc": "DMS System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-dms . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/dms/#prerequisites",
    
    "relUrl": "/systems/dms/#prerequisites"
  },"106": {
    "doc": "DMS System",
    "title": "Steps",
    "content": "Database . DMS Tables . With the database started, we create the new tables that will store the DMS information. CREATE TABLE TDMS_DOC(ID_DMS_DOC INTEGER IDENTITY NOT NULL PRIMARY KEY,UPDATE_DATE TIMESTAMP,UPDATE_BY_ID INTEGER,DOC_NAME VARCHAR(255) NOT NULL,OWNER_ID INTEGER NOT NULL,DOC_DESCRIPTION CLOB(1G),DOC_KEYWORDS VARCHAR(255)); CREATE TABLE TDMS_DOC_FILE(ID_DMS_DOC_FILE INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_NAME VARCHAR(255) NOT NULL,ID_DMS_DOC INTEGER NOT NULL,FILE_TYPE VARCHAR(255),ID_DMS_DOC_CATEGORY INTEGER); CREATE TABLE TDMS_DOC_FILE_VERSION(ID_DMS_DOC_FILE_VERSION INTEGER IDENTITY NOT NULL PRIMARY KEY,FILE_PATH VARCHAR(500),VERSION INTEGER NOT NULL,FILE_DESCRIPTION CLOB(1G),IS_ACTIVE CHARACTER(1) NOT NULL,FILE_ADDED_DATE TIMESTAMP NOT NULL,FILE_ADDED_USER_ID INTEGER NOT NULL,ID_DMS_DOC_FILE INTEGER NOT NULL,THUMBNAIL BLOB(1G),FILE_SIZE INTEGER); CREATE TABLE TDMS_DOC_PROPERTY(ID_DMS_DOC_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,DOC_PROPERTY_KEY VARCHAR(255) NOT NULL,DOC_PROPERTY_VALUE VARCHAR(255),ID_DMS_DOC INTEGER NOT NULL); CREATE TABLE TDMS_RELATED_DOC(ID_DMS_RELATED_PROPERTY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC_MASTER INTEGER NOT NULL,ID_DMS_DOC_CHILD INTEGER NOT NULL); CREATE TABLE TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY INTEGER IDENTITY NOT NULL PRIMARY KEY,ID_DMS_DOC INTEGER NOT NULL,ID_DMS_DOC_CATEGORY_PARENT INTEGER,CATEGORY_NAME VARCHAR(255) NOT NULL); . Once the tables have been created, we add the foreign keys . ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE_VERSION ADD CONSTRAINT TDMS_DOC_FILE_VERSION_FK FOREIGN KEY(ID_DMS_DOC_FILE) REFERENCES TDMS_DOC_FILE(ID_DMS_DOC_FILE); ALTER TABLE TDMS_DOC_PROPERTY ADD CONSTRAINT TDMS_DOC_PROPERTY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC) ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK FOREIGN KEY(ID_DMS_DOC_MASTER) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_RELATED_DOC ADD CONSTRAINT TDMS_RELATED_DOC_FK_1 FOREIGN KEY(ID_DMS_DOC_CHILD) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_CATEGORY ADD CONSTRAINT TDMS_DOC_CATEGORY_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); ALTER TABLE TDMS_DOC_FILE ADD CONSTRAINT TDMS_DOC_FILE_FK_1 FOREIGN KEY(ID_DMS_DOC_CATEGORY) REFERENCES TDMS_DOC_CATEGORY(ID_DMS_DOC_CATEGORY); . Link DMS table with entity table . In this example we want each new candidate added to the application to have its own space to store documents, so we will modify the CANDIDATES table to contain a column that stores the primary key of the document (or workspace) that will be associated with it. ALTER TABLE CANDIDATE ADD ID_DMS_DOC INTEGER; . ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK FOREIGN KEY(ID_DMS_DOC) REFERENCES TDMS_DOC(ID_DMS_DOC); . Server . Add DMS dependencies . right_panel_open model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-common&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... ws/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.dms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-dms-rest&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add DMS DAO and modify Candidate DAO . A specific DAO will be created for each table in the DMS system, and each of them will implement a different interface. In turn, the candidate DAO will be modified to reflect the new column it contains. right_panel_open DMSCategoryDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_CATEGORY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_CATEGORY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;!-- TDMS_DOC --&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;UPDATE_DATE&lt;/Column&gt; &lt;Column&gt;UPDATE_BY_ID&lt;/Column&gt; &lt;Column&gt;DOC_NAME&lt;/Column&gt; &lt;Column&gt;OWNER_ID&lt;/Column&gt; &lt;Column&gt;DOC_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;DOC_KEYWORDS&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf JOIN ${mainschema}.TDMS_DOC AS tdd ON tddf.ID_DMS_DOC = tdd.ID_DMS_DOC LEFT JOIN ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv ON tddf.id_dms_doc_file = tddfv.id_dms_doc_file WHERE (tddfv.IS_ACTIVE = 'Y' OR tddfv.id_dms_doc_file_version IS NULL) #WHERE_CONCAT# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;Query id=\"allfiles\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddf\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE AS tddf #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentFileVersionDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_FILE_VERSION\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_FILE_VERSION&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"default\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"ID_DMS_DOC_FILE\" prefix=\"tddfv\" /&gt; &lt;/AmbiguousColumns&gt; &lt;ValidColumns&gt; &lt;!-- TDMS_DOC_FILE_VERSION --&gt; &lt;Column&gt;ID_DMS_DOC_FILE_VERSION&lt;/Column&gt; &lt;Column&gt;FILE_PATH&lt;/Column&gt; &lt;Column&gt;VERSION&lt;/Column&gt; &lt;Column&gt;FILE_DESCRIPTION&lt;/Column&gt; &lt;Column&gt;IS_ACTIVE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_DATE&lt;/Column&gt; &lt;Column&gt;FILE_ADDED_USER_ID&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;THUMBNAIL&lt;/Column&gt; &lt;Column&gt;FILE_SIZE&lt;/Column&gt; &lt;!-- TDMS_DOC_FILE --&gt; &lt;Column&gt;ID_DMS_DOC_FILE&lt;/Column&gt; &lt;Column&gt;FILE_NAME&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC&lt;/Column&gt; &lt;Column&gt;FILE_TYPE&lt;/Column&gt; &lt;Column&gt;ID_DMS_DOC_CATEGORY&lt;/Column&gt; &lt;/ValidColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM ${mainschema}.TDMS_DOC_FILE_VERSION AS tddfv LEFT JOIN ${mainschema}.TDMS_DOC_FILE AS tddf ON tddfv.ID_DMS_DOC_FILE = tddf.ID_DMS_DOC_FILE #WHERE# #ORDER# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . DMSDocumentPropertyDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_DOC_PROPERTY\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_DOC_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_DOC_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . DMSRelatedDocumentDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TDMS_RELATED_DOC\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_DMS_RELATED_PROPERTY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_DMS_RELATED_PROPERTY&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . right_panel_open CandidateDao.java ... public class CandidateDao extends OntimizeJdbcDaoSupport { ... public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSCategoryDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSCategoryDao; @Repository(\"DMSCategoryDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSCategoryDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSCategoryDao extends OntimizeJdbcDaoSupport implements IDMSCategoryDao { public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_ID_DMS_DOC_CATEGORY_PARENT = \"ID_DMS_DOC_CATEGORY_PARENT\"; public static final String ATTR_CATEGORY_NAME = \"CATEGORY_NAME\"; } . DMSDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentDao; @Repository(\"DMSDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentDao extends OntimizeJdbcDaoSupport implements IDMSDocumentDao { public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_UPDATE_DATE = \"UPDATE_DATE\"; public static final String ATTR_UPDATE_BY_ID = \"UPDATE_BY_ID\"; public static final String ATTR_DOC_NAME = \"DOC_NAME\"; public static final String ATTR_OWNER_ID = \"OWNER_ID\"; public static final String ATTR_DOC_DESCRIPTION = \"DOC_DESCRIPTION\"; public static final String ATTR_DOC_KEYWORDS = \"DOC_KEYWORDS\"; } . DMSDocumentFileDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileDao; @Repository(\"DMSDocumentFileDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileDao{ public static final String ATTR_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATTR_FILE_NAME = \"FILE_NAME\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; public static final String ATTR_FILE_TYPE = \"FILE_TYPE\"; public static final String ATTR_ID_DMS_DOC_CATEGORY = \"ID_DMS_DOC_CATEGORY\"; } . DMSDocumentFileVersionDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentFileVersionDao; @Repository(\"DMSDocumentFileVersionDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentFileVersionDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentFileVersionDao extends OntimizeJdbcDaoSupport implements IDMSDocumentFileVersionDao { public static final String ATT_ID_DMS_DOC_FILE_VERSION = \"ID_DMS_DOC_FILE_VERSION\"; public static final String ATT_FILE_PATH = \"FILE_PATH\"; public static final String ATT_VERSION = \"VERSION\"; public static final String ATT_FILE_DESCRIPTION = \"FILE_DESCRIPTION\"; public static final String ATT_IS_ACTIVE = \"IS_ACTIVE\"; public static final String ATT_FILE_ADDED_DATE = \"FILE_ADDED_DATE\"; public static final String ATT_FILE_ADDED_USER_ID = \"FILE_ADDED_USER_ID\"; public static final String ATT_ID_DMS_DOC_FILE = \"ID_DMS_DOC_FILE\"; public static final String ATT_THUMBNAIL = \"THUMBNAIL\"; public static final String ATT_FILE_SIZE = \"FILE_SIZE\"; } . DMSDocumentPropertyDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSDocumentPropertyDao; @Repository(\"DMSDocumentPropertyDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSDocumentPropertyDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSDocumentPropertyDao extends OntimizeJdbcDaoSupport implements IDMSDocumentPropertyDao { public static final String ATTR_ID_DMS_DOC_PROPERTY = \"ID_DMS_DOC_PROPERTY\"; public static final String ATTR_DOC_PROPERTY_KEY = \"DOC_PROPERTY_KEY\"; public static final String ATTR_DOC_PROPERTY_VALUE = \"DOC_PROPERTY_VALUE\"; public static final String ATTR_ID_DMS_DOC = \"ID_DMS_DOC\"; } . DMSRelatedDocumentDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.dms.dao.IDMSRelatedDocumentDao; @Repository(\"DMSRelatedDocumentDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/DMSRelatedDocumentDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class DMSRelatedDocumentDao extends OntimizeJdbcDaoSupport implements IDMSRelatedDocumentDao { public static final String ATTR_ID_DMS_RELATED_PROPERTY = \"ID_DMS_RELATED_PROPERTY\"; public static final String ATTR_ID_DMS_DOC_MASTER = \"ID_DMS_DOC_MASTER\"; public static final String ATTR_ID_DMS_DOC_CHILD = \"ID_DMS_DOC_CHILD\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify CandidateService insert method . The method of inserting new candidates will be modified so that, when inserting them, they will have a workspace to maintain the files to be uploaded associated with the inserted candidate. right_panel_open CandidateService.java ... import com.ontimize.jee.common.exceptions.DmsException; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.common.services.dms.DocumentIdentifier; import com.ontimize.jee.server.services.dms.DMSCreationHelper; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private DMSCreationHelper dmsHelper; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { try { DocumentIdentifier docId = this.dmsHelper.createDocument((String) attrMap.get(CandidateDao.ATTR_DNI)); attrMap.put(DMSNaming.DOCUMENT_ID_DMS_DOCUMENT, docId.getDocumentId()); } catch (DmsException e) { throw new OntimizeJEERuntimeException(\"ERROR_CREATING_DMS_DOC\", e); } return this.daoHelper.insert(this.candidateDao, attrMap); } ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add File Manager Rest Controller . right_panel_open DMSNameConverter.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.Arrays; import java.util.Date; import java.util.List; import java.util.Map; import org.springframework.stereotype.Service; import com.ontimize.jee.common.naming.DMSNaming; import com.ontimize.jee.server.dms.model.OFile; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @Service(\"DMSNameConverter\") public class DMSNameConverter implements IDMSNameConverter { @Override public Object getFileIdColumn() { return DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE; } @Override public Object getFileNameColumn() { return DMSNaming.DOCUMENT_FILE_NAME; } @Override public Object getFileSizeColumn() { return DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE; } @Override public Object getCategoryIdColumn() { return DMSNaming.CATEGORY_ID_CATEGORY; } @Override public Object getCategoryNameColumn() { return DMSNaming.CATEGORY_CATEGORY_NAME; } @Override public OFile createOFile(Map&lt;?, ?&gt; params) { OFile file = new OFile(); file.setId((Integer) params.get(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE)); file.setName((String) params.get(DMSNaming.DOCUMENT_FILE_NAME)); file.setType((String) params.get(DMSNaming.DOCUMENT_FILE_TYPE)); file.setSize((Integer) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE)); file.setCreationDate(((Date) params.get(DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE)).getTime()); file.setDirectory(false); return file; } @Override public List&lt;?&gt; getFileColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.DOCUMENT_FILE_ID_DMS_DOCUMENT_FILE, DMSNaming.DOCUMENT_FILE_NAME, DMSNaming.DOCUMENT_FILE_TYPE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_SIZE, DMSNaming.DOCUMENT_FILE_VERSION_FILE_ADDED_DATE); } @Override public List&lt;?&gt; getCategoryColumns(List&lt;?&gt; columns) { return Arrays.asList(DMSNaming.CATEGORY_ID_CATEGORY, DMSNaming.CATEGORY_CATEGORY_NAME, DMSNaming.CATEGORY_ID_CATEGORY_PARENT); } } . FileManagerRestController.java . package com.ontimize.projectwiki.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.ComponentScan; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.ontimize.jee.common.services.dms.IDMSService; import com.ontimize.jee.server.dms.rest.DMSRestController; import com.ontimize.jee.server.dms.rest.IDMSNameConverter; @RestController @RequestMapping(\"/filemanager\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.dms.IDMSService.class, com.ontimize.jee.server.dms.rest.IDMSNameConverter.class }) public class FileManagerRestController extends DMSRestController&lt;IDMSService, IDMSNameConverter&gt; { @Autowired private IDMSService dmsService; @Override public IDMSService getService() { return this.dmsService; } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to indicate the path where the dms files will be stored and the engine it will use. In this link you have information about the configuration of the DMS system in the application.yml file. The path specified in the basePath variable must exist before the server is started. right_panel_open application.yml . ontimize: dms: engine: odms basePath: file:/C:/applications/projectwiki/dms . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add permissions . It is necessary to add the permissions required for the role associated with the user to be able to execute REST requests, which are secured. For the example, we will add all the methods and give access to the demo user role. INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContentOfVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperty'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileRecoverPreviousVersion'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDeleteProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetAllFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/setRelatedDocuments'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentAddProperties'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/getRelatedDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryGetForDocument'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/moveFilesToCategory'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileVersionQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentQuery'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentGetFiles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileInsert'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/categoryDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetVersions'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileGetContent'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileUpdate'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/documentDelete'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.dms.DMSServiceImpl/fileQuery'); . Add all permissions to the user role demo. INSERT INTO PUBLIC.PUBLIC.TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . ",
    "url": "/docs/v3/systems/dms/#steps",
    
    "relUrl": "/systems/dms/#steps"
  },"107": {
    "doc": "DMS System",
    "title": "DMS System",
    "content": "Table of Contents . | DMS System . | Introduction | Previous concepts | Prerequisites | Steps . | Database . | DMS Tables | Link DMS table with entity table | . | Server . | Add DMS dependencies | Add DMS DAO and modify Candidate DAO | Modify CandidateService insert method | Add File Manager Rest Controller | Modify application.yml | Add permissions | . | . | . | . ",
    "url": "/docs/v3/systems/dms/",
    
    "relUrl": "/systems/dms/"
  },"108": {
    "doc": "I18N System",
    "title": "Introduction",
    "content": "Ontimize Boot&#8217;s remote internationalization service (i18n) allows you to manage the translations of the different languages of the application without having to modify the programs translation files, by storing the translations in the database. The interface implemented by the service is com.ontimize.jee.common.services.i18n.II18nService. ",
    "url": "/docs/v3/systems/i18n/#introduction",
    
    "relUrl": "/systems/i18n/#introduction"
  },"109": {
    "doc": "I18N System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-i18n . ",
    "url": "/docs/v3/systems/i18n/#prerequisites",
    
    "relUrl": "/systems/i18n/#prerequisites"
  },"110": {
    "doc": "I18N System",
    "title": "Configuring internationalization service in Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. DB configuration . If the configuration table does not exist in the DB, the database tables necessary for the operation of the service are created, one in which the names of the translation bundles shall be stored, and another in which the translations and the bundle to which they belong shall be stored: . SQL (HSQL) Statement . CREATE TABLE TI18N(ID_I18N INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,CLASS_NAME VARCHAR(150),I18N_DESCRIPTION VARCHAR(250)); CREATE TABLE TI18N_VALUE(ID_I18N_VALUE INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,ID_I18N INTEGER NOT NULL,\"KEY\" VARCHAR(250),ES_ES LONGVARCHAR,EN_US LONGVARCHAR,ES_ES_GL LONGVARCHAR); . In the first table (the one named TI18N) we will add a bundle to link all resources of the TI18N_VALUE table. SQL (HSQL) Statement . INSERT INTO TI18N (ID_I18N, CLASS_NAME, I18N_DESCRIPTION) VALUES(0, 'i18n.bundle', 'Resource bundle in database'); . In the case of the second table (the one named TI18N_VALUE) it will contain a column with the name of each Locale accepted by the application. SQL (HSQL) Statement . INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'ID','Id. Candidato','Candidate id','Id. Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHOTO','Foto','Photo','Foto'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'NAME','Nombre','Name','Nome'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'SURNAME','Apellido','Surname','Apelido'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'BIRTHDAY','Fecha de Nacimiento','Birthday','Data de nacemento'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'DNI','DNI Candidato','Candidate DNI','DNI Candidato'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'PHONE','Telefono','Phone','Telefono'); INSERT INTO TI18N_VALUE (ID_I18N, KEY, ES_ES, EN_US, GL_ES) VALUES(0,'EMAIL','Correo electronico','E-mail','Correo electronico'); . Add Permissions . The com.ontimize.jee.common.services.i18n.II18nService service has several methods that we will have to add to the permissions to be able to execute the methods. SQL (HSQL) Statement . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAllResourceBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getBundle'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAvailableBundles'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/getAvailableLocales'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/updateBundleValues'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.common.services.i18n.II18nService/deleteBundleValues'); . Add all permissions to the user role demo. SQL (HSQL) Statement . INSERT INTO TROLE_SERVER_PERMISSION tsp (ID_SERVER_PERMISSION, ID_ROLENAME) SELECT ID_SERVER_PERMISSION, ( SELECT ID_ROLENAME FROM TUSER_ROLE WHERE USER_ = 'demo') AS ID_ROLENAME FROM TSERVER_PERMISSION tp LEFT JOIN TROLE_SERVER_PERMISSION tsp ON tp.ID_SERVER_PERMISSION = tsp.ID_SERVER_PERMISSION WHERE tsp.ID_SERVER_PERMISSION IS NULL . Server configuration . To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: i18n: ref-bundle-repository: OCDatabaseBundleDao bundle-key-column: ID_I18N bundle-class-name-column: CLASS_NAME bundle-description-column: I18N_DESCRIPTION ref-bundle-value-repository: OCDatabaseBundleValueDao bundle-value-text-key-column: KEY bundle-value-key-column: ID_I18N_VALUE engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the ref-bundle-repository: OCDatabaseBundleDao attribute. Creation of DAO files . It is necessary to create the DAOs that reflect the new DB tables we have created. right_panel_open First we will create the *.xml files. OCDatabaseBundleDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OCDatabaseBundleValueDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"TI18N_VALUE\" datasource=\"mainDataSource\" catalog=\"\" schema=\"${mainschema}\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_I18N&lt;/Column&gt; &lt;Column&gt;KEY&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_I18N_VALUE&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java files we indicate that it is a repository whose name will be OCDatabaseBundleDao and OCDatabaseBundleValueDao respectively, using the @Repository annotation. With the @Lazy annotation, we indicate that the loading is delayed until it is completely necessary, and the @ConfigurationFile annotation allows us to configure this DAO using the XML file and an additional file where some features common to several DAOs can be stored, such as the schema they belong to. OCDatabaseBundleDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleDao() { super(); } } . OCDatabaseBundleValueDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(value = \"OCDatabaseBundleValueDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCDatabaseBundleValueDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCDatabaseBundleValueDao extends OntimizeJdbcDaoSupport { public OCDatabaseBundleValueDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add I18n Rest Controller . right_panel_open I18nRestController.java . With the tag @RequestMapping we indicate the route through which the rest service will receive the requests. With the tag @RequestBody we receive the data that were sent in the rest request. In this class we create a method that retrieves the translations of a bundle that we have specified in the language that we have indicated. package com.ontimize.projectwiki.ws.core.rest; import java.util.Enumeration; import java.util.HashMap; import java.util.Map; import java.util.Locale; import java.util.ResourceBundle; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.ComponentScan; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.dto.EntityResultMapImpl; import com.ontimize.jee.common.services.i18n.II18nService; import com.ontimize.jee.server.rest.InsertParameter; @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; @RequestMapping(value = \"/bundle\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; getBundle(@RequestBody InsertParameter parameter) { Map&lt;Object, Object&gt; data = parameter.getData(); ResourceBundle resource = iI18nService.getBundle(String.valueOf(data.get(\"bundle\")), new Locale(String.valueOf(data.get(\"lang\")), String.valueOf(data.get(\"country\")))); return new ResponseEntity&lt;EntityResult&gt;(bundleToEntityResult(resource), HttpStatus.OK); } private EntityResult bundleToEntityResult(ResourceBundle resource) { Map&lt;String, String&gt; values = new HashMap&lt;&gt;(); Enumeration&lt;String&gt; keys = resource.getKeys(); EntityResult eR = new EntityResultMapImpl(); while (keys.hasMoreElements()) { String key = keys.nextElement(); values.put(\"key\", key); values.put(\"value\", resource.getString(key)); eR.addRecord(values); values = new HashMap&lt;&gt;(); } return eR; } } . | ontimize-examples . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . | . ",
    "url": "/docs/v3/systems/i18n/#configuring-internationalization-service-in-ontimize-boot",
    
    "relUrl": "/systems/i18n/#configuring-internationalization-service-in-ontimize-boot"
  },"111": {
    "doc": "I18N System",
    "title": "Testing the i18n services",
    "content": "To test the i18n service we will use REST requests. For this, the following query will be executed: localhost:33333/i18n/bundle . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle | Indicates the request mapping class | . The request types can only be POST and the request body has to have the following structure: . | Element | Meaning | . | bundle | Indicates the class name of the bundle specified in the database | . | lang | Indicates the language of the bundle. It needs to be lowercase. | . | country | Indicates the country of the language. It needs to be uppercase. | . | Request type | Query | URL | Service method | Body request | . | POST | query | localhost:33333/i18n/bundle | getBundle | Example below | . Body request: . { \"data\": { \"bundle\": \"i18n.bundle\", \"lang\": \"en\", \"country\": \"US\" } } . The authorization used for these requests is authorization of the type BASIC. In this case, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/systems/i18n/#testing-the-i18n-services",
    
    "relUrl": "/systems/i18n/#testing-the-i18n-services"
  },"112": {
    "doc": "I18N System",
    "title": "Uses of I18n Rest Controller",
    "content": "The i18n interface has a few methods for managing bundles or translations. Next in this example, we will test the bundle values CRUD(Create, Read, Update, Delete) methods. To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. Query bundle values . To query the bundle values we create a method that receieves the bundle class, the language to query and the country of this language. The code to query the values of a bundle is in the previous section. Update bundle values . To update the bundle values we create a method that receieves the translations to modify of a bundle that we have specified. Code . right_panel_open I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.UpdateParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/update\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE) public void updateBundleValues(@RequestBody UpdateParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getData().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); ArrayList e = (ArrayList) parameter.getData().get(\"bundleValues\"); Map&lt;String, Object&gt; translationValues = new HashMap&lt;&gt;(); for (int i = 0; i &lt; e.size(); i++) { Map&lt;String,Object&gt; map = (Map&lt;String, Object&gt;) e.get(i); translationValues.put(String.valueOf(map.get(\"language\")), map.get(\"value\")); } values.addBundleValue(key, bundleClass, translationValues); iI18nService.updateBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . REST request . The request to execute is the following: localhost:33333/i18n/bundle/update . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/update | Indicates the request mapping class | . The request types can only be PUT and the request body has to have the following structure: . | Element | Meaning | . | key | Indicates the key of the value to be translated. | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | bundleValues | Indicates the values of the translation to be modified. | . Body request: . { \"filter\":{ \"key\": \"EMAIL\" }, \"data\": { \"bundleClass\": \"i18n.bundle\", \"bundleValues\": [ { \"language\":\"es_ES\", \"value\":\"ejemplo@ejemplo.com\" }, { \"language\":\"en_US\", \"value\":\"example@example.com\" }, { \"language\":\"gl_ES\", \"value\":\"exemplo@exemplo.com\" } ] } } . Insert bundle values . The method to update the bundle values explained in the previous point also allows creating a new value in the case of the specified value does not exist in the database. DatabaseI18nEngine.java . Object key = this.getBundleValueKey(filter); if (key != null) { // update filter.put(this.bundleValuesKeyColumn, key); this.daoBundleValues.update(hValues, filter); } else { // insert hValues.putAll(filter); this.daoBundleValues.insert(hValues); } . Delete bundle values . To delete the bundle values we create a method that receives the bundle class and the key of the bundle values. right_panel_open I18nRestController.java . package com.ontimize.projectwiki.ws.core.rest; import java.util.ArrayList; . import com.ontimize.jee.common.gui.i18n.DatabaseBundleValues; import com.ontimize.jee.server.rest.DeleteParameter; . @RestController @RequestMapping(\"/i18n\") @ComponentScan(basePackageClasses = { com.ontimize.jee.common.services.i18n.II18nService.class }) public class I18nRestController { @Autowired @Qualifier(\"I18nService\") private II18nService iI18nService; . @RequestMapping(value = \"/bundle/delete\", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE) public void deleteBundleValues(@RequestBody DeleteParameter parameter) { DatabaseBundleValues values = new DatabaseBundleValues(iI18nService.getAvailableLocales()); String bundleClass = String.valueOf(parameter.getFilter().get(\"bundleClass\")); String key = String.valueOf(parameter.getFilter().get(\"key\")); values.addBundleValue(key, bundleClass, null); iI18nService.deleteBundleValues(values); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCDatabaseBundleDao.java | OCDatabaseBundleValueDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCDatabaseBundleDao.xml | OCDatabaseBundleValueDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | I18nRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . The request to execute is the following: localhost:33333/i18n/bundle/delete . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /i18n | Indicates the service to be queried | . | /bundle/delete | Indicates the request mapping class | . The request types can only be DELETE and the request body has to have the following structure: . | Element | Meaning | . | bundleClass | Indicates the class name of the bundle specified in the database. | . | key | Indicates the key of the value to be translated. | . Body Request . { \"filter\":{ \"bundleClass\": \"i18n.bundle\", \"key\": \"EMAIL\" } } . ",
    "url": "/docs/v3/systems/i18n/#uses-of-i18n-rest-controller",
    
    "relUrl": "/systems/i18n/#uses-of-i18n-rest-controller"
  },"113": {
    "doc": "I18N System",
    "title": "I18N System",
    "content": "Table of Contents . | Introduction | Prerequisites | Configuring internationalization service in Ontimize Boot . | DB configuration | Add Permissions | Server configuration | Creation of DAO files | Add I18n Rest Controller | . | Testing the i18n services | Uses of I18n Rest Controller . | Query bundle values | Update bundle values | Insert bundle values | Delete bundle values | . | . ",
    "url": "/docs/v3/systems/i18n/",
    
    "relUrl": "/systems/i18n/"
  },"114": {
    "doc": "Keycloak Security",
    "title": "Keycloak Security",
    "content": " ",
    "url": "/docs/v3/systems/keycloak#keycloak-security",
    
    "relUrl": "/systems/keycloak#keycloak-security"
  },"115": {
    "doc": "Keycloak Security",
    "title": "Introduction",
    "content": "Keycloak is a solution that adds authentication and authorization to applications and services with minimum effort. It supports single-sign on, identity brokering, user federation, and standard protocols such as OpenID Connect, OAuth 2.0, and SAML 2.0 (More information in this link). ",
    "url": "/docs/v3/systems/keycloak#introduction",
    
    "relUrl": "/systems/keycloak#introduction"
  },"116": {
    "doc": "Keycloak Security",
    "title": "Previous concepts",
    "content": ". | Realm: A realm manages a set of users, credentials, roles, and groups. A user belongs to and logs into a realm. Realms are isolated from one another and can only manage and authenticate the users that they control. | Client (or resource): Clients are applications or services that want to use Keycloak to secure themselves, requesting Keycloak to authenticate a user and provide a single sign-on solution. | . ",
    "url": "/docs/v3/systems/keycloak#previous-concepts",
    
    "relUrl": "/systems/keycloak#previous-concepts"
  },"117": {
    "doc": "Keycloak Security",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-keycloak-login-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-keycloak-login . Keycloak . We need a Keycloak instance, then we must configure a realm with a client for backend, a client for frontend, a role and a user. For the examples we will use the next settings: . | Element | Value | Meaning | . | Url | http://localhost:8082 | The URL of the host for keycloak security | . | Realm | demo | The realm name | . | Client | projectwiki | The client name (Enable the implicit flow check to allow testing with Swagger UI) | . | Role | admin | The role name | . | User | demo | The username | . | Password | demouser | The user password | . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/keycloak#prerequisites",
    
    "relUrl": "/systems/keycloak#prerequisites"
  },"118": {
    "doc": "Keycloak Security",
    "title": "Steps",
    "content": "Configure the role . If the role does not exist in the database, we can create it with the following command: . INSERT INTO TROLE(ID_ROLENAME,ROLENAME,XMLCLIENTPERMISSION) VALUES(0,'admin','&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;security&gt;&lt;/security&gt;') . Add the Keycloak dependency . The Keycloak system is integrated in the Ontimize Core module, so we need to declare it as a project dependency. right_panel_open pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-keycloak&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Enable the Keycloak security . In the application.yml we need to change the ontimize security mode to keycloak and add the following properties (More information in this link): . right_panel_open application.yml . ontimize: ... security: mode: keycloak keycloak: auth-server-url: http://localhost:8082 realm: demo resource: projectwiki public-client: true use-resource-role-mappings: true ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/keycloak#steps",
    
    "relUrl": "/systems/keycloak#steps"
  },"119": {
    "doc": "Keycloak Security",
    "title": "Testing",
    "content": "In order to call the REST API of the application, we must first log in using the Keycloak authentication user interface, capture the returned token, and then provide it in the authentication header of the http request. To test this functionality we will use the Swagger tool deployed with the application, but we need to change the authentication settings on the OpenAPI declaration file. Modify openapi-rest.yml . In the openapi-rest.yml we need to change the security settings to use OAuth2, replacing the previous BasicAuth properties (More information in this link and in this link): . right_panel_open openapi-rest.yml . components: ... securitySchemes: OAuth2: type: oauth2 flows: implicit: authorizationUrl: http://localhost:8082/realms/demo/protocol/openid-connect/auth scopes: {} security: - OAuth2: [] ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Once we have built and launched the project, we can access to the application opening a web browser and going to http://localhost:33333): . We can access to the authorization dialog by clicking on the Authorize button, then we must provide the client and click on the Authorize button. If there is not exists a previous Keycloak session, a new tab will be opened requesting then credentials to login. Once the login process has been completed, it will return to the authorization dialog, showing the result of the authorization process. We can close the authorization dialog and test the API. ",
    "url": "/docs/v3/systems/keycloak#testing",
    
    "relUrl": "/systems/keycloak#testing"
  },"120": {
    "doc": "Keycloak Security",
    "title": "Removing the configurations and classes that are no longer needed",
    "content": "Once the Keycloak authentication had been implemented, the configurations and the data access objects for Ontimize authentication can be removed. Configurations for user information in application.yml . The user-information-service and user-role-information-service configurations under ontimize.security are no longer used and we can remove them. right_panel_open application.yml . ontimize: ... security: ... user-information-service: user-repository: UserDao user-login-column: USER_ user-password-column: PASSWORD query-id: login other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN user-role-information-service: user-role-repository: UserRoleDao query-id: userRole role-login-column: USER_ role-name-column: ROLENAME ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . User CRUD API . The CRUD endpoints for the users management are no longer used, then we can remove or comment the inheritance of the ORestController class from the UserRestController. right_panel_open UserRestController.java . package com.ontimize.projectwiki.ws.core.rest; // import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; // import com.ontimize.projectwiki.api.core.service.IUserService; import com.ontimize.jee.common.dto.EntityResult; // import com.ontimize.jee.server.rest.ORestController; @RestController @RequestMapping(\"/users\") public class UserRestController /* extends ORestController&lt;IUserService&gt; */ { /* @Autowired private IUserService userSrv; @Override public IUserService getService() { return this.userSrv; } */ @RequestMapping( value = \"/login\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public ResponseEntity&lt;EntityResult&gt; login() { return new ResponseEntity&lt;&gt;(HttpStatus.OK); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Services and data access objects for user information . The user services and DAOs are no longer needed and we can remove them. | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Tables for user information . With the above configurations and classes removed, we can remove the user tables from the database with the following commands: . right_panel_open DELETE FROM TROLE_SERVER_PERMISSION WHERE ID_ROLE_SERVER_PERMISSION = 0 DELETE FROM TSERVER_PERMISSION WHERE ID_SERVER_PERMISSION = 0 DROP TABLE PUBLIC.TUSER_PREFERENCE DROP TABLE PUBLIC.TUSER_ROLE DROP TABLE PUBLIC.TUSER . And we can remove them from the database creation script. templateDB.txt ... CREATE MEMORY TABLE PUBLIC.TUSER(USER_ VARCHAR(50) NOT NULL PRIMARY KEY,PASSWORD VARCHAR(255),NAME VARCHAR(50),SURNAME VARCHAR(50),EMAIL VARCHAR(50),NIF VARCHAR(50),USERBLOCKED TIMESTAMP,LASTPASSWORDUPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,FIRSTLOGIN BOOLEAN DEFAULT TRUE) ... CREATE MEMORY TABLE PUBLIC.TUSER_ROLE(ID_USER_ROLE INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,ID_ROLENAME INTEGER,USER_ VARCHAR(50),CONSTRAINT FK_TUSER FOREIGN KEY(USER_) REFERENCES PUBLIC.TUSER(USER_),CONSTRAINT FK_TROLE FOREIGN KEY(ID_ROLENAME) REFERENCES PUBLIC.TROLE(ID_ROLENAME)) ALTER TABLE PUBLIC.TUSER_ROLE ALTER COLUMN ID_USER_ROLE RESTART WITH 1 ... CREATE MEMORY TABLE PUBLIC.TUSER_PREFERENCE(ID_USER_PREFERENCE INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,PREFERENCE_NAME VARCHAR(150),USER_LOGIN VARCHAR(150),PREFERENCE_VALUE VARCHAR(16777216)) ALTER TABLE PUBLIC.TUSER_PREFERENCE ALTER COLUMN ID_USER_PREFERENCE RESTART WITH 1 ... INSERT INTO TUSER VALUES('demo','demouser','demo','demo',NULL,'44460713B',NULL,NULL,NULL) ... INSERT INTO TUSER_ROLE VALUES(0,0,'demo') ... INSERT INTO TSERVER_PERMISSION VALUES(0,'com.ontimize.jee.common.services.user.IUserInformationService/getUserInformation') ... INSERT INTO TUSER_PREFERENCE VALUES(0,'user_preference','demo','Iw0KI1R1ZSBNYXkgMTYgMTI6NTc6MDYgQ0VTVCAyMDE3DQpkZW1vX2FwcF9zdGF0dXNfYmFyX3Zpc2libGU9eWVzDQpkZW1vX2FkanVzdF90cmVlX3NwYWNlPXRydWUNCmRlbW9fYXBwX3dpbmRvd19zdGF0ZT0wDQpkZW1vX3RhYmxlX2NvbmZfc29ydF9maWx0ZXJfZm9ybUN1c3RvbWVyLnhtbF9DdXN0b21lclNlcnZpY2UuY3VzdG9tZXJfVEVTVD1udWxsO251bGw7U1VSTkFNRVw9OThcOjF8SURcPTc1XDoyfE5BTUVcPTk5XDozfENVU1RPTUVSVFlQRUlEXD0wXDo0fENVU1RPTUVSSURcPTEyNVw6NXxBRERSRVNTXD0xMjNcOjZ8UEhPTkVcPTEyMVw6N3xTVEFSVERBVEVcPTEzNlw6OHxMT05HSVRVREVcPTExNlw6OXxMQVRJVFVERVw9MTEzXDoxMHxFTUFJTFw9MTcwXDoxMnw7QkFTRTY0ck8wQUJYTnlBQk5xWVhaaExuVjBhV3d1U0dGemFIUmhZbXhsRTdzUEpTRks1TGdEQUFKR0FBcHNiMkZrUm1GamRHOXlTUUFKZEdoeVpYTm9iMnhrZUhBL1FBQUFBQUFBQ0hjSUFBQUFDd0FBQUFCNA0KZGVtb190YWJsZV9jb25mX3NvcnRfZmlsdGVyX2NvbmZpZ3VyYXRpb25zX2Zvcm1DdXN0b21lci54bWxfQ3VzdG9tZXJTZXJ2aWNlLmN1c3RvbWVyPVRFU1QNCmRlbW9fdGFibGVfY29udHJvbF9wYW5lbF9mb3JtQWNjb3VudHMtZGV0YWlsLnhtbF9Nb3ZlbWVudFNlcnZpY2UubW92ZW1lbnQ9Z3JvdXB0YWJsZWtleTtkZWZhdWx0Y2hhcnRidXR0b247ZXhjZWxleHBvcnRidXR0b247c3Vtcm93YnV0dG9uO2NhbGN1bGVkY29sc2J1dHRvbjtwcmludGluZ2J1dHRvbjtmaWx0ZXJzYXZlYnV0dG9uO3Zpc2libGVjb2xzYnV0dG9uO2h0bWxleHBvcnRidXR0b247Y29weWJ1dHRvbjtncm91cHRhYmxla2V5O2luc2VydGJ1dHRvbjtyZWZyZXNoYnV0dG9uDQpkZW1vX2Zvcm1CcmFuY2hlcy1kZXRhaWwueG1sPTg4MDs1MDU7LTExNTA7MzY5DQpkZW1vX2RldGFpbF9kaWFsb2dfc2l6ZV9wb3NpdGlvbl9mb3JtQ3VzdG9tZXIueG1sX0N1c3RvbWVyU2VydmljZS5jdXN0b21lcj03NDk7MzUwOy0xOTA1OzM5MQ0KZGVtb19hcHBfdG9vbGJhcl9sb2NhdGlvbj1Ob3J0aA0KZGVtb19hcHBfd2luZG93X3Bvc2l0aW9uPS0xNTgwOzExDQpkZW1vX2FwcF93aW5kb3dfc2l6ZT0xNTg0OzEwNDQNCmRlbW9fZm9ybUVtcGxveWVlcy1kZXRhaWwueG1sPTExMTY7NzM5OzYxMDsxOTUNCmRlbW9fZm9ybUFjY291bnRzLWRldGFpbC54bWw9OTE1OzUwMDstMTE1MDszNjkNCg==') ... INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,0,0) ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | public . | index.html | . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-openapi . | src . | main . | ontimize . | marker-ws-ontimize-openapi-generator | . | resources . | public . | restapi . | api . | Test.yml | User.yml | . | base . | AdvancedEntityResult.yml | AdvancedQueryParameter.yml | ColumnsParameter.yml | DeleteParameter.yml | DocumentIdentifier.yml | EntityResult.yml | ExportParameter.yml | FileListParameter.yml | FilterParameter.yml | InsertParameter.yml | MultipartFile.yml | MultipartFiles.yml | Number.yml | Object.yml | OFile.yml | OFiles.yml | Operator.yml | QueryParameter.yml | Responses.yml | SQLOrder.yml | String.yml | UpdateFileParameter.yml | UpdateParameter.yml | Void.yml | . | openapi-rest.yml | . | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/keycloak#removing-the-configurations-and-classes-that-are-no-longer-needed",
    
    "relUrl": "/systems/keycloak#removing-the-configurations-and-classes-that-are-no-longer-needed"
  },"121": {
    "doc": "Keycloak Security",
    "title": "Keycloak Security",
    "content": "Table of Contents . | Keycloak Security . | Introduction | Previous concepts | Prerequisites . | Keycloak | . | Steps . | Configure the role | Add the Keycloak dependency | Enable the Keycloak security | . | Testing . | Modify openapi-rest.yml | . | Removing the configurations and classes that are no longer needed . | Configurations for user information in application.yml | User CRUD API | Services and data access objects for user information | Tables for user information | . | . | . ",
    "url": "/docs/v3/systems/keycloak",
    
    "relUrl": "/systems/keycloak"
  },"122": {
    "doc": "LDAP Security",
    "title": "LDAP Security",
    "content": " ",
    "url": "/docs/v3/systems/ldap#ldap-security",
    
    "relUrl": "/systems/ldap#ldap-security"
  },"123": {
    "doc": "LDAP Security",
    "title": "Introduction",
    "content": "The Lightweight Directory Access Protocol (LDAP) is an open protocol for accessing a company&#8217;s information services. Typically, this protocol is used to provide all company users with an easy way to use all services that require access credentials with a single username and password. ",
    "url": "/docs/v3/systems/ldap#introduction",
    
    "relUrl": "/systems/ldap#introduction"
  },"124": {
    "doc": "LDAP Security",
    "title": "Steps",
    "content": "Database . Add a new user . With the database started, we create a new user with the same username that we have registered in the domain. When we try to login we need to use the password of the domain, not the password that inserts into the database. Then, we need to bind this new user with an existing role. INSERT INTO TUSER (USER_, PASSWORD, NAME, SURNAME, EMAIL, NIF, USERBLOCKED, LASTPASSWORDUPDATE, FIRSTLOGIN) VALUES('domain.username', 'somepassword', 'Name', 'Surname', 'Email', 'Nif', NULL, NULL, NULL); . INSERT INTO TUSER_ROLE (ID_ROLENAME,USER_) VALUES (0,'domain.username'); . Modify application.yml . Add LDAP properties . In the application.yml we need to change the ontimize security mode to ldap and add the following properties (More information in this link): . right_panel_open application.yml . ontimize: security: mode: ldap ldap: active: true host: 10.0.0.1 port: 389 login-type: simple binddn: ou=XXXX,dc=YYY,dc=ZZZ basedn: dc=MMMM,dc,NNN domain: yourdomain.com . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | security . | CustomSecurityAutoConfiguration.java | LdapAuthenticationMechanism.java | LdapError.java | . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/ldap#steps",
    
    "relUrl": "/systems/ldap#steps"
  },"125": {
    "doc": "LDAP Security",
    "title": "LDAP Security",
    "content": "Table of Contents . | LDAP Security . | Introduction | Steps . | Database . | Add a new user | . | Modify application.yml . | Add LDAP properties | . | . | . | . ",
    "url": "/docs/v3/systems/ldap",
    
    "relUrl": "/systems/ldap"
  },"126": {
    "doc": "Mail System",
    "title": "Mail System",
    "content": " ",
    "url": "/docs/v3/systems/mail/#mail-system",
    
    "relUrl": "/systems/mail/#mail-system"
  },"127": {
    "doc": "Mail System",
    "title": "Introduction",
    "content": "Ontimize Boot is a framework that allows you to simplify the configuration of a project made with Ontimize EE, in a fast and efficient way. The email system allows you to send mail from the server with a simple configuration. ",
    "url": "/docs/v3/systems/mail/#introduction",
    
    "relUrl": "/systems/mail/#introduction"
  },"128": {
    "doc": "Mail System",
    "title": "Prerequisites",
    "content": "There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-mail . ",
    "url": "/docs/v3/systems/mail/#prerequisites",
    
    "relUrl": "/systems/mail/#prerequisites"
  },"129": {
    "doc": "Mail System",
    "title": "Configuring email service with Ontimize Boot",
    "content": "In this complete tutorial, we are going to create a backend for an application from scratch, including the database with different tables, configuring the server, creating the necessary DAO files and implementing the service. At the end of the tutorial, we will even be testing that our mailing system is fully operational and functional. DB configuration . If the configuration table does not exist in the DB, it can be created with the following command: . Sentencia SQL (HSQL) . CREATE TABLE TSETTING(ID_SETTING INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,SETTING_KEY LONGVARCHAR,SETTING_VALUE LONGVARCHAR,SETTING_COMMENTLONGVARCHAR); . We fill in this table with the data that applies to each specific mail server, in this example, we will use the following: . | SETTING_KEY | SETTING_VALUE | SETTING_COMMENT | . | mail_host | localhost | Server host | . | mail_port | 2525 | Email server port | . | mail_protocol | smtp | Mailing protocol | . | mail_user | my.mail@example.com | User for sending | . | mail_password | my_password | Mail server password | . | mail_encoding | UTF-8 | Encoding of mails | . | mail_properties | mail.smtp.auth:true; mail.smtp.starttls.enable:true; | Mail properties | . Sentencia SQL (HSQL) . INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_host', 'localhost', 'Server host'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_port', '2525', 'Email server port'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_protocol', 'smtp', 'Mailing protocol'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_user', 'my.mail@example.com', 'User for sending'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_password', 'my_password', 'Mail server password'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_encoding', 'UTF-8', 'Encoding of mails'); INSERT INTO TSETTING (SETTING_KEY, SETTING_VALUE, SETTING_COMMENT) VALUES('mail_properties', 'mail.smtp.auth:true;mail.smtp.starttls.enable:true;', 'Mail properties'); . The implementation interface contains multiple methods, to which we must give permissions, if our application has permissions: . Sentencia SQL (HSQL) . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.mail.IMailServiceServer/sendMail'); INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.jee.server.services.mail.IMailServiceServer/sendMailWithoutAttach'); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.server.services.mail.IMailServiceServer/sendMail')); INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME, ID_SERVER_PERMISSION) VALUES((SELECT ID_ROLENAME FROM TROLE WHERE ROLENAME='admin'), (SELECT ID_SERVER_PERMISSION FROM TSERVER_PERMISSION WHERE PERMISSION_NAME='com.ontimize.jee.server.services.mail.IMailServiceServer/sendMailWithoutAttach')); . Adding dependencies . Now we need to add the correct dependency in the correct pom.xml: . right_panel_open ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Server Configuration . right_panel_open To configure this service, a new configuration fragment shall be added to the application.yml file. ontimize: mail: ref-repository: OCSettingsDao filter-column-name: SETTING_KEY value-column-name: SETTING_VALUE query-id: default filter-column-value-encoding: mail_encoding filter-column-value-host: mail_host filter-column-value-port: mail_port filter-column-value-protocol: mail_protocol filter-column-value-user: mail_user filter-column-value-password: mail_password filter-column-value-java-mail-properties: mail_properties engine: default . This configuration indicates the keys and values to be stored in the database. The database table is the one corresponding to the bean described in the refRepository: OCSettingsDao attribute (in this case, OCSettingsDao), which can be seen in the table TSETTING attribute (for this example, TSETTING) of the *.xml configuration file of the bean (OCSettingsDao.xml). The keys would be stored in the SETTING_KEY column, the values in the SETTING_VALUE column and the rest of the attributes map the keys that exist in the database. In addition, the packet that will be scanned to look for the implementation of the email service is indicated. | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Creation of DAO files . Let&#8217;s create a DAO (Data Access Object) in the projectwiki-model module to use as a model of this database table. The DAO is composed by 2 files, a file with extension *.xml and a *.java file. right_panel_open In our *.xml file we will indicate the database table for which DAO belongs, the data source from which we collect the information (e.g. the database connection that contains this table) and the schema to which the table belongs. OCSettingsDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TSETTING\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_SETTING&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID_SETTING&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . In the *.java file we indicate that it is a repository whose name will be OCSettingsDao, through the annotation @Repository. With the annotation @Lazy, we will indicate that the load is delayed until it is completely necessary (improving in that way the performance), and the annotation @ConfigurationFile allows us to configure this DAO using the XML file and an additional file where some common characteristics to several DAOs can be stored. like the scheme to which they belong. OCSettingsDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OCSettingsDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OCSettingsDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OCSettingsDao extends OntimizeJdbcDaoSupport { public OCSettingsDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Implementation in an existing service . To use this service in another service (e.g. to send a mail when a new record is created), just add a variable of type com.ontimize.jee.common.services.mail.IMailService and annotate it with @Autowired. For space reasons, the entire files are not included, only the code snippets related to the tutorial. The &#8230; in the code snippets indicate that there may be unrelated code before or after them. right_panel_open ... import com.ontimize.jee.common.services.mail.IMailService; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... @Autowired private IMailService mailService; ... @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { EntityResult toRet = this.daoHelper.insert(this.candidateDao, attrMap); if ((toRet.getCode() != EntityResult.OPERATION_WRONG)) { Runnable runnable = () -&gt; { List&lt;String&gt; receiverList = new ArrayList&lt;String&gt;(); receiverList.add(\"receiver@example.com\"); StringBuilder builder = new StringBuilder(); builder.append(\"Created new user.\"); try { this.mailService.sendMailWithoutAttach(\"my.mail@example.com\", receiverList, \"New candidate\", builder.toString()); } catch (OntimizeJEEException e) { } }; DelegatingSecurityContextRunnable wrappedRunnable = new DelegatingSecurityContextRunnable(runnable); new Thread(wrappedRunnable).start(); } return toRet; } ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | OCSettingsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | OCSettingsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/mail/#configuring-email-service-with-ontimize-boot",
    
    "relUrl": "/systems/mail/#configuring-email-service-with-ontimize-boot"
  },"130": {
    "doc": "Mail System",
    "title": "Checking the sending of mails",
    "content": "In order to check that the created service is indeed sending mails, we will use an external service called FakeSMTP, is a free Fake SMTP Server with GUI for testing emails in applications easily. To do this, we enter this link and clone the repository it indicates into the workspace where we have our project. We launch the DB and the server. Next, open a console and move to the path where FakeSMTP was downloaded: ...\\FakeSMTP&gt; mvn package-Dmaven.test.skip ...\\FakeSMTP&gt; cd target ...\\FakeSMTP\\target&gt; java -jar fakeSMTP-2.1-SNAPSHOT.jar -s -p 2525 . | Command | Meaning | 34 | . | fakeSMTP-VERSION.jar | Downloaded version. | &#160; | . | -s | Launch the server. | &#160; | . | - p 2525 | Launch the application on the port indicated. | &#160; | . Now we can use an application like Postman to execute different REST requests to our project. Use REST request . The requests contains the following structure: localhost:33333/candidates/candidate . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /candidates | Indicates the service to be queried | . | /candidate | Indicates the DAO that will access that service | . The request types can only be GET, POST, PUT, DELETE. Below are examples of request for candidates (CANDIDATES). The authorization used for these requests is authorization of the type BASIC. In both cases, the access must be done with a user and password example: . User: demo Password: demouser . | Request type | Query | URL | Service method | Body request | . | POST | insert | localhost:33333/candidates/candidate | candidateInsert | Example below | . Body request: . { \"data\": { \"PHONE\": \"555-444-8888\", \"BIRTHDAY\": 788224700000, \"SURNAME\": \"Wilson\", \"EMAIL\": \"wwiilsoon@example.org\", \"SPECIALTIES\": \"C#\", \"NAME\": \"William\", \"DNI\": \"88643946Z\" }, \"sqltypes\": { \"SPECIALTIES\": 12, \"LINKEDIN\": 12, \"PHONE\": 12, \"EXPERIENCE_LEVEL\": 4, \"STATUS\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"DNI\": 12, \"ID\": 4, \"ORIGIN\": 4, \"EDUCATION\": 4, \"COMMENT\": 12, \"PROFILE\": 4, \"SURNAME\": 12, \"NAME\": 12, \"BIRTHDAY\": 91 } } . ",
    "url": "/docs/v3/systems/mail/#checking-the-sending-of-mails",
    
    "relUrl": "/systems/mail/#checking-the-sending-of-mails"
  },"131": {
    "doc": "Mail System",
    "title": "Mail System",
    "content": "Table of Contents . | Mail System . | Introduction | Prerequisites | Configuring email service with Ontimize Boot . | DB configuration | Adding dependencies | Server Configuration | Creation of DAO files | Implementation in an existing service | . | Checking the sending of mails . | Use REST request | . | . | . ",
    "url": "/docs/v3/systems/mail/",
    
    "relUrl": "/systems/mail/"
  },"132": {
    "doc": "Preferences System",
    "title": "Preferences System",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/preferences/#preferences-system",
    
    "relUrl": "/systems/preferences/#preferences-system"
  },"133": {
    "doc": "Preferences System",
    "title": "Introduction",
    "content": "The Ontimize preferences allow you to save the settings that are stored in the localstorage (window size, tables preferences, graphics, or reports) into the database. ",
    "url": "/docs/v3/systems/preferences/#introduction",
    
    "relUrl": "/systems/preferences/#introduction"
  },"134": {
    "doc": "Preferences System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-preferences-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-preferences . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/preferences/#prerequisites",
    
    "relUrl": "/systems/preferences/#prerequisites"
  },"135": {
    "doc": "Preferences System",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v3/systems/preferences/#steps",
    
    "relUrl": "/systems/preferences/#steps"
  },"136": {
    "doc": "Preferences System",
    "title": "Database",
    "content": "Configurations Table . With the database started, we create the new table that will store the configuration preferences information. CREATE TABLE TCONFIGS ( ID_CONFIG INTEGER NOT NULL IDENTITY, USER_CONFIG VARCHAR(255), TYPE_CONFIG VARCHAR(255), COMPONENTS VARCHAR(16777216)); . ",
    "url": "/docs/v3/systems/preferences/#database",
    
    "relUrl": "/systems/preferences/#database"
  },"137": {
    "doc": "Preferences System",
    "title": "Server",
    "content": "Configuration Dao . A specific DAO will be created for the table in the Preferences system, and it will implement a interface. right_panel_open ConfigsDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"ConfigsDao\") @ConfigurationFile( configurationFile = \"dao/ConfigsDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ConfigsDao extends OntimizeJdbcDaoSupport { public static final String ID = \"ID_CONFIG\"; public static final String USER = \"USER_CONFIG\"; public static final String TYPE = \"TYPE_CONFIG\"; public static final String COMPONENTS = \"COMPONENTS\"; } . ConfigsDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"TCONFIGS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID_CONFIG&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID_CONFIG&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;/JdbcEntitySetup&gt; . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | ConfigsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | ConfigsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Add parameters to Application YML . As has already been explained previously (in this link) we add the following parameters to the application.yml to define the name of the DAO of the preferences system and to activate autoconfiguration. right_panel_open application.yml . ontimize: save-config: true save-config-dao: ConfigsDao . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | ConfigsDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | ConfigsDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/preferences/#server",
    
    "relUrl": "/systems/preferences/#server"
  },"138": {
    "doc": "Preferences System",
    "title": "Testing the preferences system",
    "content": "Once the preferences system is already configured and the server and the database are running, we will follow the next steps: . Add preferences to database . To add or modify preferences to the database, we will execute the following REST Request: http://localhost:33333/configuration/preferences . The type of the request is POST. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /configuration | Indicates the service | . | /preferences | Indicates the type of configuration that you&#8217;re going to save. You can write the name you want. | . The body of the request needs to have the following structure: . { \"user\":\"demo\", \"components\":{ \"lang\":\"es\", ... \"theme\":{\"primary\":\"#242424\",\"accent\":\"#ffcc00\",\"href\":\"ontimize-black-yellow.css\",\"href_dark\":\"ontimize-black-yellow-dark.css\",\"isDefault\":true,\"isDark\":false}, } } . By default the request will create a new entry in the database. If it already exists, it will be modified. Query preferences . To query preferences of the database, we will execute the following REST Request: http://localhost:33333/configuration/preferences?user=demo . The type of the request is GET. | Element | Meaning | . | localhost:33333 | Indicates the host. | . | /configuration | Indicates the service to be queried. | . | /preferences | Indicates the type of configuration that will be queried. | . | ?user=demo | Indicates the user. | . ",
    "url": "/docs/v3/systems/preferences/#testing-the-preferences-system",
    
    "relUrl": "/systems/preferences/#testing-the-preferences-system"
  },"139": {
    "doc": "Preferences System",
    "title": "Preferences System",
    "content": "Table of Contents . | Preferences System | Introduction | Prerequisites | Steps . | Database . | Configurations Table | . | Server . | Configuration Dao | Add parameters to Application YML | . | Testing the preferences system . | Add preferences to database | Query preferences | . | . | . ",
    "url": "/docs/v3/systems/preferences/",
    
    "relUrl": "/systems/preferences/"
  },"140": {
    "doc": "Report On Demand",
    "title": "Report On Demand",
    "content": "This module works only for Ontimize Boot version 3.9.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/reports/report-on-demand#report-on-demand",
    
    "relUrl": "/systems/reports/report-on-demand#report-on-demand"
  },"141": {
    "doc": "Report On Demand",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. Clone the repository with the initial state and follow the tutorial step by step. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. In the first step we will learn how to configure the reports system with the database engine. If you want to use the file system engine you can jump to this section. ",
    "url": "/docs/v3/systems/reports/report-on-demand#prerequisites",
    
    "relUrl": "/systems/reports/report-on-demand#prerequisites"
  },"142": {
    "doc": "Report On Demand",
    "title": "Steps",
    "content": "Database . Report Tables . With the database started, we create the new tables that will store the reports information. We&#8217;re going to need to create two different tables, one for the report itself and one for the report custom parameters. CREATE TABLE PREFERENCES(ID INTEGER NOT NULL PRIMARY KEY,NAME VARCHAR(255),DESCRIPTION VARCHAR(255),PREFERENCES VARCHAR(5000),ENTITY VARCHAR(100), TYPE BIT) . Server . Add Ontimize Report dependencies . right_panel_open projectwiki-boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-report&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... projectwiki-model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.report&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-report-server&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Add Preferences DAOs . A specific DAO will be created for each of both tables in the system, and each of them will implement a different interface. right_panel_open PreferencesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"PREFERENCES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . PreferencesDao.java . package com.imatia.qsallcomponents.model.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.IPreferencesDao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Lazy @Repository(value = \"PreferencesDao\") @ConfigurationFile(configurationFile = \"base-dao/PreferencesDao.xml\", configurationFilePlaceholder = \"base-dao/placeholders.properties\") public class PreferencesDao extends OntimizeJdbcDaoSupport implements IPreferencesDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_PREFERENCES = \"PREFERENCES\"; public static final String ATTR_TYPE = \"TYPE\"; } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | PreferencesDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | PreferencesDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the reports module, indicate the report engine type it will use and, if needed, the path where the report files will be stored. In this link you have information about the configuration of the reports system in the application.yml file. The enable property must be set to true and the engine type must be specified in the engine property before the server is started. You can only choose ONE of the two options listed below. right_panel_open application.yml . For database engine . ontimize: report: enable: true engine: database . For file system engine . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/reports/report-on-demand#steps",
    
    "relUrl": "/systems/reports/report-on-demand#steps"
  },"143": {
    "doc": "Report On Demand",
    "title": "Testing the reports system",
    "content": "Once the reports system is already configured and the server and the database are running, we will follow the next steps: . Generate report . | URL: http://localhost:33333/dynamicjasper/report | HTTP Method: POST | Authorization: User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /dynamicjasper | Indicates the service to be queried | . | /report | Indicates the method of the service that is going to be executed | . Body request: . { \"title\": \"Report on demand\", \"groups\": [], \"entity\": \"customer\", \"service\": \"Customer\", \"vertical\": true, \"functions\": [{\"columnName\":\"\", \"type\":\"TOTAL\"}, {\"columnName\":\"CUSTOMERTYPEID\", \"type\":\"SUM\"}], \"style\": { \"columnName\":true, \"grid\":false, \"rowNumber\":false}, \"subtitle\": \"Example\", \"columns\": [ {\"id\": \"NAME\", \"name\": \"Nombre\", \"columnStyle\": {\"width\": 50, \"alignment\": \"left\"}}, {\"id\": \"CUSTOMERTYPEID\", \"name\": \"ID\", \"columnStyle\": {\"width\": 80, \"alignment\": \"left\"}}, {\"id\": \"STARTDATE\", \"name\": \"Date\", \"columnStyle\": {\"width\": 60, \"alignment\": \"left\"}}], \"orderBy\": [] } . Save preferences . Allows to save the configuration of a report in the database to do it again quickly . | URL: http://localhost:33333/preferences/save | HTTP Method: POST | Authorization: Basic Auth with parameters User: demo, Password: demouser | Body: JSON | . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /save | Indicates the method of the service that is going to be executed | . Body request: . { \"name\":\"PreferencesExample\", \"description\":\"PreferencesDescription\", \"entity\": \"customer\", \"service\": \"Customer\", \"type\":\"REPORT\", \"params\": { \"title\": \"Report on demand\", \"groups\": [], \"entity\": \"customer\", \"service\": \"Customer\", \"vertical\": true, \"functions\": [{\"columnName\":\"\", \"type\":\"TOTAL\"}, {\"columnName\":\"CUSTOMERTYPEID\", \"type\":\"SUM\"}], \"style\": { \"columnName\":true, \"grid\":false, \"rowNumber\":false}, \"subtitle\": \"Example\", \"columns\": [ {\"id\": \"NAME\", \"name\": \"Nombre\", \"columnStyle\": {\"width\": 50, \"alignment\": \"left\"}}, {\"id\": \"CUSTOMERTYPEID\", \"name\": \"ID\", \"columnStyle\": {\"width\": 80, \"alignment\": \"left\"}}, {\"id\": \"STARTDATE\", \"name\": \"Date\", \"columnStyle\": {\"width\": 60, \"alignment\": \"left\"}}], \"orderBy\": [] } } . Get preferences . Execute the following request: http://localhost:33333/preferences/preferences?entity=ENTITY&amp;service=SERVICE&amp;type=REPORT. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /preferences | Indicates the service to be queried | . | /preferences | Indicates the method of the service that is going to be executed | . | ?entity=ENTITY | ENTITY indicates the entity to filter the preferences | . | &amp;service=SERVICE | SERVICE indicates the service to filter the preferences | . | &amp;type=REPORT | Indicates the type to filter the preferences | . The authorization used for these requests is authorization of the type BASIC. In all three cases cases, the access must be done with a user and password example: . User: demo Password: demouser . Visualize report document . When you run the above request, in the body of the response you will find the key file, whose value is a Base 64 that contains the format and data of the report template. Copy it and go to this page to convert the Base 64 into a PDF file. ",
    "url": "/docs/v3/systems/reports/report-on-demand#testing-the-reports-system",
    
    "relUrl": "/systems/reports/report-on-demand#testing-the-reports-system"
  },"144": {
    "doc": "Report On Demand",
    "title": "Report On Demand",
    "content": "Table of Contents . | Report On Demand . | Prerequisites | Steps . | Database . | Report Tables | . | Server . | Add Ontimize Report dependencies | Add Preferences DAOs | Modify application.yml | . | . | Testing the reports system . | Generate report | Save preferences | Get preferences | Visualize report document | . | . | . ",
    "url": "/docs/v3/systems/reports/report-on-demand",
    
    "relUrl": "/systems/reports/report-on-demand"
  },"145": {
    "doc": "Report Store",
    "title": "Report Store",
    "content": "This module works only for Ontimize Boot version 3.7.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/reports/report-store#report-store",
    
    "relUrl": "/systems/reports/report-store#report-store"
  },"146": {
    "doc": "Report Store",
    "title": "Introduction",
    "content": "The Report Store system will allow you to store, manage and export all kinds of reports designed and implemented via the JasperReports API. This module will let you use your Ontimize application data as data sources for your reports, allowing you to fully customize its layout with tables, charts, graphs&#8230; and also visualize, export, print and download your reports. ",
    "url": "/docs/v3/systems/reports/report-store#introduction",
    
    "relUrl": "/systems/reports/report-store#introduction"
  },"147": {
    "doc": "Report Store",
    "title": "Previous concepts",
    "content": ". | Report: It is the generic representation of a report. One report can have one or multiple custom report parameters, or have none. | Main report file: The file containing all the information regarding the report layout, along with the data sources, connections and other configuration directives. Written in .jrxml format. | Report parameter: It is the generic representation of a custom report parameter. They are used for defining filters, implementing pagination, or even specifying the report data source. | . ",
    "url": "/docs/v3/systems/reports/report-store#previous-concepts",
    
    "relUrl": "/systems/reports/report-store#previous-concepts"
  },"148": {
    "doc": "Report Store",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-report . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. In the first step we will learn how to configure the reports system with the database engine. If you want to use the file system engine you can jump to this section. ",
    "url": "/docs/v3/systems/reports/report-store#prerequisites",
    
    "relUrl": "/systems/reports/report-store#prerequisites"
  },"149": {
    "doc": "Report Store",
    "title": "Steps",
    "content": " ",
    "url": "/docs/v3/systems/reports/report-store#steps",
    
    "relUrl": "/systems/reports/report-store#steps"
  },"150": {
    "doc": "Report Store",
    "title": "Database",
    "content": "Report Tables . With the database started, we create the new tables that will store the reports information. We&#8217;re going to need to create two different tables, one for the report itself and one for the report custom parameters. CREATE TABLE REPORTS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, UUID VARCHAR(255) NOT NULL, NAME VARCHAR(255), DESCRIPTION VARCHAR(255), REPORT_TYPE VARCHAR(255), MAIN_REPORT_FILENAME VARCHAR(255) NOT NULL, ZIP VARBINARY(16777216), COMPILED VARBINARY(16777216)); CREATE TABLE REPORT_PARAMETERS(ID INTEGER IDENTITY NOT NULL PRIMARY KEY, REPORT_ID INTEGER NOT NULL, NAME VARCHAR(255), DESCRIPTION VARCHAR(255), NESTED_TYPE VARCHAR(255), VALUE_CLASS VARCHAR(255)); . Once the tables have been created, we add the foreign key . ALTER TABLE REPORT_PARAMETERS ADD CONSTRAINT REPORT_PARAMETERS_FK FOREIGN KEY(REPORT_ID) REFERENCES REPORTS(ID); . ",
    "url": "/docs/v3/systems/reports/report-store#database",
    
    "relUrl": "/systems/reports/report-store#database"
  },"151": {
    "doc": "Report Store",
    "title": "Server",
    "content": "Add Ontimize Report dependencies . right_panel_open projectwiki-boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-report&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... projectwiki-model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.report&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-report-server&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Add Report DAOs . A specific DAO will be created for each of both tables in the reports system, and each of them will implement a different interface. right_panel_open ReportDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"REPORTS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ReportParameterDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" table=\"REPORT_PARAMETERS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ReportDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.reportstore.dao.IReportDao; @Lazy @Repository(value = \"ReportDao\") @ConfigurationFile(configurationFile = \"dao/ReportDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ReportDao extends OntimizeJdbcDaoSupport implements IReportDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_REPORT_TYPE = \"REPORT_TYPE\"; public static final String ATTR_MAIN_REPORT_FILENAME = \"MAIN_REPORT_FILENAME\"; public static final String ATTR_ZIP = \"ZIP\"; public static final String ATTR_COMPILED = \"COMPILED\"; public ReportDao() { super(); } } . ReportParameterDao.java . package com.ontimize.projectwiki.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import com.ontimize.jee.server.services.reportstore.dao.IReportParameterDao; @Lazy @Repository(value = \"ReportParameterDao\") @ConfigurationFile(configurationFile = \"dao/ReportParameterDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ReportParameterDao extends OntimizeJdbcDaoSupport implements IReportParameterDao { public static final String ATTR_ID = \"ID\"; public static final String ATTR_REPORT_ID = \"REPORT_ID\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_NESTED_TYPE = \"NESTED_TYPE\"; public static final String ATTR_VALUE_CLASS = \"VALUE_CLASS\"; public ReportParameterDao() { super(); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified to enable the reports module, indicate the report engine type it will use and, if needed, the path where the report files will be stored. In this link you have information about the configuration of the reports system in the application.yml file. The enable property must be set to true and the engine type must be specified in the engine property before the server is started. You can only choose ONE of the two options listed below. right_panel_open application.yml . For database engine . ontimize: report: enable: true engine: database . For file system engine . ontimize: report: enable: true engine: file base-path: C:/applications/projectwiki/reports . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.tmp | templateDB.lck | templateDB.log | templateDB.properties | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | ReportDao.java | ReportParameterDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | ReportDao.xml | ReportParameterDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | candidates.zip | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/reports/report-store#server",
    
    "relUrl": "/systems/reports/report-store#server"
  },"152": {
    "doc": "Report Store",
    "title": "Testing the reports system",
    "content": "Once the reports system is already configured and the server and the database are running, we will follow the next steps: . ",
    "url": "/docs/v3/systems/reports/report-store#testing-the-reports-system",
    
    "relUrl": "/systems/reports/report-store#testing-the-reports-system"
  },"153": {
    "doc": "Report Store",
    "title": "Create report template",
    "content": "In order to create our own report templates, it is recommended to use Jaspersoft Studio. You can download it from this link. In this tutorial we will provide you a report template for candidates, but if you want more information about how to create and customize a template, check this tutorial. Our template is located in the main folder of the project, it is called candidates.zip. Do not unzip the compressed file because the request explained below requires it compressed. ",
    "url": "/docs/v3/systems/reports/report-store#create-report-template",
    
    "relUrl": "/systems/reports/report-store#create-report-template"
  },"154": {
    "doc": "Report Store",
    "title": "Add report to the reports system",
    "content": "To add the template we will have to execute the following POST REST request: http://localhost:33333/reportstore/addReport . | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /addReport | Indicates the method of the service that is going to be executed | . With the Postman program, you will have to add a body of type form-data in which you will have to add the following values: . | key | type | value | Description | . | data | text | {&#8220;name&#8221;:&#8221;x&#8221;,&#8221;type&#8221;:&#8221;x&#8221;,&#8221;description&#8221;:&#8221;x&#8221;} | Indicates the name, type and description of the template | . | file | file | candidates.zip | You have to indicate the path of the candidates.zip file | . ",
    "url": "/docs/v3/systems/reports/report-store#add-report-to-the-reports-system",
    
    "relUrl": "/systems/reports/report-store#add-report-to-the-reports-system"
  },"155": {
    "doc": "Report Store",
    "title": "Generate report",
    "content": "When you run the above request, if the value of the engine set in the application.yml is filesystem, you have to copy the uuid that comes in the response data and execute the following request: http://localhost:33333/reportstore/fillReport/{{UUID}}. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /fillReport | Indicates the method of the service that is going to be executed | . | {{UUID}} | Indicates the uuid that you receives of the previous request | . But if the value of the engine set in the application.yml is database, you have to execute the following GET REST request to know the uuid of the report template: http://localhost:33333/reportstore/listReports. | Element | Meaning | . | localhost:33333 | Indicates the host | . | /reportstore | Indicates the service to be queried | . | /listReports | Indicates the method of the service that is going to be executed | . Example POST Request . URL: http://localhost:33333/reportstore/fillReport/fd656189-2158-4e84-ac5c-8379960fddbd Body: { &nbsp;&nbsp;&#8220;params&#8221;: &#8220;&#8221;, &nbsp;&nbsp;&#8220;filter&#8221;: {} } . The authorization used for these requests is authorization of the type BASIC. In both cases, the access must be done with a user and password example: . User: demo Password: demouser . ",
    "url": "/docs/v3/systems/reports/report-store#generate-report",
    
    "relUrl": "/systems/reports/report-store#generate-report"
  },"156": {
    "doc": "Report Store",
    "title": "Visualize report document",
    "content": "When you run the above request, in the body of the response you will find the key file, whose value is a Base 64 that contains the format and data of the report template. Copy it and go to this page to convert the Base 64 into a PDF file. ",
    "url": "/docs/v3/systems/reports/report-store#visualize-report-document",
    
    "relUrl": "/systems/reports/report-store#visualize-report-document"
  },"157": {
    "doc": "Report Store",
    "title": "Report Store",
    "content": "Table of Contents . | Report Store | Introduction | Previous concepts | Prerequisites | Steps . | Database . | Report Tables | . | Server . | Add Ontimize Report dependencies | Add Report DAOs | Modify application.yml | . | . | Testing the reports system . | Create report template | Add report to the reports system | Generate report | Visualize report document | . | . ",
    "url": "/docs/v3/systems/reports/report-store",
    
    "relUrl": "/systems/reports/report-store"
  },"158": {
    "doc": "Reports",
    "title": "Reports",
    "content": " ",
    "url": "/docs/v3/systems/reports/#reports",
    
    "relUrl": "/systems/reports/#reports"
  },"159": {
    "doc": "Reports",
    "title": "Introduction",
    "content": "The module Ontimize Jee Report is a set of reporting tools based in OntimizeBoot. Reports implements reporting with: . Report store . The Report Store system will allow you to store, manage and export all kinds of reports designed and implemented via the JasperReports API. This module will let you use your Ontimize application data as data sources for your reports, allowing you to fully customize its layout with tables, charts, graphs… and also visualize, export, print and download your reports. You can find more information at this link . Report on-demand . Allow the final users of the applications developed with Ontimize to define, view and store reports from any table available in the application. This visual tool will allow users to define parameters of the report such as title, subtitle, columns to display, differents styles options, sorting, grouping and data aggregate functions of the report. With these parameters and the data of the table, this component will dynamically generate the report and present it to the user. In addition, all these settings are stored automatically in database by Ontimize services. You can find more information at this link . ",
    "url": "/docs/v3/systems/reports/#introduction",
    
    "relUrl": "/systems/reports/#introduction"
  },"160": {
    "doc": "Reports",
    "title": "Reports",
    "content": " ",
    "url": "/docs/v3/systems/reports/",
    
    "relUrl": "/systems/reports/"
  },"161": {
    "doc": "SDMS System",
    "title": "SDMS System",
    "content": "This module works only for Ontimize Boot version 3.11.0 or above. Actual release version: . ",
    "url": "/docs/v3/systems/sdms/#sdms-system",
    
    "relUrl": "/systems/sdms/#sdms-system"
  },"162": {
    "doc": "SDMS System",
    "title": "Introduction",
    "content": "The Storage Document Management System (SDMS) is a system that allows you to manage documents related to an entity in your project. Ontimize Boot provides a DMS that allows to store files in external services according to the engine set in its configuration. ",
    "url": "/docs/v3/systems/sdms/#introduction",
    
    "relUrl": "/systems/sdms/#introduction"
  },"163": {
    "doc": "SDMS System",
    "title": "Previous concepts",
    "content": ". | Workspace: Represents the base folder where the documents for an entity will be stored. | . ",
    "url": "/docs/v3/systems/sdms/#previous-concepts",
    
    "relUrl": "/systems/sdms/#previous-concepts"
  },"164": {
    "doc": "SDMS System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-sdms-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-sdms . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/sdms/#prerequisites",
    
    "relUrl": "/systems/sdms/#prerequisites"
  },"165": {
    "doc": "SDMS System",
    "title": "Steps",
    "content": "Server . Add SDMS dependencies . right_panel_open /pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-common&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... ws/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-rest&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... model/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.ontimize.jee.sdms&lt;/groupId&gt; &lt;artifactId&gt;ontimize-jee-sdms-event&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... boot/pom.xml ... &lt;dependencies&gt; ... &lt;dependency&gt; &lt;groupId&gt;com.ontimize.boot&lt;/groupId&gt; &lt;artifactId&gt;ontimize-boot-starter-sdms&lt;/artifactId&gt; &lt;/dependency&gt; ... &lt;/dependencies&gt; ... | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify application.yml . The application.yml file will be modified the engine to be used by the SDMS, for this example we will set up the S3 engine. Information on the configuration of the SDMS system in the application.yml file can be found at this link. Currently only the S3 engine using the Amazon AWS S3 service API is available. right_panel_open application.yml . ontimize: sdms: engine: s3 s3: access-key: ${S3_ACCESS_KEY} secret-key: ${S3_SECRET_KEY} bucket: ${S3_BUCKET} region: ${S3_REGION} . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | DMSNameConverter.java | FileManagerRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify the entity service to add the methods of the SDMS service . All methods available by the SDMS service will be added to the service interface of our entity. Our method names are constructed with the name of the entity followed by the SDMS method name. The SDMS methods available are: . | SdmsFindById: It allows us to retrieve the information of an SDMS element by its ID (Base64 encrypted id). | SdmsFind: It allows us to retrieve the information of several elements of the SDMS from a filter. | SdmsDownloadById: It allows us to download an SDMS document by its ID (Base64 encrypted id) | SdmsDownload: It allows us to download several SDMS documents from a filter. | SdmsUpload: It allows us to upload a document to the SDMS. | SdmsCreate: It allows us to create an SDMS element in the system. | SdmsUpdate: It allows us to update an SDMS element in the system. | SdmsCopy: It allows us to copy an SDMS element in the system to another space in the SDMS. | SdmsMove: It allows us to move an SDMS element in the system to another space in the SDMS. | SdmsDeleteById: It allows us to delete an SDMS element in the system by its ID (Base64 encrypted id). | SdmsDelete: It allows us to delete several SDMS elements in the system from a filter. | . right_panel_open ICandidateService.java ... import com.ontimize.jee.sdms.common.dto.OSdmsRestDataDto; import org.springframework.web.multipart.MultipartFile; import java.io.Serializable; ... public interface ICandidateService { ... EntityResult candidateSdmsFindById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsFind( OSdmsRestDataDto data ); EntityResult candidateSdmsDownloadById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsDownload( OSdmsRestDataDto data ); EntityResult candidateSdmsUpload(OSdmsRestDataDto data, MultipartFile file ); EntityResult candidateSdmsCreate( OSdmsRestDataDto data ); EntityResult candidateSdmsUpdate( OSdmsRestDataDto data ); EntityResult candidateSdmsCopy( OSdmsRestDataDto data ); EntityResult candidateSdmsMove( OSdmsRestDataDto data ); EntityResult candidateSdmsDeleteById( Serializable id, OSdmsRestDataDto data ); EntityResult candidateSdmsDelete( OSdmsRestDataDto data ); ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Now in the implementation of the service we implement the methods with the help of the IOSdmsService component of the SDMS system and by calling the corresponding method. We will also establish the workspace where the entity will store and manage the files. We will do this via the OSdmsWorkspace annotation which admits 2 parameters: . | name: Sets the name of the workspace. If this parameter is not set, the value will be default. | value: Sets the path to the workspace, and can be set to variable between braces. | . The annotation can be set at class level by enabling the workspace for all SDMS methods, and/or at method level by setting its scope to the annotated method. It can also be set as many workspaces as required. right_panel_open CandidateService.java ... import com.ontimize.jee.sdms.common.dto.OSdmsRestDataDto; import com.ontimize.jee.sdms.common.workspace.annotation.OSdmsWorkspace; import com.ontimize.jee.sdms.server.service.IOSdmsService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.multipart.MultipartFile; ... @OSdmsWorkspace( \"candidate/doc/{id}\" ) @OSdmsWorkspace( name = \"all\", value = \"candidate/doc\" ) ... public class CandidateService implements ICandidateService { ... @Autowired private IOSdmsService oSdmsService; ... @Override public EntityResult candidateSdmsFind( final OSdmsRestDataDto data ) { return this.oSdmsService.find( data ); } @OSdmsWorkspace( name = \"images\", value = \"candidate/img/{id}\" ) @Override public EntityResult candidateSdmsDownloadById( final Serializable id, final OSdmsRestDataDto data ) { return this.oSdmsService.downloadById( id, data ); } @Override public EntityResult candidateSdmsDownload( final OSdmsRestDataDto data ) { return this.oSdmsService.download( data ); } @Override public EntityResult candidateSdmsUpload(final OSdmsRestDataDto data, final MultipartFile file ) { return this.oSdmsService.upload( data, file ); } @Override public EntityResult candidateSdmsCreate( final OSdmsRestDataDto data ) { return this.oSdmsService.create( data ); } @Override public EntityResult candidateSdmsUpdate( final OSdmsRestDataDto data ) { return this.oSdmsService.update( data ); } @Override public EntityResult candidateSdmsCopy( final OSdmsRestDataDto data ) { return this.oSdmsService.copy( data ); } @Override public EntityResult candidateSdmsMove( final OSdmsRestDataDto data ) { return this.oSdmsService.move( data ); } @Override public EntityResult candidateSdmsDeleteById( final Serializable id, final OSdmsRestDataDto data ) { return this.oSdmsService.deleteById( id, data ); } @Override public EntityResult candidateSdmsDelete( final OSdmsRestDataDto data ) { return this.oSdmsService.delete( data ); } ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . Modify the entity Rest controller . We modify the Rest controller of our entity so that instead of inheriting from the ORestController class, it inherits from the OSdmsRestController class. This class adds all the endpoints of the ORestController class and the SDMS endpoints, linking them with the corresponding SDMS methods that we have established in the service of our entity. right_panel_open ICandidateService.java ... import com.imatia.platform.hr.api.core.service.ICandidateService; import com.ontimize.jee.sdms.rest.controller.OSdmsRestController; ... public class CandidateRestController extends OSdmsRestController&lt;ICandidateService&gt; { ... } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | DMSCategoryDao.java | DMSDocumentDao.java | DMSDocumentFileDao.java | DMSDocumentFileVersionDao.java | DMSDocumentPropertyDao.java | DMSRelatedDocumentDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | DMSCategoryDao.xml | DMSDocumentDao.xml | DMSDocumentFileDao.xml | DMSDocumentFileVersionDao.xml | DMSDocumentPropertyDao.xml | DMSRelatedDocumentDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | pom.xml | README.md | . | . ",
    "url": "/docs/v3/systems/sdms/#steps",
    
    "relUrl": "/systems/sdms/#steps"
  },"166": {
    "doc": "SDMS System",
    "title": "Endpoints",
    "content": "The endpoints set by the OSdmsRestController are the following: . If the workspace is not sent in an http request, the SDMS will set the default workspace as the active workspace. But if the default workspace has variables, you will need to pass it the workspace with the variable values to access the workspace. Find by ID . This endpoint maps the request to the SdmsFindById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. GET: /candidates/candidate/sdms/find/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Find . This endpoint maps the request to the SdmsFind method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. POST: /candidates/candidate/sdms/find/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Download by ID . This endpoint maps the request to the SdmsDownloadById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. GET: /candidates/candidate/sdms/download/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Download . This endpoint maps the request to the SdmsDownload method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. POST: /candidates/candidate/sdms/download/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Upload . This endpoint maps the request to the SdmsUpload method of the SDMS service. The data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. POST: /candidates/candidate/sdms/upload Content-Type: multipart/form-data Content-Disposition: form-data; name=\"file\"; filename=\"/C:/cv.pdf\" Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ\"}} . Create . This endpoint maps the request to the SdmsCreate method of the SDMS service. POST: /candidates/candidate/sdms/create Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Update . This endpoint maps the request to the SdmsUpdate method of the SDMS service. PUT: /candidates/candidate/sdms/update Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Copy . This endpoint maps the request to the SdmsCopy method of the SDMS service. PUT: /candidates/candidate/sdms/copy Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Move . This endpoint maps the request to the SdmsMove method of the SDMS service. PUT: /candidates/candidate/sdms/move Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\"}, \"data\": {\"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"}} . Delete by ID . This endpoint maps the request to the SdmsDeleteById method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. The data value must be encoded with percent-encoding to be read correctly. DELETE: /candidates/candidate/sdms/delete/id/Y2FuZGlkYXRlLzEvZmlsZS0wOC50eHQ= Content-Type: multipart/form-data Content-Disposition: form-data; name=\"data\"; {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}}} . Delete . This endpoint maps the request to the SdmsDelete method of the SDMS service. The id of the requested document is passed in Base64 encrypted in the url and the data parameter is added with the workspace information in JSON format. DELETE: /candidates/candidate/sdms/delete/id Content-Type: application/json Body: {\"filter\": { \"workspace\": \"default\", \"data\": {\"id\": 1}, \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"]}} . Request Parameters . The data parameter of the SDMS system always goes to the &#8220;filter&#8221; and &#8220;data&#8221; sections. The &#8220;filter&#8221; section contains the parameters related to the selection of elements of the SDMS. Here you will always find the information related to the workspace you want to use. In the &#8220;data&#8221; section are the parameters related to the information to be sent to the SDMS. The rest of the parameters that can be sent in each of the sections will depend on the engine used. Possible parameters in the S3 engine . | Filter . | workspace: The name of the workspace to use. example: \"workspace\": \"default\" . | data: The variables values of the workspace. example: \"data\": \"{\"id\": \"ID-1\"}\" | \"data\": \"{\"id\": 1}\" | \"data\": \"{\"id\": [1, 2, 3]}\" . | id: The S3 key of the document encoded in Base64 (several can be in an array). example: \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\" | \"id\": [\"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\", \"Y2FuZGlkYXRlLzEvZmlsZS0wMi50eHQ=\"] . | key: The S3 key of the document (several can be in an array). example: \"key\": \"candidate/1/file-01.txt\" | \"key\": [\"candidate/1/file-01.txt\", \"candidate/1/file-02.txt\"] . | prefix: The S3 prefix of the document (several can be in an array). example: \"prefix\": \"candidate/1/folder-1\" | \"prefix\": [\"candidate/1/folder-1\", \"candidate/1/folder-2\"] . | fileName: The S3 name of the document (several can be in an array). example: \"fileName\": \"file-01.txt\" | \"fileName\": [\"file-01.txt\", \"file-02.txt\"] . | maxKeys: The maximum number of S3 documents to return. example: \"maxKeys\": 10 . | delimiter: The delimiter to use in the S3 documents search. example: \"delimiter\": \"/\" . | marker: The marker to use in the S3 documents search. example: \"marker\": \"candidate/1/file-01.txt\" . | . | Data . | id: The S3 key of the document encoded in Base64. example: \"id\": \"Y2FuZGlkYXRlLzEvZmlsZS0wMS50eHQ=\" . | key: The S3 key of the document. example: \"key\": \"candidate/1/file-01.txt\" . | prefix: The S3 prefix of the document. example: \"prefix\": \"/folder-1\" . | fileName: The S3 name of the document. example: \"fileName\": \"file-01.txt\" . | currentPrefix: The current S3 prefix of the document. example: \"currentPrefix\": \"candidate/1/folder-1\" . | . | . ",
    "url": "/docs/v3/systems/sdms/#endpoints",
    
    "relUrl": "/systems/sdms/#endpoints"
  },"167": {
    "doc": "SDMS System",
    "title": "SDMS System",
    "content": "Table of Contents . | SDMS System . | Introduction | Previous concepts | Prerequisites | Steps . | Server . | Add SDMS dependencies | Modify application.yml | Modify the entity service to add the methods of the SDMS service | Modify the entity Rest controller | . | . | Endpoints . | Request Parameters . | Possible parameters in the S3 engine | . | . | . | . ",
    "url": "/docs/v3/systems/sdms/",
    
    "relUrl": "/systems/sdms/"
  },"168": {
    "doc": "Security System",
    "title": "Security System",
    "content": " ",
    "url": "/docs/v3/systems/security/#security-system",
    
    "relUrl": "/systems/security/#security-system"
  },"169": {
    "doc": "Security System",
    "title": "Introduction",
    "content": "Ontimize security allows you to set permissions to each role that you assign to a specific user, so that different users can access (or not) the project services and methods. ",
    "url": "/docs/v3/systems/security/#introduction",
    
    "relUrl": "/systems/security/#introduction"
  },"170": {
    "doc": "Security System",
    "title": "Prerequisites",
    "content": "You can follow this tutorial using your own application, although for this example we will use an application created using the archetype that can be found on this page and with a REST service. There are 2 options to follow this tutorial, clone the repository with the initial state and follow the tutorial step by step, or download the final example and see which files are new and which have been updated. Initial project . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security-initial . Final example . /$ git clone https://github.com/ontimize/ontimize-examples /ontimize-examples$ cd ontimize-examples /ontimize-examples$ git checkout boot-security . To simplify the code being written, three dots (&#8230;) may appear in some parts of the code. This indicates that there may be previous code before and after those dots. ",
    "url": "/docs/v3/systems/security/#prerequisites",
    
    "relUrl": "/systems/security/#prerequisites"
  },"171": {
    "doc": "Security System",
    "title": "Steps",
    "content": "Add new profile and user . We will add the following elements to the database: . | New user | . INSERT INTO TUSER VALUES('candidate','candidate','candidate','candidate',NULL,'99999999R',NULL,'2020-07-03 11:50:40.665000',NULL) . | New user role | . INSERT INTO TROLE VALUES(1,'candidate','&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;security&gt;&lt;/security&gt;') . | Relationship between the new user and the new role | . INSERT INTO TUSER_ROLE VALUES(1,1,'candidate') . Modify the service to add security . In the projectwiki-boot module we will add the annotation @EnableAspectJAutoProxy(proxyTargetClass = false) to the ServerApplication.java class and to each service method the @Secured({ PermissionsProviderSecured.SECURED }) annotation. right_panel_open ServerApplication.java . package com.ontimize.projectwiki; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.EnableAspectJAutoProxy; @SpringBootApplication @EnableAspectJAutoProxy(proxyTargetClass = false) public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } . CustomerService.java . package com.ontimize.projectwiki.model.core.service; . import org.springframework.security.access.annotation.Secured; . import com.ontimize.jee.common.security.PermissionsProviderSecured; . public class CandidateService implements ICandidateService { . @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.candidateDao, keyMap, attrList); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.candidateDao, attrMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) @Transactional(rollbackFor = Exception.class) public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.candidateDao, attrMap, keyMap); } @Override @Secured({ PermissionsProviderSecured.SECURED }) public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.candidateDao, keyMap); } } . | ontimize-examples . | projectwiki-api . | src . | main . | java . | com . | ontimize . | projectwiki . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | projectwiki-boot . | src . | main . | java . | com . | ontimize . | projectwiki . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | projectwiki-model . | src . | main . | db . | templateDB.properties | templateDB.txt | . | java . | com . | ontimize . | projectwiki . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | projectwiki-ws . | src . | main . | java . | com . | ontimize . | projectwiki . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | pom.xml | README.md | . | . Add permissions for methods . Once the methods have been noted, it is necessary to add the service and the method that we have noted to the table of the DB that stores those elements and to the table that indicates the methods for which the role has permission. INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateQuery') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateInsert') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateUpdate') INSERT INTO TSERVER_PERMISSION VALUES('com.ontimize.projectwiki.model.core.service.ICandidateService/candidateDelete') INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,1) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,2) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,3) INSERT INTO TROLE_SERVER_PERMISSION VALUES(0,4) . If we try to make requests through Postman to the service of CandidateService, changing the authentication by the user candidate and password candidate, it will give an error, since the user candidate does not belong to the role admin which is the only role that has permissions to make these queries. ",
    "url": "/docs/v3/systems/security/#steps",
    
    "relUrl": "/systems/security/#steps"
  },"172": {
    "doc": "Security System",
    "title": "Security System",
    "content": "Table of Contents . | Security System . | Introduction | Prerequisites | Steps . | Add new profile and user | Modify the service to add security | Add permissions for methods | . | . | . ",
    "url": "/docs/v3/systems/security/",
    
    "relUrl": "/systems/security/"
  },"173": {
    "doc": "Tutorial",
    "title": "Ontimize Boot Tutorial",
    "content": "This section contains a tutorial that will guide us through the creation of a backend for a simple Human Resources application, in which we will see concepts such as the structure of an Ontimize Boot application, DAO’s, services, controllers, requests, Entity Results, transactions, Basic Expression, complex queries and permissions. These tutorials are in Spanish. ",
    "url": "/docs/v3/tutorial/#ontimize-boot-tutorial",
    
    "relUrl": "/tutorial/#ontimize-boot-tutorial"
  },"174": {
    "doc": "Tutorial",
    "title": "Tutorial",
    "content": " ",
    "url": "/docs/v3/tutorial/",
    
    "relUrl": "/tutorial/"
  },"175": {
    "doc": "Preparing base project",
    "title": "Preparando el proyecto base",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise1#preparando-el-proyecto-base",
    
    "relUrl": "/tutorial/exercise1#preparando-el-proyecto-base"
  },"176": {
    "doc": "Preparing base project",
    "title": "Prerrequisitos",
    "content": "Para poder desarrollar este tutorial, debemos tener instalados en nuestro ordenador los elementos que se detallan en la página de prerrequisitos . ",
    "url": "/docs/v3/tutorial/exercise1#prerrequisitos",
    
    "relUrl": "/tutorial/exercise1#prerrequisitos"
  },"177": {
    "doc": "Preparing base project",
    "title": "¿Qué es Ontimize Boot?",
    "content": "Ontimize Boot es un framework que permite simplificar la configuración de un proyecto hecho con Ontimize EE, de una forma rápida y eficiente, reduciendo la necesidad de utilizar un Tomcat externo y centralizando toda la configuración de la aplicación en un solo fichero *.yml. ",
    "url": "/docs/v3/tutorial/exercise1#qu%C3%A9-es-ontimize-boot",
    
    "relUrl": "/tutorial/exercise1#qué-es-ontimize-boot"
  },"178": {
    "doc": "Preparing base project",
    "title": "Crea una aplicación a partir del arquetipo",
    "content": ". | Para crear una aplicación a través el arquetipo, abrimos una terminal en nuestro equipo, en la ruta donde queramos ubicar el proyecto y ejecutamos el siguiente comando de Maven: . mvn archetype:generate -DgroupId=com.ontimize -DartifactId=hr -Dversion=1.0.0-SNAPSHOT -Dpackage=com.ontimize.hr -DarchetypeGroupId=com.ontimize -DarchetypeArtifactId=ontimize-boot-backend-archetype -DarchetypeVersion=1.0.11 -DinteractiveMode=false . | . Comprueba que la version del parámetro -DarchetypeVersion es la última versión disponible, en este caso, la versión: . ",
    "url": "/docs/v3/tutorial/exercise1#crea-una-aplicaci%C3%B3n-a-partir-del-arquetipo",
    
    "relUrl": "/tutorial/exercise1#crea-una-aplicación-a-partir-del-arquetipo"
  },"179": {
    "doc": "Preparing base project",
    "title": "Importar como un proyecto Maven",
    "content": "Abrimos nuestro IDE (en este caso, utilizaremos IntelliJ) y le damos a la opción de abrir un nuevo proyecto, seleccionamos la carpeta en la misma ruta donde hemos ejecutado el comando de Maven, luego la carpeta hr (la carpeta del proyecto es la misma que el valor del atributo -DartifactId del comando Maven) . Una vez que la importación haya sido completada, el proyecto está listo para empezar a desarrollar la aplicación. Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise1#importar-como-un-proyecto-maven",
    
    "relUrl": "/tutorial/exercise1#importar-como-un-proyecto-maven"
  },"180": {
    "doc": "Preparing base project",
    "title": "Preparing base project",
    "content": "Table of Contents . | Preparando el proyecto base . | Prerrequisitos | ¿Qué es Ontimize Boot? | Crea una aplicación a partir del arquetipo | Importar como un proyecto Maven | . | . ",
    "url": "/docs/v3/tutorial/exercise1",
    
    "relUrl": "/tutorial/exercise1"
  },"181": {
    "doc": "Use of complex queries",
    "title": "Uso de consultas complejas",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise10#uso-de-consultas-complejas",
    
    "relUrl": "/tutorial/exercise10#uso-de-consultas-complejas"
  },"182": {
    "doc": "Use of complex queries",
    "title": "Introducción",
    "content": "En este ejercicio se modificarán los ficheros *.xml de los DAO para hacer consultas más complejas contra otras tablas de la base de datos. ",
    "url": "/docs/v3/tutorial/exercise10#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise10#introducción"
  },"183": {
    "doc": "Use of complex queries",
    "title": "Modificar el DAO para añadir una consulta compleja",
    "content": "Actualizaremos el DAO de OfferCandidatesDao para agregarle nueva información en el *.xml. En este caso, tratará de añadir una nueva consulta que refleje las otras tablas que se usan desde este DAO para relacionar las ofertas, los candidatos y el estado. Como esta tabla solo contiene identificadores, nuestra nueva consulta permitirá conocer todos los datos y no únicamente sus identificadores. En el fichero *.xml, agregaremos una nueva etiqueta Queries en el que añadiremos las nuevas consultas mediante la etiqueta Query. En dicha consulta, podremos indicarle la consulta a ejecutar a través de la etiqueta Sentence. Como queremos utilizar las columnas y condiciones que nos indiquen a través de la petición, usaremos los marcadores #COLUMNS# y #WHERE#. La utilización de la etiqueta AmbiguousColumn indicará cuáles son las columnas ambiguas (en este caso, la columna DESCRIPTION de OFFER_CANDIDATE_STATUS y OFFER, usando el nombre de DESC_STATUS para OFFER_CANDIDATE_STATUS). En caso de que queramos modificar la consulta que se realiza por defecto, el identificador de la etiqueta sería defaultQuery id=\"default\". Como queremos mantener la consulta por defecto, pondremos otro identificador. right_panel_open OfferCandidatesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;Queries&gt; &lt;Query id=\"details\"&gt; &lt;AmbiguousColumns&gt; &lt;AmbiguousColumn name=\"DESC_STATUS\" prefix=\"OS\" databaseName=\"DESCRIPTION\"/&gt; &lt;AmbiguousColumn name=\"OFF_STATUS\" prefix=\"OCS\" databaseName=\"DESCRIPTION\"/&gt; &lt;/AmbiguousColumns&gt; &lt;Sentence&gt; &lt;![CDATA[ SELECT #COLUMNS# FROM PUBLIC.OFFER_CANDIDATES OC INNER JOIN PUBLIC.OFFER O ON OC.OFFER_ID = O.ID INNER JOIN PUBLIC.CANDIDATE C ON OC.CANDIDATE_ID = C.ID INNER JOIN PUBLIC.OFFER_STATUS OS ON O.OFFER_STATUS = OS.ID INNER JOIN PUBLIC.OFFER_CANDIDATE_STATUS OCS ON O.OFFER_STATUS = OCS.ID #WHERE# ]]&gt; &lt;/Sentence&gt; &lt;/Query&gt; &lt;/Queries&gt; &lt;/JdbcEntitySetup&gt; . En el fichero java, añadiremos una nueva constante, que tendrá el mismo valor que el nombre del identificador que hemos establecido para la consulta. OfferCandidatesDao.java . package com.ontimize.hr.model.core.dao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; @Repository(\"OfferCandidatesDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidatesDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidatesDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID = \"ID\"; public static final String ATTR_OFFER_ID = \"OFFER_ID\"; public static final String ATTR_CANDIDATE_ID = \"CANDIDATE_ID\"; public static final String ATTR_OFFER_CANDIDATE_STATUS = \"OFFER_CANDIDATE_STATUS\"; public static final String QUERY_OFFER_DETAILS = \"details\"; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise10#modificar-el-dao-para-a%C3%B1adir-una-consulta-compleja",
    
    "relUrl": "/tutorial/exercise10#modificar-el-dao-para-añadir-una-consulta-compleja"
  },"184": {
    "doc": "Use of complex queries",
    "title": "Modificar la interfaz y el servicio para añadir el nuevo método",
    "content": "Actualizaremos la interfaz IOfferService para añadir el nuevo método que realizará la consulta. En caso de ser la consulta por defecto, no sería necesario hacer ninguno de los pasos indicados a continuación. Para simplificar el código que se está escribiendo, pueden aparecer tres puntos (…) en algunas partes del código. Esto indica que puede haber código anterior antes y después de esos puntos. right_panel_open IOfferService.java ... public interface IOfferService { ... // OFFER CANDIDATES ... EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; // OFFER CANDIDATES STATUS ... } . En el servicio, implementamos el nuevo método de la interfaz, utilizando el daoHelper para crear la consulta, pero añadiendo un nuevo parámetro a continuación de la lista de columnas a consultar, que será el identificador de la consulta que hemos creado en el DAO (y que hemos asociado a una constante en el fichero java correspondiente). OfferService.java ... @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { ... @Override public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList, OfferCandidatesDao.QUERY_OFFER_DETAILS); } ... } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . Podemos probar esta nueva consulta con la ayuda de Postman . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise10#modificar-la-interfaz-y-el-servicio-para-a%C3%B1adir-el-nuevo-m%C3%A9todo",
    
    "relUrl": "/tutorial/exercise10#modificar-la-interfaz-y-el-servicio-para-añadir-el-nuevo-método"
  },"185": {
    "doc": "Use of complex queries",
    "title": "Use of complex queries",
    "content": "Table of Contents . | Uso de consultas complejas . | Introducción | Modificar el DAO para añadir una consulta compleja | Modificar la interfaz y el servicio para añadir el nuevo método | . | . ",
    "url": "/docs/v3/tutorial/exercise10",
    
    "relUrl": "/tutorial/exercise10"
  },"186": {
    "doc": "Use server permission",
    "title": "Uso de permisos en el servidor",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise11#uso-de-permisos-en-el-servidor",
    
    "relUrl": "/tutorial/exercise11#uso-de-permisos-en-el-servidor"
  },"187": {
    "doc": "Use server permission",
    "title": "Introducción",
    "content": "En este ejercicio proveeremos de una capa de permisos al backend, permitiendo que los métodos que elijamos solo puedan ser ejecutados por determinados roles de usuario. En este ejercicio, crearemos un nuevo usuario que esté asociado a un nuevo rol, pero que no pueda ejecutar ninguna de las peticiones asociadas al servicio de Offers. ",
    "url": "/docs/v3/tutorial/exercise11#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise11#introducción"
  },"188": {
    "doc": "Use server permission",
    "title": "Añadir nuevo perfil y usuario",
    "content": "Añadiremos los siguientes elementos a la BD: . Código SQL . -- Añadimos un nuevo usuario INSERT INTO TUSER VALUES('candidate','candidate','candidate','candidate',NULL,'99999999R',NULL,'2020-07-03 11:50:40.665000',NULL) -- Añadimos un nuevo rol de usuario INSERT INTO TROLE VALUES(1,'candidate','&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;security&gt;&lt;/security&gt;') -- Indicamos la relación entre el nuevo usuario y el nuevo rol INSERT INTO TUSER_ROLE VALUES(1,1,'candidate') . ",
    "url": "/docs/v3/tutorial/exercise11#a%C3%B1adir-nuevo-perfil-y-usuario",
    
    "relUrl": "/tutorial/exercise11#añadir-nuevo-perfil-y-usuario"
  },"189": {
    "doc": "Use server permission",
    "title": "Modificar el servicio para añadir seguridad",
    "content": "En el módulo boot añadiremos la anotación @EnableAspectJAutoProxy(proxyTargetClass = false) a la clase ServerApplicaction.java y añadiremos a cada método del servicio la anotación @Secured({ PermissionsProviderSecured.SECURED }) . right_panel_open ServerApplication.java . package com.ontimize.hr; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.EnableAspectJAutoProxy; @EnableAspectJAutoProxy(proxyTargetClass = false) @SpringBootApplication public class ServerApplication { public static void main(String[] args) { SpringApplication.run(ServerApplication.class, args); } } . OfferService.java . package com.ontimize.hr.model.core.service; import java.util.List; import java.util.Map; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Lazy; import org.springframework.security.access.annotation.Secured; import org.springframework.stereotype.Service; import com.ontimize.hr.api.core.service.IOfferService; import com.ontimize.hr.model.core.dao.OfferCandidateStatusDao; import com.ontimize.hr.model.core.dao.OfferCandidatesDao; import com.ontimize.hr.model.core.dao.OfferDao; import com.ontimize.hr.model.core.dao.OfferStatusDao; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import com.ontimize.jee.common.security.PermissionsProviderSecured; import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper; @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { @Autowired private OfferDao offerDao; @Autowired private OfferStatusDao offerStatusDao; @Autowired private OfferCandidatesDao offerCandidatesDao; @Autowired private OfferCandidateStatusDao offerCandidateStatusDao; @Autowired private DefaultOntimizeDaoHelper daoHelper; @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerDao, keyMap, attrList); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerDao, attrMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerDao, attrMap, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerDao, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerStatusDao, keyMap, attrList); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerStatusDao, attrMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerStatusDao, attrMap, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerStatusDao, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateDetailsQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList, OfferCandidatesDao.QUERY_OFFER_DETAILS); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerCandidatesDao, attrMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerCandidatesDao, attrMap, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerCandidatesDao, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidateStatusDao, keyMap, attrList); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerCandidateStatusDao, attrMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerCandidateStatusDao, attrMap, keyMap); } @Override @Secured({PermissionsProviderSecured.SECURED}) public EntityResult offerCandidateStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerCandidateStatusDao, keyMap); } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise11#modificar-el-servicio-para-a%C3%B1adir-seguridad",
    
    "relUrl": "/tutorial/exercise11#modificar-el-servicio-para-añadir-seguridad"
  },"190": {
    "doc": "Use server permission",
    "title": "Añadir los permisos para los métodos",
    "content": "Una vez anotados los métodos, es necesario añadir el servicio y el método que hemos anotado a la tabla de la BD que almacena dichos elementos y a la tabla que indica los métodos para los cuales el rol tiene permiso. Código SQL . INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerQuery') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerInsert') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerUpdate') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerDelete') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerStatusQuery') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerStatusInsert') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerStatusUpdate') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerStatusDelete') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateQuery') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateDetailsQuery') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateInsert') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateUpdate') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateDelete') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateStatusQuery') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateStatusInsert') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateStatusUpdate') INSERT INTO TSERVER_PERMISSION (PERMISSION_NAME) VALUES('com.ontimize.hr.api.core.service.IOfferService/offerCandidateStatusDelete') INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,1) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,2) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,3) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,4) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,5) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,6) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,7) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,8) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,9) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,10) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,11) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,12) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,13) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,14) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,15) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,16) INSERT INTO TROLE_SERVER_PERMISSION (ID_ROLENAME,ID_SERVER_PERMISSION) VALUES(0,17) . Si tratamos de realizar mediante Postman peticiones en el servicio de OfferService cambiando la autenticación por el usuario candidate y contraseña candidate, dará un error, ya que el usuario candidate no pertenece al rol admin que es el único rol que tiene permisos para realizar esas consultas. arrow_back Tutorial anterior . ",
    "url": "/docs/v3/tutorial/exercise11#a%C3%B1adir-los-permisos-para-los-m%C3%A9todos",
    
    "relUrl": "/tutorial/exercise11#añadir-los-permisos-para-los-métodos"
  },"191": {
    "doc": "Use server permission",
    "title": "Use server permission",
    "content": "Table of Contents . | Uso de permisos en el servidor . | Introducción | Añadir nuevo perfil y usuario | Modificar el servicio para añadir seguridad | Añadir los permisos para los métodos | . | . ",
    "url": "/docs/v3/tutorial/exercise11",
    
    "relUrl": "/tutorial/exercise11"
  },"192": {
    "doc": "Structure of an Ontimize Boot application",
    "title": "Estructura de una aplicación Ontimize Boot",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise2#estructura-de-una-aplicaci%C3%B3n-ontimize-boot",
    
    "relUrl": "/tutorial/exercise2#estructura-de-una-aplicación-ontimize-boot"
  },"193": {
    "doc": "Structure of an Ontimize Boot application",
    "title": "Estructura",
    "content": "Esta sección explicará la estructura de una aplicación basada en Ontimize Boot. right_panel_open . | hr-api: este módulo contiene las interfaces relacionadas con los servicios invocados por los controladores REST. Los servicios implementan todos los métodos declarados en sus interfaces. | hr-boot: este módulo contiene el lanzador principal de la aplicación y un fichero de configuración *.yml, que se utiliza para configurar la aplicación, conexión, base de datos, parámetros de lanzamiento, seguridad… | hr-model: este módulo contiene la base de datos en HSQLDB, los archivos del DAO de la aplicación (ambos, tanto *.xml como *.java) y la implementación de los servicios cuyas interfaces están definidas en el módulo hr-api. | hr-ws: este módulo contiene los controladores REST para los servicios implementados en el módulo hr-model. | . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise2#estructura",
    
    "relUrl": "/tutorial/exercise2#estructura"
  },"194": {
    "doc": "Structure of an Ontimize Boot application",
    "title": "Structure of an Ontimize Boot application",
    "content": "Table of Contents . | Estructura de una aplicación Ontimize Boot . | Estructura | . | . ",
    "url": "/docs/v3/tutorial/exercise2",
    
    "relUrl": "/tutorial/exercise2"
  },"195": {
    "doc": "Understanding the application.yml file",
    "title": "Entendiendo el fichero application.yml",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise3#entendiendo-el-fichero-applicationyml",
    
    "relUrl": "/tutorial/exercise3#entendiendo-el-fichero-applicationyml"
  },"196": {
    "doc": "Understanding the application.yml file",
    "title": "Introducción",
    "content": "Un fichero YAML, de extensión *.yml ó *.yaml, es un fichero con una interpretación sencilla en el que podemos escribir pares de datos de manera adecuada mediante combinaciones de listas, mapas y datos simples. Otra de las características más importantes de estos ficheros es la indentación. Es importante escribir estos elementos indentados correctamente, dado que de estar mal indentado, no se podrá parsear correctamente. ",
    "url": "/docs/v3/tutorial/exercise3#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise3#introducción"
  },"197": {
    "doc": "Understanding the application.yml file",
    "title": "Descripción del fichero application.yml",
    "content": "right_panel_open application.yml . endpoints: api: # Endpoints de Spring Boot activos enabled: true logging: level: # Nivel de log por defecto del servidro establecido al nivel de INFO root: info ontimize: corsfilter: # Habilitado los filtros de CORS enabled: true globalcors: # Configuración global de CORS cors-configurations: '[/**]': # Permitir diferentes orígenes allowed-origins: \"*\" # Permitir cabeceras allowed-headers: \"*\" # Cabeceras expuestas exposed-headers: [\"X-Auth-Token\",\"Content-disposition\",\"X-Requested-With\"] # Métodos HTTP permitidos allowed-methods: - GET - POST - PUT - OPTIONS - DELETE jdbc: # Convención de nombre de columnas name-convention: upper # Handler de SQL sqlhandler: hsqldb sql-condition-processor: # Uso de mayúsculas uppper-string: true # Comparación de cadenas en caso de condición LIKE en mayúscula upper-like: true security: # Modo de seguridad por defecto mode: default # Configuración de la contraseña del token de JWT. DEBE Cambiarse. jwt: password: cH4nG3_M3** # ← CHANGE THIS VALUE # Rutas a ignorar la seguridad ignore-paths: /app/** # Configurar las columnas del rol de usuario role-information-service: # Repositorio que almacenan los roles role-repository: UserRoleDao # Nombre de la columna que tiene el nombre del rol role-name-column: ROLENAME # Identificador de la query para la consulta de permisos en el servidor server-permission-query-id: serverPermissions # Nombre de la columna que contiene el nombre del permiso server-permission-name-column: PERMISSION_NAME # Identificador de la query para la consulta de permisos en el cliente client-permission-query-id: clientPermissions # Nombre de la columna que contiene los permisos del cliente client-permission-column: XMLCLIENTPERMISSION # Información sobre el usuario user-information-service: #Repositorio que almacena los usuarios de la aplicación user-repository: UserDao # Nombre de la columna con el nombre de usuario user-login-column: USER_ # Nombre de la columnas con la contraseña user-password-column: PASSWORD # Indentificador de la query para iniciar sesión query-id: login # Otras columnas de consulta other-data: - NAME - SURNAME - EMAIL - NIF - USERBLOCKED - LASTPASSWORDUPDATE - FIRSTLOGIN #Información sobre el repositorio que enlaza usuarios y roles user-role-information-service: # Nombre del repositorio user-role-repository: UserRoleDao # Identificador de la consulta query-id: userRole # Columna que almacena al usuario role-login-column: USER_ # Columna que almacena el nombre del rol role-name-column: ROLENAME server: # Puerto del servidor port: 33333 tomcat: # Codificación de la URI uri-encoding: UTF-8 compression: # Habilitar la compresión de datos enabled: true # Tipos mime mime-types: application/json, application/xml spring: # Origen de los datos (Conexión con la DB) datasource: #Driver del JDBC driver-class-name: org.hsqldb.jdbcDriver # URL de conexión jdbc-url: jdbc:hsqldb:hsql://localhost:9013/templateDB # Nombre de usuario de la BD username: SA # Contraseña del usuario de la BD password: # Tamaño inicial initial-size: 10 # Validación test-on-borrow: true main: # Eliminar el banner de inicio en la consola banner-mode: 'off' session: # Almacenar la sesión en spring store-type: none autoconfigure: #Elimina los ficheros de autoconfiguración de Spring Boot exclude: | org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.actuate.autoconfigure.ManagementWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise3#descripci%C3%B3n-del-fichero-applicationyml",
    
    "relUrl": "/tutorial/exercise3#descripción-del-fichero-applicationyml"
  },"198": {
    "doc": "Understanding the application.yml file",
    "title": "Understanding the application.yml file",
    "content": "Table of Contents . | Entendiendo el fichero application.yml . | Introducción | Descripción del fichero application.yml | . | . ",
    "url": "/docs/v3/tutorial/exercise3",
    
    "relUrl": "/tutorial/exercise3"
  },"199": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Crear el DAO, Servicio y Controlador",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise4#crear-el-dao-servicio-y-controlador",
    
    "relUrl": "/tutorial/exercise4#crear-el-dao-servicio-y-controlador"
  },"200": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Introducción",
    "content": "En este tutorial vamos a crear un backend para una aplicación de recursos humanos desde cero, incluyendo la base de datos. La interfaz no se realizará en este tutorial. Al final de este curso, como repaso, se recomienda crear una interfaz adecuada para esta aplicación con Ontimize Web, utilizando el tutorial de Ontimize Web de esta wiki. Este ejercicio está centrado en la creación desde cero de una tabla de base de datos, DAO, servicio y controlador para que puedan ser consumidos a través de una petición REST. ",
    "url": "/docs/v3/tutorial/exercise4#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise4#introducción"
  },"201": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Lanzar la base de datos",
    "content": "Para lanzar la base de datos, es necesario hacer un “Maven Install” en el proyecto, para que cree un fichero *.jar con el contenido del módulo hr-model y el lanzador de la base de datos pueda ser ejecutado por un lanzador Maven. Para hacer esto, clic derecho sobre el icono de Maven 1, clic en “Execute Maven goal” 2 y escribimos el comando mvn install 3. El recuadro rojo tiene que indicar Project, lo que indica que este comando se ejecutará a nivel del proyecto base y sobre cada uno de los módulos. La salida de la consola de comandos debe mostrar un BUILD SUCCESS. Una vez completada la instalación de Maven del proyecto padre, podremos crear un lanzador Maven para la base de datos. Clic derecho sobre el desplegable de los lanzadores 1 (en este caso, sobre el icono ▾) y selecionamos Edit Configurations…. En esta ventana, clic en Add New Configuration 2, seleccionamos configuración de Maven y rellenamos los datos como aparecen a continuación: . | Name: Run database (el nombre del lanzador) | Run: exec:java (la instrucción Maven que se ejecutará) | Working directory: hr-model (el módulo que ejecutará la instrucción) | Profiles: run_database (el perfil que se añadirá a la ejecución de la instrucción) | . Una vez terminado podemos darle a OK para guardar el lanzador y ya lo tendremos disponible de forma rápida en la parte de los lanzadores. Haciendo clic en el nombre del lanzador, podremos ejecutar la base de datos. En el futuro, cuando tengamos más lanzadores, podremos utilizar el menú desplegable para elegir que queremos ejecutar. Por el momento, lanzaremos la base de datos, dándole al botón de inicio 1. La base de datos que se lanza tiene los siguientes parámetros de conexión: . Parámetros de conexión . Host: localhost Port: 9013 Database: templateDB User: SA Password: &lt;vacía&gt; JDBC URL: jdbc:hsqldb:hsql://localhost:9013/templateDB . Método de lanzamiento alternativo . Se puede lanzar también si abrimos la ventana de “Execute Maven goal”, especificamos el módulo sobre el que tenemos que ejecutar el comando Maven (en este caso, hr-model) y ejecutamos: . mvn exec:java -Prun_database . ",
    "url": "/docs/v3/tutorial/exercise4#lanzar-la-base-de-datos",
    
    "relUrl": "/tutorial/exercise4#lanzar-la-base-de-datos"
  },"202": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Crear una tabla de candidatos",
    "content": "Creamos la tabla de candidatos para nuestra aplicación de recursos humanos. Esta tabla contendrá múltiples columnas que serán clave foránea de otras tablas, como puedan ser las columnas de STATUS u ORIGIN. Este es el código SQL para la creación de la tabla. Código SQL . CREATE TABLE CANDIDATE ( ID INTEGER IDENTITY PRIMARY KEY, PHOTO VARBINARY(16777216) NULL, NAME NVARCHAR(255) NULL, SURNAME NVARCHAR(255) NULL, BIRTHDAY DATE NULL, DNI NVARCHAR(255) NULL, PHONE NVARCHAR(255) NULL, EMAIL NVARCHAR(255) NULL, EDUCATION INTEGER NULL, SPECIALTIES NVARCHAR(255) NULL, STATUS INTEGER NULL, ORIGIN INTEGER NULL, WAGE_LEVEL NUMERIC NULL, EXPERIENCE_LEVEL INTEGER NULL, PROFILE INTEGER NULL, COMMENT NVARCHAR(255) NULL, LINKEDIN NVARCHAR(255) NULL ); . Insertaremos datos de prueba sólo en aquellas columnas que sean de tipo alfanumérico (recordemos que los elementos numéricos estarán enlazados como claves de otras tablas). Para realizar esta tarea podemos utilizar una herramienta de administración de bases de datos como por ejemplo DBeaver. Código SQL . INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Nonnah', 'Baden', '1994-12-24', '71958681F', '591-646-5605', 'nbaden0@plala.or.jp', NULL, 'Erlang', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Claiborn', 'Shawell', '1989-08-01', '28224678K', '909-780-3858', 'cshawell1@chron.com', NULL, 'JavaFX', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Anne-marie', 'Frampton', '1985-12-17', '48230973L', '466-225-8193', 'aframpton2@addtoany.com', NULL, 'Matlab', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Aron', 'Wiseman', '1981-09-08', '75760366E', '969-405-2922', 'awiseman3@google.com.br', NULL, 'Compliance', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Hyatt', 'Faircley', '1977-05-25', '14709704P', '375-972-2164', 'hfaircley4@sbwire.com', NULL, 'Haskell', NULL, NULL, '45000', NULL, NULL, 'nulla pede ullamcorper augue a suscipit nulla elit ac nulla', NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Daune', 'Woolham', '1978-06-21', '50472212T', '675-891-2878', 'dwoolham5@stanford.edu', NULL, 'React', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Kaila', 'Earwicker', '1988-04-26', '90445706T', '642-759-7346', 'kearwicker6@sogou.com', NULL, 'HTML5', NULL, NULL, '23000', NULL, NULL, 'ut ultrices vel augue vestibulum ante ipsum primis in faucibus', NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Felisha', 'Rahl', '1990-05-28', '76140170G', '712-914-9094', 'frahl7@ox.ac.uk', NULL, 'Docker', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Charla', 'Note', '1981-11-27', '41685146S', '284-789-0755', 'cnote8@cafepress.com', NULL, 'MS Office', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Candie', 'Ibert', '1978-09-24', '00273718H', '299-578-6249', 'cibert9@apple.com', NULL, 'Taxation', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Kelcy', 'Lathleiffure', '1991-04-19', '73696168M', '890-133-5541', 'klathleiffurea@miibeian.gov.cn', NULL, 'Ruby', NULL, NULL, '33500', NULL, NULL, 'nulla sed accumsan felis ut at dolor quis odio consequat', NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Kaleena', 'Jonk', '1994-09-28', '76619635B', '956-957-8235', 'kjonkb@e-recht24.de', NULL, 'Design', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Tami', 'Scorton', '1977-09-25', '12571372D', '599-466-8570', 'tscortonc@photobucket.com', NULL, 'Compliance', NULL, NULL, NULL, NULL, NULL, NULL, NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Davin', 'Frowde', '1984-03-06', '96529753H', '396-303-0612', 'dfrowded@webs.com', NULL, 'React', NULL, NULL, '22000', NULL, NULL, 'porta volutpat erat quisque erat eros viverra eget congue eget semper', NULL); INSERT INTO CANDIDATE (PHOTO,NAME,SURNAME,BIRTHDAY,DNI,PHONE,EMAIL,EDUCATION,SPECIALTIES,STATUS,ORIGIN,WAGE_LEVEL,EXPERIENCE_LEVEL,PROFILE,COMMENT,LINKEDIN) VALUES ( NULL, 'Kial', 'Titlow', '1980-05-06', '27680562Q', '591-499-8814', 'ktitlowe@telegraph.co.uk', NULL, 'HTML5', NULL, NULL, NULL, NULL, NULL, NULL, NULL); . ",
    "url": "/docs/v3/tutorial/exercise4#crear-una-tabla-de-candidatos",
    
    "relUrl": "/tutorial/exercise4#crear-una-tabla-de-candidatos"
  },"203": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Creación de los ficheros DAO",
    "content": "Ahora que tenemos una tabla con datos de prueba en la base de datos, vamos a crear un DAO (Data Access Object) en el módulo de hr-model para que sirva como modelo de esta tabla de la base de datos. Los DAO están compuestos por 2 ficheros: un fichero con extensión *.xml y un fichero *.java. right_panel_open En nuestro fichero *.xml indicaremos la tabla de la base de datos, desde donde recogemos la información, para la cual hacemos el DAO y el esquema al que pertenece la tabla. CandidateDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"CANDIDATE\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . En el fichero *.java indicamos que se trata de un repositorio cuyo nombre será CandidateDao, mediante la anotación @Repository. Con la anotación @Lazy, indicaremos que la carga se retrase hasta que sea completamente necesaria (mejorando de esa manera el rendimiento), y la anotación @ConfigurationFile nos permite configurar este DAO usando el fichero *.xml y un fichero adicional donde pueden almacenarse algunas características comunes a varios DAO, como el esquema al que pertenecen. CandidateDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"CandidateDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/CandidateDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class CandidateDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID = \"ID\"; public static final String ATTR_PHOTO = \"PHOTO\"; public static final String ATTR_NAME = \"NAME\"; public static final String ATTR_SURNAME = \"SURNAME\"; public static final String ATTR_BIRTHDAY = \"BIRTHDAY\"; public static final String ATTR_DNI = \"DNI\"; public static final String ATTR_PHONE = \"PHONE\"; public static final String ATTR_EMAIL = \"EMAIL\"; public static final String ATTR_EDUCATION = \"EDUCATION\"; public static final String ATTR_SPECIALTIES = \"SPECIALTIES\"; public static final String ATTR_STATUS = \"STATUS\"; public static final String ATTR_ORIGIN = \"ORIGIN\"; public static final String ATTR_WAGE_LEVEL = \"WAGE_LEVEL\"; public static final String ATTR_EXPERIENCE_LEVEL = \"EXPERIENCE_LEVEL\"; public static final String ATTR_PROFILE = \"PROFILE\"; public static final String ATTR_COMMENT = \"COMMENT\"; public static final String ATTR_LINKEDIN = \"LINKEDIN\"; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . ",
    "url": "/docs/v3/tutorial/exercise4#creaci%C3%B3n-de-los-ficheros-dao",
    
    "relUrl": "/tutorial/exercise4#creación-de-los-ficheros-dao"
  },"204": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Creación de la interfaz del servicio",
    "content": "Con el DAO preparado, es necesario crear una interfaz pública para que sea implementada por un servicio. Esta interfaz estará en el módulo hr-api, la cual tendrá, de momento, los métodos CRUD (Create, Read, Update, Delete) básicos para el DAO que se ha creado. Estos métodos tendrán una raíz común que decidiremos según el DAO al que pertenezcan (en este caso, candidate) y un sufijo que dependerá de la acción que se vaya a realizar (Query, Insert, Update, Delete). right_panel_open ICandidateService.java . package com.ontimize.hr.api.core.service; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import java.util.List; import java.util.Map; public interface ICandidateService { // CANDIDATE EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . ",
    "url": "/docs/v3/tutorial/exercise4#creaci%C3%B3n-de-la-interfaz-del-servicio",
    
    "relUrl": "/tutorial/exercise4#creación-de-la-interfaz-del-servicio"
  },"205": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Creación del servicio",
    "content": "A continuación, debemos crear un servicio que implemente la interfaz que hemos creado. En este caso, estará ubicada en hr-model, dentro del paquete service. Esta clase tendrá la anotación @Service con el valor Candidate, para indicar que se trata del servicio de candidatos, y la anotación @Lazy, que permite que los servicios se inicien cuando son requeridos y no durante el arranque. Para el empleo de los DAO, deberán llevar la anotación @Autowired, que permite que los DAO se enlacen correctamente a las variables donde las hemos definido, evitando el uso de métodos getter y setter. right_panel_open CandidateService.java . package com.ontimize.hr.model.core.service; import com.ontimize.hr.api.core.service.ICandidateService; import com.ontimize.hr.model.core.dao.CandidateDao; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Service; import java.util.List; import java.util.Map; @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { @Autowired private CandidateDao candidateDao; @Autowired private DefaultOntimizeDaoHelper daoHelper; @Override public EntityResult candidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.candidateDao, keyMap, attrList); } @Override public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.candidateDao, attrMap); } @Override public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.candidateDao, attrMap, keyMap); } @Override public EntityResult candidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.candidateDao, keyMap); } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . ",
    "url": "/docs/v3/tutorial/exercise4#creaci%C3%B3n-del-servicio",
    
    "relUrl": "/tutorial/exercise4#creación-del-servicio"
  },"206": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Creación del controlador",
    "content": "Una vez tengamos el DAO creado, su interfaz y el servicio que implemente dicha interfaz, crearemos el controlador REST para que responda a las peticiones que reciba el servidor. Los controladores se ubicarán en el módulo hr-ws. right_panel_open La anotación @RestController indica que esta clase trabaja como un controlador, que responderá a las peticiones cuya URL tenga el path indicado en la anotación @RequestMapping (en este caso, candidates). CandidateRestController.java . package com.ontimize.hr.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.ontimize.hr.api.core.service.ICandidateService; import com.ontimize.jee.server.rest.ORestController; @RestController @RequestMapping(\"/candidates\") public class CandidateRestController extends ORestController&lt;ICandidateService&gt; { @Autowired private ICandidateService candidateService; @Override public ICandidateService getService() { return this.candidateService; } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . Ahora ya podemos utilizar una aplicación como Postman para ejecutar diferentes peticiones REST a nuestro proyecto. ",
    "url": "/docs/v3/tutorial/exercise4#creaci%C3%B3n-del-controlador",
    
    "relUrl": "/tutorial/exercise4#creación-del-controlador"
  },"207": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Lanzar la Aplicación",
    "content": "Para lanzar la aplicación, tenemos 2 formas diferentes de hacerlo, la primera mediante Maven y la segunda a través del código de la aplicación (recomendado). Maven . Abrimos nuevamente la ventana de Edit Configurations… y añadimos una configuración nueva. Para lanzar la aplicación, procederemos de la misma forma que para lanzar la base de datos. Método de lanzamiento alternativo . Se puede lanzar también si abrimos la ventana de “Execute Maven goal”, especificamos el módulo sobre el que tenemos que ejecutar el comando Maven (en este caso, hr-boot) y ejecutamos: . mvn spring-boot:run . Código de la aplicación (Recomendado) . right_panel_open Buscamos la clase ServerApplication.java que se encuentra dentro del módulo hr-boot y en el método main hacemos clic en el triángulo verde y a continuación, clic en Debug ‘ServerAplplicat….main(). Esto permitirá lanzar el código en modo Debug, útil para seguir las instrucciones que se van ejecutando para poder detectar la solución de posibles errores que se produzcan. | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | placeholders.properties | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | README.md | . | . ",
    "url": "/docs/v3/tutorial/exercise4#lanzar-la-aplicaci%C3%B3n",
    
    "relUrl": "/tutorial/exercise4#lanzar-la-aplicación"
  },"208": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Usar las peticiones REST",
    "content": "Las peticiones contienen la siguiente estructura: . localhost:33333/candidates/candidate . | Elemento | Significado | . | localhost:33333 | Indica el host | . | /candidates | Indica el controlador que se va a consultar | . | /candidate | Indica el método de la interfaz del controlador al que accederá ese servicio (este método está implementado en el servicio, y no tiene los sufijos Query, Insert, Update, Delete) | . Los tipos de peticiones sólo pueden ser: GET, POST, PUT, DELETE. A continuación, se muestran ejemplos de peticiones para los candidatos (CANDIDATES). La autorización que se usa para estas peticiones es de tipo BASIC, cuyas credenciales son demo como usuario y demouser como contraseña. | Tipo petición | Tipo de consulta | Petición | Método del servicio | Cuerpo petición | . | GET | query | localhost:33333/candidates/candidate?columns=ID,NAME,SURNAME | candidateQuery | No tiene cuerpo de petición porque es de tipo GET | . | POST | query | localhost:33333/candidates/candidate/search | candidateQuery | { \"filter\": { \"ID\": 0 }, \"columns\": [\"ID\",\"NAME\",\"SURNAME\",\"BIRTHDAY\",\"DNI\",\"PHONE\",\"EMAIL\",\"EDUCATION\", \"SPECIALTIES\",\"STATUS\",\"ORIGIN\",\"WAGE_LEVEL\",\"EXPERIENCE_LEVEL\", \"PROFILE\",\"COMMENT\",\"LINKEDIN\"] } . | . | insert | localhost:33333/candidates/candidate | candidateInsert | { \"data\": { \"PHONE\": \"555-444-8888\", \"BIRTHDAY\": 788224700000, \"SURNAME\": \"Wilson\", \"EMAIL\": \"wwiilsoon@example.org\", \"SPECIALTIES\": \"C#\", \"NAME\": \"William\", \"DNI\": \"88643946Z\" }, \"sqltypes\": { \"SPECIALTIES\": 12, \"LINKEDIN\": 12, \"PHONE\": 12, \"EXPERIENCE_LEVEL\": 4, \"STATUS\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"DNI\": 12, \"ID\": 4, \"ORIGIN\": 4, \"EDUCATION\": 4, \"COMMENT\": 12, \"PROFILE\": 4, \"SURNAME\": 12, \"NAME\": 12, \"BIRTHDAY\": 91 } } . | . | PUT | update | localhost:33333/candidates/candidate | candidateUpdate | { \"filter\" :{ \"ID\" :15 }, \"data\": { \"EMAIL\": \"wwilson@example.org\" }, \"sqltypes\": { \"SPECIALTIES\": 12, \"LINKEDIN\": 12, \"PHONE\": 12, \"EXPERIENCE_LEVEL\": 4, \"STATUS\": 4, \"EMAIL\": 12, \"WAGE_LEVEL\": 2, \"DNI\": 12, \"ID\": 4, \"ORIGIN\": 4, \"EDUCATION\": 4, \"COMMENT\": 12, \"PROFILE\": 4, \"SURNAME\": 12, \"NAME\": 12, \"BIRTHDAY\": 91 } } . | . | DELETE | delete | localhost:33333/candidates/candidate | candidateDelete | { \"filter\": { \"ID\": 15 } } . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise4#usar-las-peticiones-rest",
    
    "relUrl": "/tutorial/exercise4#usar-las-peticiones-rest"
  },"209": {
    "doc": "Creating DAO, Service and Controller",
    "title": "Creating DAO, Service and Controller",
    "content": "Table of Contents . | Crear el DAO, Servicio y Controlador . | Introducción | Lanzar la base de datos | Crear una tabla de candidatos | Creación de los ficheros DAO | Creación de la interfaz del servicio | Creación del servicio | Creación del controlador | Lanzar la Aplicación . | Maven | Código de la aplicación (Recomendado) | . | Usar las peticiones REST | . | . ",
    "url": "/docs/v3/tutorial/exercise4",
    
    "relUrl": "/tutorial/exercise4"
  },"210": {
    "doc": "Service master",
    "title": "Servicio de maestros",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise5#servicio-de-maestros",
    
    "relUrl": "/tutorial/exercise5#servicio-de-maestros"
  },"211": {
    "doc": "Service master",
    "title": "Introducción",
    "content": "Un servicio de maestros permite tener centralizados en un único servicio aquellos elementos que nos sirvan para identificar otros, por ejemplo, para un candidato, la procedencia de ese candidato, si ha sido por medio de un reclutador, de un empleado, a través de Linkedin… Estas tablas serán elementos que puedan repetirse en múltiples registros y nos interesa saber que elementos tienen para poder gestionarlos. Crearemos un servicio llamado MasterService, que contenga todos los DAO que puedan pertenecer a esta categoría. ",
    "url": "/docs/v3/tutorial/exercise5#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise5#introducción"
  },"212": {
    "doc": "Service master",
    "title": "Estableciendo los DAO",
    "content": "Si comprobamos la tabla de CANDIDATE de la base de datos, observamos que hay varias columnas que pueden ser factibles para ser una tabla de maestros que estén asociados a este nuevo servicio. Crearemos la tablas asociadas a esos datos. Las tablas contendrán una estructura de 2 columnas, un identificador y una descripción. Código SQL . CREATE TABLE EDUCATION (ID INTEGER IDENTITY PRIMARY KEY NOT NULL, DESCRIPTION NVARCHAR(255) NOT NULL); CREATE TABLE STATUS(ID INTEGER IDENTITY PRIMARY KEY NOT NULL, DESCRIPTION NVARCHAR(255) NOT NULL); CREATE TABLE ORIGIN (ID INTEGER IDENTITY PRIMARY KEY NOT NULL, DESCRIPTION NVARCHAR(255) NOT NULL); CREATE TABLE EXPERIENCE_LEVEL (ID INTEGER IDENTITY PRIMARY KEY NOT NULL, DESCRIPTION NVARCHAR(255) NOT NULL); CREATE TABLE PROFILE (ID INTEGER IDENTITY PRIMARY KEY NOT NULL, DESCRIPTION NVARCHAR(255) NOT NULL); . Añadiremos claves foráneas a la tabla de CANDIDATE asociando sus columnas con las nuevas tablas. Código SQL . ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK_EDUCATION FOREIGN KEY (EDUCATION) REFERENCES EDUCATION(ID); ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK_STATUS FOREIGN KEY (STATUS) REFERENCES STATUS(ID); ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK_ORIGIN FOREIGN KEY (ORIGIN) REFERENCES ORIGIN(ID); ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK_EXPERIENCE_LEVEL FOREIGN KEY (EXPERIENCE_LEVEL) REFERENCES EXPERIENCE_LEVEL(ID); ALTER TABLE CANDIDATE ADD CONSTRAINT CANDIDATE_FK_PROFILE FOREIGN KEY (PROFILE) REFERENCES PROFILE(ID); . Insertamos un registro en cada una de ellas, para que puedan tener datos. Código SQL . INSERT INTO EDUCATION (DESCRIPTION) VALUES ('Degree in Computer Science'); INSERT INTO STATUS (DESCRIPTION) VALUES ('Available'); INSERT INTO ORIGIN (DESCRIPTION) VALUES ('Recruiter'); INSERT INTO EXPERIENCE_LEVEL (DESCRIPTION) VALUES ('Junior'); INSERT INTO PROFILE (DESCRIPTION) VALUES ('Technician'); . Ahora se crearán los DAO correspondientes a esas tablas, tanto los elementos las clases en Java como los ficheros *.xml . right_panel_open EducationDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"EDUCATION\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . EducationDao.java . package com.ontimize.hr.model.core.dao; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; @Repository(\"EducationDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/EducationDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class EducationDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID = \"ID\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; } . ExperienceLevelDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"EXPERIENCE_LEVEL\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ExperienceLevelDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"ExperienceLevelDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/ExperienceLevelDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ExperienceLevelDao extends OntimizeJdbcDaoSupport{ public static final String ATTR_ID = \"ID\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; } . OriginDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"ORIGIN\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OriginDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OriginDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OriginDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OriginDao extends OntimizeJdbcDaoSupport{ public static final String ATTR_ID = \"ID\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; } . ProfileDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"PROFILE\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . ProfileDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"ProfileDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/ProfileDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class ProfileDao extends OntimizeJdbcDaoSupport{ public static final String ATTR_ID = \"ID\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; } . StatusDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"STATUS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . StatusDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"StatusDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/StatusDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class StatusDao extends OntimizeJdbcDaoSupport{ public static final String ATTR_ID = \"ID\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise5#estableciendo-los-dao",
    
    "relUrl": "/tutorial/exercise5#estableciendo-los-dao"
  },"213": {
    "doc": "Service master",
    "title": "Crear la interfaz del servicio de maestros",
    "content": "Crearemos una interfaz para el servicio de maestros, pensando en que se usarán los DAO creados en el punto anterior. right_panel_open IMasterService.java . package com.ontimize.hr.api.core.service; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import java.util.List; import java.util.Map; public interface IMasterService { // EDUCATION EntityResult educationQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult educationInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult educationUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult educationDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // EXPERIENCE_LEVEL EntityResult experienceLevelQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult experienceLevelInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult experienceLevelUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult experienceLevelDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // ORIGIN EntityResult originQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult originInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult originUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult originDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // PROFILE EntityResult profileQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult profileInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult profileUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult profileDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // STATUS EntityResult statusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult statusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult statusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult statusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise5#crear-la-interfaz-del-servicio-de-maestros",
    
    "relUrl": "/tutorial/exercise5#crear-la-interfaz-del-servicio-de-maestros"
  },"214": {
    "doc": "Service master",
    "title": "Creación del servicio de maestros",
    "content": "De la misma manera que hemos creado el servicio para CandidateService, vamos a crear el servicio para MasterService, que implementará la recién creada interfaz IMasterService. Es necesario anotarlo con @Service (cuyo valor será MasterService) y con @Lazy . right_panel_open MasterService.java . package com.ontimize.hr.model.core.service; import java.util.List; import java.util.Map; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Service; import com.ontimize.hr.api.core.service.IMasterService; import com.ontimize.hr.model.core.dao.EducationDao; import com.ontimize.hr.model.core.dao.ExperienceLevelDao; import com.ontimize.hr.model.core.dao.OriginDao; import com.ontimize.hr.model.core.dao.ProfileDao; import com.ontimize.hr.model.core.dao.StatusDao; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper; @Service(\"MasterService\") @Lazy public class MasterService implements IMasterService { @Autowired private EducationDao educationDao; @Autowired private ExperienceLevelDao experienceLevelDao; @Autowired private OriginDao originDao; @Autowired private ProfileDao profileDao; @Autowired private StatusDao statusDao; @Autowired private DefaultOntimizeDaoHelper daoHelper; @Override public EntityResult educationQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.educationDao, keyMap, attrList); } @Override public EntityResult educationInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.educationDao, attrMap); } @Override public EntityResult educationUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.educationDao, attrMap, keyMap); } @Override public EntityResult educationDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.educationDao, keyMap); } @Override public EntityResult experienceLevelQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.experienceLevelDao, keyMap, attrList); } @Override public EntityResult experienceLevelInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.experienceLevelDao, attrMap); } @Override public EntityResult experienceLevelUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.experienceLevelDao, attrMap, keyMap); } @Override public EntityResult experienceLevelDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.experienceLevelDao, keyMap); } @Override public EntityResult originQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.originDao, keyMap, attrList); } @Override public EntityResult originInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.originDao, attrMap); } @Override public EntityResult originUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.originDao, attrMap, keyMap); } @Override public EntityResult originDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.originDao, keyMap); } @Override public EntityResult profileQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.profileDao, keyMap, attrList); } @Override public EntityResult profileInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.profileDao, attrMap); } @Override public EntityResult profileUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.profileDao, attrMap, keyMap); } @Override public EntityResult profileDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.profileDao, keyMap); } @Override public EntityResult statusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.statusDao, keyMap, attrList); } @Override public EntityResult statusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.statusDao, attrMap); } @Override public EntityResult statusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.statusDao, attrMap, keyMap); } @Override public EntityResult statusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.statusDao, keyMap); } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise5#creaci%C3%B3n-del-servicio-de-maestros",
    
    "relUrl": "/tutorial/exercise5#creación-del-servicio-de-maestros"
  },"215": {
    "doc": "Service master",
    "title": "Creación del controlador de maestros",
    "content": "Ahora crearemos el controlador REST para el servicio de maestros. Tenemos que crear una clase nueva que extienda de ORestController, cuyo tipo de dato será la interfaz creada para el servicio, IMasterService. Esta clase contendrá las anotaciones @RestController, que indicará que esta clase servirá de controlador REST y @RequestMapping(\"/master\") que establecerá la url del controlador. right_panel_open MasterRestController . package com.ontimize.hr.ws.core.rest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.ontimize.hr.api.core.service.IMasterService; import com.ontimize.jee.server.rest.ORestController; @RestController @RequestMapping(\"/master\") public class MasterRestController extends ORestController&lt;IMasterService&gt; { @Autowired private IMasterService masterService; @Override public IMasterService getService() { return this.masterService; } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . Arrancamos la aplicación y ya podemos hacer nuevas peticiones desde Postman. arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise5#creaci%C3%B3n-del-controlador-de-maestros",
    
    "relUrl": "/tutorial/exercise5#creación-del-controlador-de-maestros"
  },"216": {
    "doc": "Service master",
    "title": "Service master",
    "content": "Table of Contents . | Servicio de maestros . | Introducción | Estableciendo los DAO | Crear la interfaz del servicio de maestros | Creación del servicio de maestros | Creación del controlador de maestros | . | . ",
    "url": "/docs/v3/tutorial/exercise5",
    
    "relUrl": "/tutorial/exercise5"
  },"217": {
    "doc": "Understanding the EntityResult",
    "title": "Entendiendo el EntityResult",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise6#entendiendo-el-entityresult",
    
    "relUrl": "/tutorial/exercise6#entendiendo-el-entityresult"
  },"218": {
    "doc": "Understanding the EntityResult",
    "title": "Introducción",
    "content": "En este ejercicio veremos la estructura con la que devuelve Ontimize Boot la respuesta de las peticiones que se le hagan, y como podemos nosotros trabajar con ella, además de los diferentes métodos que tiene para obtener y manejar la información. ",
    "url": "/docs/v3/tutorial/exercise6#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise6#introducción"
  },"219": {
    "doc": "Understanding the EntityResult",
    "title": "EntityResult",
    "content": "El EntityResult es una interfaz actualmente implementada por la clase EntityResultMapImpl que además implementa la interfaz Map, permitiendo almacenar el resultado de las consultas generadas contra la base de datos. Según la imagen superior, podemos comprobar que esta representación es un mapa de claves-valores, siendo las claves las columnas que ha consultado/obtenido de la BD y los valores una lista con los datos de todos los registros que ha obtenido en dicha consulta. La posición de los elementos dentro de la lista, indica los valores de los registros que se han obtenido. De esta manera, todos los elementos situados en la posición 0 de la lista corresponderán al primer registro que se ha devuelto desde la BD, los valores en la posición 1, los del registro número 2 y así sucesivamente. ",
    "url": "/docs/v3/tutorial/exercise6#entityresult",
    
    "relUrl": "/tutorial/exercise6#entityresult"
  },"220": {
    "doc": "Understanding the EntityResult",
    "title": "Métodos propios",
    "content": "Además de los métodos heredados de la clase Hashtable, la clase EntityResult cuenta también con sus propios métodos: . | Método | Descripción | . | int calculateRecordNumber() | Devuelve el número de registros que contiene el EntityResult. Si el resultado es 0, significa que el EntityResult está vacío y no ha traído registros de la BD | . | Map getRecordValues(int i) | Devuelve un Hashmap con el registro en la posición i que se le ha pasado por parámetro. Como clave tendrá el nombre de la columna y como valor tendrá el valor de dicho registro para esa columna | . | int getRecordIndex(Map kv) | Devuelve el índice del registro que cumpla las condiciones establecidas por el HashMap pasado como parámetro | . | addRecord(Map data) | Añade el HashMap pasado como parámetro al EntityResult como último valor. En caso de querer insertarlo en una posición específica, se indicará la posición como segundo parámetro. Para que el EntityResult sea correcto, necesita que todos las listas que contengan sean del mismo tamaño, por lo que si queremos añadir una columna cuyo valor sea null al EntityResult, nuestro Hashmap tiene que contener como clave la columna que tendrá valor null y como valor una instancia del objeto NullValue. Esto es debido a que los Hashmap no pueden tener elementos null como valor. | . | addRecord(Map data, int s) | . | setCode(int operationCode) | Establece el código de operación del EntityResult. Cuando un EntityResult llega al servidor, puede tener 3 códigos de operación: . | OPERATION_SUCCESSFUL: La operación ha sido realizada de manera correcta | OPERATION_SUCCESSFUL_SHOW_MESSAGE: La operación ha sido realizada de manera correcta, y contiene un mensaje específico | OPERATION_WRONG: La operación ha sido incorrecta y ha dado un error | . | . | int getCode() | Devuelve el código de la operación: . | OPERATION_SUCCESSFUL: 0 | OPERATION_SUCCESSFUL_SHOW_MESSAGE: 2 | OPERATION_WRONG: 1 | . | . | setMessage(String message) | Añade un mensaje al EntityResult | . | String getMessage() | Recupera el mensaje que contenga el EntityResult | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise6#m%C3%A9todos-propios",
    
    "relUrl": "/tutorial/exercise6#métodos-propios"
  },"221": {
    "doc": "Understanding the EntityResult",
    "title": "Understanding the EntityResult",
    "content": "Table of Contents . | Entendiendo el EntityResult . | Introducción | EntityResult | Métodos propios | . | . ",
    "url": "/docs/v3/tutorial/exercise6",
    
    "relUrl": "/tutorial/exercise6"
  },"222": {
    "doc": "CRUD operations, transactions",
    "title": "Modificación de operaciones CRUD básicas, transacciones",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise7#modificaci%C3%B3n-de-operaciones-crud-b%C3%A1sicas-transacciones",
    
    "relUrl": "/tutorial/exercise7#modificación-de-operaciones-crud-básicas-transacciones"
  },"223": {
    "doc": "CRUD operations, transactions",
    "title": "Introducción",
    "content": "Hasta ahora, solo hemos realizado operaciones CRUD básicas en nuestra aplicación, pero podemos modificar esos métodos básicos para permitir funcionamientos más avanzados, como puede ser, guardar nuevos valores en las tablas de maestros asociados cuando insertamos un candidato nuevo o, actualizamos uno ya existente. Todo ello, empleando las transacciones, y evitando que se guarden datos en caso de que ocurra un fallo. ",
    "url": "/docs/v3/tutorial/exercise7#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise7#introducción"
  },"224": {
    "doc": "CRUD operations, transactions",
    "title": "Modificar los métodos de CandidateService",
    "content": "Para simplificar el código que se está escribiendo, pueden aparecer tres puntos (…) en algunas partes del código. Esto indica que puede haber código anterior antes y después de esos puntos. right_panel_open En este caso, añadimos la referencia al servicio de maestros anotándolo con @Autowired. Luego, modificamos los métodos insert y update para que eliminen todos aquellos elementos contenidos en el mapa que recibe la petición como parámetro. Estos elementos eliminados quedarán almacenados en un mapa para comprobar si es necesario añadirlos a sus correspondientes tablas, o si por el contrario ya existen. De no existir previamente, se insertarán en la tabla correspondiente y recuperaremos el identificador que nos devuelve después de dicha inserción. De existir, obtenemos su identificador. Sea cual sea el caso, sustituiremos el valor que tenía por sus identificadores. Añadimos de nuevo los elementos eliminados a los elementos previos de la petición y continuamos con la ejecución del método. Tanto en el método insert como el método update están marcados con la anotación @Transactional(rollbackFor = Exception.class) que indica que, en caso de que dentro del método se genere alguna excepción del tipo Exception.class, hará un rollback y no guardará ninguno de los elementos que se hayan insertado en ese método. CandidateService.java . package com.ontimize.hr.model.core.service; ... @Service(\"CandidateService\") @Lazy public class CandidateService implements ICandidateService { ... /** * It stores the master service. When you mark it with the @Autowired notation, * it links automatically without using any setter */ @Autowired private MasterService masterService; ... /** * This method adds a new candidate. It removes from the parameters those items * not directly belonging to the table of candidates in case of that are of the * {@link String} type. Look for the identifier of this data in case that they * exist or adds them to the corresponding tables, and associates them with the * correct identifier. Then add these new elements to the list of applicant's * items and performs the insert of a new candidate * * @param attrMap A {@link Map} containing the data of the new candidate to be * inserted. */ @Override @Transactional(rollbackFor = Exception.class) public EntityResult candidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { Map&lt;String, Object&gt; nonCandidateData = removeNonRelatedData(attrMap, CandidateDao.ATTR_EDUCATION, CandidateDao.ATTR_EXPERIENCE_LEVEL, CandidateDao.ATTR_ORIGIN, CandidateDao.ATTR_PROFILE, CandidateDao.ATTR_STATUS); this.insertNonRelatedData(nonCandidateData); attrMap.putAll(nonCandidateData); return this.daoHelper.insert(this.candidateDao, attrMap); } /** * This method updates a candidate. It removes from the parameters those items * not directly belonging to the table of candidates in case of that are of the * {@link String} type. Look for the identifier of this data in case that they * exist or adds them to the corresponding tables, and associates them with the * correct identifier. Then add these new elements to the list of applicant's * items and performs the update of a candidate * * @param attrMap A {@link Map} containing the data of the candidate to be * updated. * @param keyMap A {@link Map} containing the identification of the candidate to be * updated. */ @Override @Transactional(rollbackFor = Exception.class) public EntityResult candidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { Map&lt;String, Object&gt; nonCandidateData = removeNonRelatedData(attrMap, CandidateDao.ATTR_EDUCATION, CandidateDao.ATTR_EXPERIENCE_LEVEL, CandidateDao.ATTR_ORIGIN, CandidateDao.ATTR_PROFILE, CandidateDao.ATTR_STATUS); this.insertNonRelatedData(nonCandidateData); attrMap.putAll(nonCandidateData); return this.daoHelper.update(this.candidateDao, attrMap, keyMap); } ... /** * It removes from a map all the keys and values of the map that match those * keys in their following parameters and returns a map with the extracted keys * and values * * @param attrMap A {@link Map} with all keys * @param attrToExclude Multiple {@link String} that can be found as key of * {@code attrMap} * @return A {@link Map} with all of the keys and values removed from * {@code attrMap} */ private Map&lt;String, Object&gt; removeNonRelatedData(Map&lt;String, Object&gt; attrMap, String... attrToExclude) { HashMap&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;(); for (String attr : attrToExclude) { if (attrMap.containsKey(attr) &amp;&amp; attrMap.get(attr) instanceof String) { data.put(attr, attrMap.remove(attr)); } } return data; } /** * Checks if the data stored in the map passed by parameter exists in the * database table corresponding to the {@link MasterService} service. If so, it * replaces the value with the corresponding identifier. In case it does not * exist, it stores that value and substitutes the element's value in the map * with its identifier * * @param nonCandidateData Values to be inserted in the tables managed by the * {@link MasterService} */ private void insertNonRelatedData(Map&lt;String, Object&gt; nonCandidateData) { for (Map.Entry&lt;String, Object&gt; entry : nonCandidateData.entrySet()) { Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;(); List&lt;String&gt; attr = new ArrayList&lt;String&gt;(); EntityResult toret, query; switch (entry.getKey()) { case CandidateDao.ATTR_EDUCATION: data.put(EducationDao.ATTR_DESCRIPTION, entry.getValue()); attr.add(EducationDao.ATTR_ID); query = this.masterService.educationQuery(data, attr); if (query.calculateRecordNumber() &gt; 0) { entry.setValue(query.getRecordValues(0).get(EducationDao.ATTR_ID)); } else { toret = this.masterService.educationInsert(data); entry.setValue(toret.get(EducationDao.ATTR_ID)); } break; case CandidateDao.ATTR_EXPERIENCE_LEVEL: data.put(ExperienceLevelDao.ATTR_DESCRIPTION, entry.getValue()); attr.add(ExperienceLevelDao.ATTR_ID); query = this.masterService.experienceLevelQuery(data, attr); if (query.calculateRecordNumber() &gt; 0) { entry.setValue(query.getRecordValues(0).get(ExperienceLevelDao.ATTR_ID)); } else { toret = this.masterService.experienceLevelInsert(data); entry.setValue(toret.get(ExperienceLevelDao.ATTR_ID)); } break; case CandidateDao.ATTR_ORIGIN: data.put(OriginDao.ATTR_DESCRIPTION, entry.getValue()); attr.add(OriginDao.ATTR_ID); query = this.masterService.originQuery(data, attr); if (query.calculateRecordNumber() &gt; 0) { entry.setValue(query.getRecordValues(0).get(OriginDao.ATTR_ID)); } else { toret = this.masterService.originInsert(data); entry.setValue(toret.get(OriginDao.ATTR_ID)); } break; case CandidateDao.ATTR_PROFILE: data.put(ProfileDao.ATTR_DESCRIPTION, entry.getValue()); attr.add(ProfileDao.ATTR_ID); query = this.masterService.profileQuery(data, attr); if (query.calculateRecordNumber() &gt; 0) { entry.setValue(query.getRecordValues(0).get(ProfileDao.ATTR_ID)); } else { toret = this.masterService.profileInsert(data); entry.setValue(toret.get(ProfileDao.ATTR_ID)); } break; case CandidateDao.ATTR_STATUS: data.put(StatusDao.ATTR_DESCRIPTION, entry.getValue()); attr.add(StatusDao.ATTR_ID); query = this.masterService.statusQuery(data, attr); if (query.calculateRecordNumber() &gt; 0) { entry.setValue(query.getRecordValues(0).get(StatusDao.ATTR_ID)); } else { toret = this.masterService.statusInsert(data); entry.setValue(toret.get(StatusDao.ATTR_ID)); } break; default: break; } } } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise7#modificar-los-m%C3%A9todos-de-candidateservice",
    
    "relUrl": "/tutorial/exercise7#modificar-los-métodos-de-candidateservice"
  },"225": {
    "doc": "CRUD operations, transactions",
    "title": "CRUD operations, transactions",
    "content": "Table of Contents . | Modificación de operaciones CRUD básicas, transacciones . | Introducción | Modificar los métodos de CandidateService | . | . ",
    "url": "/docs/v3/tutorial/exercise7",
    
    "relUrl": "/tutorial/exercise7"
  },"226": {
    "doc": "Adding new services",
    "title": "Añadir nuevos servicios",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise8#a%C3%B1adir-nuevos-servicios",
    
    "relUrl": "/tutorial/exercise8#añadir-nuevos-servicios"
  },"227": {
    "doc": "Adding new services",
    "title": "Introducción",
    "content": "En esta parte de la aplicación añadiremos nuevas tablas, DAO, servicios y controladores para nuestra aplicación de recursos humanos. Permitiremos gestionar ofertas de trabajo y añadir a ellas a los diferentes candidatos. ",
    "url": "/docs/v3/tutorial/exercise8#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise8#introducción"
  },"228": {
    "doc": "Adding new services",
    "title": "Creación de las tablas en la BD",
    "content": "Crearemos las tablas en la BD necesarias para esta nueva funcionalidad: . Código SQL . CREATE TABLE OFFER_STATUS (ID INTEGER PRIMARY KEY NOT NULL IDENTITY, DESCRIPTION VARCHAR(255) NOT NULL); CREATE TABLE OFFER_CANDIDATE_STATUS (ID INTEGER PRIMARY KEY NOT NULL IDENTITY, DESCRIPTION VARCHAR(255) NOT NULL); CREATE TABLE OFFER (ID INTEGER PRIMARY KEY NOT NULL IDENTITY, ACRONYM VARCHAR(255), DESCRIPTION VARCHAR(1000), APPLICANT VARCHAR(255), OFFER_STATUS INTEGER, CREATION_DATE DATE, START_DATE DATE, END_DATE DATE); CREATE TABLE OFFER_CANDIDATES (ID INTEGER PRIMARY KEY NOT NULL IDENTITY, OFFER_ID INTEGER NOT NULL, CANDIDATE_ID INTEGER NOT NULL, OFFER_CANDIDATE_STATUS INTEGER); . Añadimos las claves foráneas: . Código SQL . ALTER TABLE OFFER ADD CONSTRAINT OFFER_FK_OFFER_STATUS FOREIGN KEY (OFFER_STATUS) REFERENCES OFFER_STATUS(ID); ALTER TABLE OFFER_CANDIDATES ADD CONSTRAINT OFFER_CANDIDATES_FK_CANDIDATES FOREIGN KEY (CANDIDATE_ID) REFERENCES CANDIDATE(ID); ALTER TABLE OFFER_CANDIDATES ADD CONSTRAINT OFFER_CANDIDATES_FK_OFFER FOREIGN KEY (OFFER_ID) REFERENCES OFFER(ID); ALTER TABLE OFFER_CANDIDATES ADD CONSTRAINT OFFER_CANDIDATES_FK_OFFER_CANDIDATES_STATUS FOREIGN KEY (OFFER_CANDIDATE_STATUS) REFERENCES OFFER_CANDIDATE_STATUS(ID); . Rellenaremos las tablas con un mínimo de datos: . Código SQL . INSERT INTO OFFER_STATUS (DESCRIPTION) VALUES('PENDING'); INSERT INTO OFFER_CANDIDATE_STATUS (DESCRIPTION) VALUES('INTERVIEW'); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Digital Twin', 'Two new Java developers should be incorporated. The salary range is between 20k€ and 30k€. The location is in Vigo full time.', 'Janna Tirte', 0, '2020-01-01', '2020-02-07', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Exotic language programmer', 'We are looking for a talented Programmer to create secure and functional code. You may have to provide quality coding solutions both for simple applications and complex information or operating systems. The ideal candidate will have a passion for technology and software building. Attention to detail and an analytical mind are essential qualities for a successful career in programming.', 'Richard Stallman', 0, '2019-12-01', '2019-12-15', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('HR Manager', 'We are looking for an experienced leader for our project management office focused on Project Management activities within our service delivery center to join our team in our Atlanta office. This role is integral to achieve accurate project management and process standardization throughout the organization. The major priority for the successful candidate will be to lead a team of project managers across a large portfolio of projects. Projects range from small enhancements, large-scale technology implementations, and daily operational activities.', 'Harry May', 0, '2020-01-01', '2020-01-07', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Software developer', 'Works under the direction and supervision of application managers and project managers to help build the next generation of global financial data systems to support the client’s front office, middle office processes and back-office risk, finance, compliance reporting, regulatory reporting, and capital markets and banking needs.', 'Tanya Howard', 0, '2020-01-01', '2020-01-02', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('UI developer', 'The ideal candidate will be responsible for developing user interfaces and controls that achieve maximum usability for our enterprise application and our customers.', 'Francis Harris', 0, '2019-12-01', '2019-12-24', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Entry level management', 'With the addition of various new clients requesting that we expand our services to new markets, we have an urgent need for a passionate individual that we can train, support, and groom to accept a role as a Manager within our firm. To ensure your success, we offer training that encompasses all facets of our business operations. You’ll experience hands on training provided by seasoned professionals in each department, primarily: Promotional Marketing Customer Service Consumer Relations Business Administration Recruiting and Talent Acquisition', 'Joy Boyd', 0, '2019-11-01', '2019-11-06', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('PHP developer', 'Responsible for all requests for data processing services including, preparation of specifications, development and maintenance of computer programs, job control language and operational documentation. Assists productions systems group. Interfaces with other departments to determine user needs.', 'Rebecca Bowman', 0, '2020-01-01', '2020-01-06', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Security engineer', 'This position is open within the Security Engineering teams, which has full end-to-end ownership of security tools that allows for strong security prevention, detection and response capabilities. Our mission is to ensure cyber infrastructure is in line with industry standards by performing day-to-day system administration, product selection for new tools, deployment, configuration, maintenance, and support and license management.', 'Harry Gardner', 0, '2020-01-01', '2020-01-16', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Project Manager', 'Performs a variety of duties associated with the development and production of the aircraft maintenance manuals, wiring diagram manuals and other associated documents. Utilize an automated publishing system to download, import, and distribute manual data.Individual will incorporate vendor revisions and Delta engineering documents into a Delta customized manual and coordinate the publishing of the same. Additional responsibilities may include continuous improvement of revision processes, training and point person for data issues. The Project Leader may also be responsible for review and distribution of Aircraft Maintenance Alerts (AMAs), company policy &amp; procedures, bulletins, vendor access, and other technical information.', 'Erika Torres', 0, '2020-01-01', '2020-01-15', NULL); INSERT INTO OFFER (ACRONYM, DESCRIPTION, APPLICANT, OFFER_STATUS, CREATION_DATE, START_DATE, END_DATE) VALUES('Istari support', 'Will provide administrative and logistical support to members of the executive team and may support other as needed. Must display professionalism and a strong work ethic while fostering a work environment that is positive, optimistic and collaborative. Position requires excellent administrative, communication, organizational and time management skills paired with flexibility, integrity and the ability to work independently. Must have Balrog fighting proficiency.', 'Eru Iúvatar', 0, '2020-01-01', '2020-01-06', NULL); INSERT INTO OFFER_CANDIDATES (ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS) VALUES(0, 0, 0, 0); INSERT INTO OFFER_CANDIDATES (ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS) VALUES(1, 0, 3, 0); INSERT INTO OFFER_CANDIDATES (ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS) VALUES(2, 0, 8, 0); INSERT INTO OFFER_CANDIDATES (ID, OFFER_ID, CANDIDATE_ID, OFFER_CANDIDATE_STATUS) VALUES(3, 0, 12, 0); . ",
    "url": "/docs/v3/tutorial/exercise8#creaci%C3%B3n-de-las-tablas-en-la-bd",
    
    "relUrl": "/tutorial/exercise8#creación-de-las-tablas-en-la-bd"
  },"229": {
    "doc": "Adding new services",
    "title": "Creación de los DAO",
    "content": "Crearemos los DAO asociados a las tablas recién añadidas a la BD. right_panel_open OfferCandidatesDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATES\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OfferCandidateStatusDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_CANDIDATE_STATUS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OfferDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OfferStatusDao.xml . &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;JdbcEntitySetup xmlns=\"http://www.ontimize.com/schema/jdbc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.ontimize.com/schema/jdbc http://www.ontimize.com/schema/jdbc/ontimize-jdbc-dao.xsd\" catalog=\"\" schema=\"${mainschema}\" table=\"OFFER_STATUS\" datasource=\"mainDataSource\" sqlhandler=\"dbSQLStatementHandler\"&gt; &lt;DeleteKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/DeleteKeys&gt; &lt;UpdateKeys&gt; &lt;Column&gt;ID&lt;/Column&gt; &lt;/UpdateKeys&gt; &lt;GeneratedKey&gt;ID&lt;/GeneratedKey&gt; &lt;/JdbcEntitySetup&gt; . OfferCandidatesDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferCandidatesDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidatesDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidatesDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_OFFER_ID =\"OFFER_ID\"; public static final String ATTR_CANDIDATE_ID =\"CANDIDATE_ID\"; public static final String ATTR_OFFER_CANDIDATE_STATUS =\"OFFER_CANDIDATE_STATUS\"; } . OfferCandidateStatusDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferCandidateStatusDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferCandidateStatusDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferCandidateStatusDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_DESCRIPTION =\"DESCRIPTION\"; } . OfferDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID = \"ID\"; public static final String ATTR_ACRONYM = \"ACRONYM\"; public static final String ATTR_DESCRIPTION = \"DESCRIPTION\"; public static final String ATTR_APPLICANT = \"APPLICANT\"; public static final String ATTR_OFFER_STATUS = \"OFFER_STATUS\"; public static final String ATTR_CREATION_DATE = \"CREATION_DATE\"; public static final String ATTR_START_DATE = \"START_DATE\"; public static final String ATTR_END_DATE = \"END_DATE\"; } . OfferStatusDao.java . package com.ontimize.hr.model.core.dao; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Repository; import com.ontimize.jee.server.dao.common.ConfigurationFile; import com.ontimize.jee.server.dao.jdbc.OntimizeJdbcDaoSupport; @Repository(\"OfferStatusDao\") @Lazy @ConfigurationFile(configurationFile = \"dao/OfferStatusDao.xml\", configurationFilePlaceholder = \"dao/placeholders.properties\") public class OfferStatusDao extends OntimizeJdbcDaoSupport { public static final String ATTR_ID =\"ID\"; public static final String ATTR_DESCRIPTION =\"DESCRIPTION\"; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise8#creaci%C3%B3n-de-los-dao",
    
    "relUrl": "/tutorial/exercise8#creación-de-los-dao"
  },"230": {
    "doc": "Adding new services",
    "title": "Creación de la interfaz del servicio",
    "content": "Creamos la interfaz del servicio de ofertas para el cual hemos creado los DAO. right_panel_open IOfferService.java . package com.ontimize.hr.api.core.service; import java.util.List; import java.util.Map; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; public interface IOfferService { // OFFER EntityResult offerQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult offerInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult offerUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult offerDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // OFFER STATUS EntityResult offerStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult offerStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult offerStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult offerStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // OFFER CANDIDATES EntityResult offerCandidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult offerCandidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult offerCandidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult offerCandidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; // OFFER CANDIDATES STATUS EntityResult offerCandidateStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException; EntityResult offerCandidateStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException; EntityResult offerCandidateStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; EntityResult offerCandidateStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException; } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise8#creaci%C3%B3n-de-la-interfaz-del-servicio",
    
    "relUrl": "/tutorial/exercise8#creación-de-la-interfaz-del-servicio"
  },"231": {
    "doc": "Adding new services",
    "title": "Creación del servicio",
    "content": "Creamos una clase como servicio e implementamos la interfaz anterior. right_panel_open OfferService.java . package com.ontimize.hr.model.core.service; import java.util.List; import java.util.Map; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Lazy; import org.springframework.stereotype.Service; import com.ontimize.hr.api.core.service.IOfferService; import com.ontimize.hr.model.core.dao.OfferCandidateStatusDao; import com.ontimize.hr.model.core.dao.OfferCandidatesDao; import com.ontimize.hr.model.core.dao.OfferDao; import com.ontimize.hr.model.core.dao.OfferStatusDao; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.exceptions.OntimizeJEERuntimeException; import com.ontimize.jee.server.dao.DefaultOntimizeDaoHelper; @Service(\"OfferService\") @Lazy public class OfferService implements IOfferService { @Autowired private OfferDao offerDao; @Autowired private OfferStatusDao offerStatusDao; @Autowired private OfferCandidatesDao offerCandidatesDao; @Autowired private OfferCandidateStatusDao offerCandidateStatusDao; @Autowired private DefaultOntimizeDaoHelper daoHelper; @Override public EntityResult offerQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerDao, keyMap, attrList); } @Override public EntityResult offerInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerDao, attrMap); } @Override public EntityResult offerUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerDao, attrMap, keyMap); } @Override public EntityResult offerDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerDao, keyMap); } @Override public EntityResult offerStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerStatusDao, keyMap, attrList); } @Override public EntityResult offerStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerStatusDao, attrMap); } @Override public EntityResult offerStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerStatusDao, attrMap, keyMap); } @Override public EntityResult offerStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerStatusDao, keyMap); } @Override public EntityResult offerCandidateQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidatesDao, keyMap, attrList); } @Override public EntityResult offerCandidateInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerCandidatesDao, attrMap); } @Override public EntityResult offerCandidateUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerCandidatesDao, attrMap, keyMap); } @Override public EntityResult offerCandidateDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerCandidatesDao, keyMap); } @Override public EntityResult offerCandidateStatusQuery(Map&lt;String, Object&gt; keyMap, List&lt;String&gt; attrList) throws OntimizeJEERuntimeException { return this.daoHelper.query(this.offerCandidateStatusDao, keyMap, attrList); } @Override public EntityResult offerCandidateStatusInsert(Map&lt;String, Object&gt; attrMap) throws OntimizeJEERuntimeException { return this.daoHelper.insert(this.offerCandidateStatusDao, attrMap); } @Override public EntityResult offerCandidateStatusUpdate(Map&lt;String, Object&gt; attrMap, Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.update(this.offerCandidateStatusDao, attrMap, keyMap); } @Override public EntityResult offerCandidateStatusDelete(Map&lt;String, Object&gt; keyMap) throws OntimizeJEERuntimeException { return this.daoHelper.delete(this.offerCandidateStatusDao, keyMap); } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . ",
    "url": "/docs/v3/tutorial/exercise8#creaci%C3%B3n-del-servicio",
    
    "relUrl": "/tutorial/exercise8#creación-del-servicio"
  },"232": {
    "doc": "Adding new services",
    "title": "Creación del controlador",
    "content": "Esta clase servirá para responder a las peticiones REST del servicio OfferService. right_panel_open OfferRestController.java . package com.ontimize.hr.ws.core.rest; import com.ontimize.hr.api.core.service.IOfferService; import com.ontimize.jee.server.rest.ORestController; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @RequestMapping(\"/offers\") public class OfferRestController extends ORestController&lt;IOfferService&gt; { @Autowired private IOfferService offerService; @Override public IOfferService getService() { return this.offerService; } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise8#creaci%C3%B3n-del-controlador",
    
    "relUrl": "/tutorial/exercise8#creación-del-controlador"
  },"233": {
    "doc": "Adding new services",
    "title": "Adding new services",
    "content": "Table of Contents . | Añadir nuevos servicios . | Introducción | Creación de las tablas en la BD | Creación de los DAO | Creación de la interfaz del servicio | Creación del servicio | Creación del controlador | . | . ",
    "url": "/docs/v3/tutorial/exercise8",
    
    "relUrl": "/tutorial/exercise8"
  },"234": {
    "doc": "Use of Basic Expression and new methods",
    "title": "Uso de BasicExpression y nuevos métodos",
    "content": " ",
    "url": "/docs/v3/tutorial/exercise9#uso-de-basicexpression-y-nuevos-m%C3%A9todos",
    
    "relUrl": "/tutorial/exercise9#uso-de-basicexpression-y-nuevos-métodos"
  },"235": {
    "doc": "Use of Basic Expression and new methods",
    "title": "Introducción",
    "content": "Es este ejercicio modificaremos el servicio de ofertas. En la primera parte, filtraremos las peticiones mediante el uso de BasicExpression en la propia petición REST. En la siguiente parte, haremos nuevos métodos para que filtren los datos con BasicExpression. ",
    "url": "/docs/v3/tutorial/exercise9#introducci%C3%B3n",
    
    "relUrl": "/tutorial/exercise9#introducción"
  },"236": {
    "doc": "Use of Basic Expression and new methods",
    "title": "¿Qué es una BasicExpression?",
    "content": "Una BasicExpression sirve para filtrar las peticiones de una manera compleja que delimite la respuesta dentro de unas condiciones. Las BasicExpression se componen de dos operandos (derecho e izquierdo) y un operador. El operando izquierdo puede contener el nombre de una columna u otra BasicExpression, el operando derecho puede contener un valor u otra BasicExpression y un operador que indicará la relación entre ellos. De tal manera que se puede crear una BasicExpression, que de manera resumida, filtre la petición mediante esta condición: . | START_DATE &gt;= 2020-01-01: En este caso, el operando izquierdo es el valor de la columna, START_DATE, el operando derecho es el valor de dicha columna y el operador es el símbolo &gt;= . De esta manera, obligaremos a que la condición de la consulta sea que devuelva todos los registros cuya fecha de inicio sea superior o igual al 1 de Enero del 2020. | (START_DATE &gt;= 2020-01-01) AND (END_DATE &lt;= 2020-06-30): En este caso existe una BasicExpression cuyo operando izquierdo es BasicExpression, el operando derecho es otra BasicExpression y el operador es el símbolo AND. | . ",
    "url": "/docs/v3/tutorial/exercise9#qu%C3%A9-es-una-basicexpression",
    
    "relUrl": "/tutorial/exercise9#qué-es-una-basicexpression"
  },"237": {
    "doc": "Use of Basic Expression and new methods",
    "title": "BasicExpression en el cuerpo de una petición REST",
    "content": "Una BasicExpression en la petición REST se escribe en el filter de esta misma petición, indicando que es una BasicExpression a través de la anotación @basic_expression, y dentro de ella, lop para el operando izquierdo, op para el operador, y rop para el operando derecho. Si queremos usar múltiples BasicExpression, basta con anidar dentro de cada operando una BasicExpression nueva. Crearemos algunas peticiones en Postman para usar las BasicExpression. | Tipo de petición | Petición | Cuerpo petición | . | POST | localhost:33333/offers/offer/search | { \"filter\": { \"@basic_expression\": { \"lop\": \"START_DATE\", \"op\": \"&gt;=\", \"rop\": \"2020-01-15\" } }, \"columns\": [ \"ID\", \"DESCRIPTION\", \"OFFER_STATUS\", \"END_DATE\", \"APPLICANT\", \"ACRONYM\", \"CREATION_DATE\", \"START_DATE\" ] } . | . | POST | localhost:33333/offers/offer/search | { \"filter\": { \"@basic_expression\": { \"lop\": { \"lop\": \"START_DATE\", \"op\": \"&gt;=\", \"rop\": \"2019-06-01\" }, \"op\": \"AND\", \"rop\": { \"lop\": \"START_DATE\", \"op\": \"&lt;\", \"rop\": \"2020-01-01\" } } }, \"columns\": [ \"ID\", \"DESCRIPTION\", \"OFFER_STATUS\", \"END_DATE\", \"APPLICANT\", \"ACRONYM\", \"CREATION_DATE\", \"START_DATE\" ] } . | . ",
    "url": "/docs/v3/tutorial/exercise9#basicexpression-en-el-cuerpo-de-una-petici%C3%B3n-rest",
    
    "relUrl": "/tutorial/exercise9#basicexpression-en-el-cuerpo-de-una-petición-rest"
  },"238": {
    "doc": "Use of Basic Expression and new methods",
    "title": "BasicExpression en el método de una petición REST",
    "content": "En caso de que queramos crear un método nuevo que podamos invocar desde una URL específica, sin tener que añadir nosotros una BasicExpression en el cuerpo de una petición REST. En este caso, crearemos dos nuevos métodos dentro del controlador REST de las ofertas. Uno que envíe todas las ofertas del presente año y otro que, pasado en la URL un parámetro, nos devuelva las ofertas de ese año en concreto. right_panel_open La anotacion @RequestMapping permite indicar la ruta para la que responderá este método, junto con el tipo de petición que se haga e indicar el tipo de respuesta a devolver. En las condiciones de la consulta, para indicar que el valor es una BasicExpression, tenemos que añadir, como clave EXPRESSION_KEY_UNIQUE_IDENTIFIER, o lo que es lo mismo, SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, una constante que contiene la cadena anterior. OfferRestController.java . OfferRestController.java package com.ontimize.hr.ws.core.rest; import java.util.Calendar; import java.util.Date; import java.util.HashMap; import java.util.List; import java.util.Map; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.MediaType; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController; import com.ontimize.hr.api.core.service.IOfferService; import com.ontimize.hr.model.core.dao.OfferDao; import com.ontimize.jee.common.db.SQLStatementBuilder; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicExpression; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicField; import com.ontimize.jee.common.db.SQLStatementBuilder.BasicOperator; import com.ontimize.jee.common.dto.EntityResult; import com.ontimize.jee.common.dto.EntityResultMapImpl; import com.ontimize.jee.server.rest.ORestController; @RestController @RequestMapping(\"/offers\") public class OfferRestController extends ORestController&lt;IOfferService&gt; { @Autowired private IOfferService offerService; @Override public IOfferService getService() { return this.offerService; } @RequestMapping(value = \"currentOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult currentOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetween(OfferDao.ATTR_START_DATE)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } @RequestMapping(value = \"yearOffers/search\", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE) public EntityResult yearOffersSearch(@RequestBody Map&lt;String, Object&gt; req) { try { List&lt;String&gt; columns = (List&lt;String&gt;) req.get(\"columns\"); Map&lt;String, Object&gt; filter = (Map&lt;String, Object&gt;) req.get(\"filter\"); int year = (int) filter.get(\"YEAR\"); Map&lt;String, Object&gt; key = new HashMap&lt;String, Object&gt;(); key.put(SQLStatementBuilder.ExtendedSQLConditionValuesProcessor.EXPRESSION_KEY, searchBetweenWithYear(OfferDao.ATTR_START_DATE, year)); return offerService.offerQuery(key, columns); } catch (Exception e) { e.printStackTrace(); EntityResult res = new EntityResultMapImpl(); res.setCode(EntityResult.OPERATION_WRONG); return res; } } private BasicExpression searchBetween(String param) { Calendar cal = Calendar.getInstance(); int currentYear = cal.get(Calendar.YEAR); return this.searchBetweenWithYear(param, currentYear); } private BasicExpression searchBetweenWithYear(String param, int year) { Calendar cal = Calendar.getInstance(); cal.set(year, 0, 1); Date startDate = cal.getTime(); cal.set(year + 1, 0, 1); Date endDate = cal.getTime(); BasicField field = new BasicField(param); BasicExpression bexp1 = new BasicExpression(field, BasicOperator.MORE_EQUAL_OP, startDate); BasicExpression bexp2 = new BasicExpression(field, BasicOperator.LESS_OP, endDate); return new BasicExpression(bexp1, BasicOperator.AND_OP, bexp2); } } . | hr . | hr-api . | src . | main . | java . | com . | ontimize . | hr . | api . | core . | service . | ICandidateService.java | IMasterService.java | IOfferService.java | IUserService.java | . | . | . | . | . | . | . | . | . | pom.xml | . | hr-boot . | src . | main . | java . | com . | ontimize . | hr . | ServerApplication.java | . | . | . | . | resources . | application.yml | . | . | . | pom.xml | . | hr-model . | src . | main . | db . | templateDB.script | templateDB.txt | . | java . | com . | ontimize . | hr . | model . | core . | dao . | CandidateDao.java | EducationDao.java | ExperienceLevelDao.java | OfferCandidatesDao.java | OfferCandidateStatusDao.java | OfferDao.java | OfferStatusDao.java | OriginDao.java | ProfileDao.java | StatusDao.java | UserDao.java | UserRoleDao.java | . | service . | CandidateService.java | MasterService.java | OfferService.java | UserService.java | . | . | . | . | . | . | . | resources . | dao . | CandidateDao.xml | EducationDao.xml | ExperienceLevelDao.xml | OfferCandidatesDao.xml | OfferCandidateStatusDao.xml | OfferDao.xml | OfferStatusDao.xml | OriginDao.xml | placeholders.properties | ProfileDao.xml | RoleDao.xml | RoleServerPermissionDao.xml | ServerPermissionDao.xml | StatusDao.xml | UserDao.xml | UserRoleDao.xml | . | . | . | . | pom.xml | . | hr-ws . | src . | main . | java . | com . | ontimize . | hr . | ws . | core . | rest . | CandidateRestController.java | MainRestController.java | MasterRestController.java | OfferRestController.java | TestRestController.java | UserRestController.java | . | . | . | . | . | . | . | . | . | pom.xml | . | .gitignore | Archetype_ontimize_boot.postman_collection.json | pom.xml | . | . arrow_back Tutorial anterior Próximo tutorial arrow_forward . ",
    "url": "/docs/v3/tutorial/exercise9#basicexpression-en-el-m%C3%A9todo-de-una-petici%C3%B3n-rest",
    
    "relUrl": "/tutorial/exercise9#basicexpression-en-el-método-de-una-petición-rest"
  },"239": {
    "doc": "Use of Basic Expression and new methods",
    "title": "Use of Basic Expression and new methods",
    "content": "Table of Contents . | Uso de BasicExpression y nuevos métodos . | Introducción | ¿Qué es una BasicExpression? | BasicExpression en el cuerpo de una petición REST | BasicExpression en el método de una petición REST | . | . ",
    "url": "/docs/v3/tutorial/exercise9",
    
    "relUrl": "/tutorial/exercise9"
  }
}
